!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(self,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="dist",n(n.s=13)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(4),s=n(2),r="Axibase Charts";function o(e,t,n=i.DiagnosticSeverity.Error){return i.Diagnostic.create(e,t,n,void 0,r)}t.isInMap=function(e,t){if(null==e)return!1;for(const n of t.values())for(const t of n)if(Array.isArray(t)&&t.includes(e)||t===e)return!0;return!1},t.isAnyInArray=function(e,t){for(const n of e)if(t.includes(n))return!0;return!1},t.getSetting=function(e,t){const n=s.Setting.clearSetting(e),i=(new a.ResourcesProvider).settingsMap.get(n);if(void 0===i)return;const r=new s.Setting(i);return t&&(r.textRange=t),r},t.countCsvColumns=function(e){return 0===e.length?0:e.replace(/(['"]).+\1/g,"").split(",").length},t.createDiagnostic=o,t.deleteComments=function(e){let t=e;const n=/\/\*[\s\S]*?\*\//g,i=/^[ \t]*#.*/gm;let a=n.exec(t);for(null===a&&(a=i.exec(t));null!==a;){const e=a[0].split("\n").length-1,s=Array(a[0].length).fill(" ").concat(Array(e).fill("\n")).join("");t=`${t.substr(0,a.index)}${s}${t.substr(a.index+a[0].length)}`,null===(a=n.exec(t))&&(a=i.exec(t))}return t},t.deleteScripts=function(e){return e.replace(/\bscript\b([\s\S]+?)\bendscript\b/g,"script\nendscript")},t.isEmpty=function(e){return/^\s*$/.test(e)},t.repetitionDiagnostic=function(e,t,n){const a=["script","thresholds","colors"].includes(n.name)?i.DiagnosticSeverity.Warning:i.DiagnosticSeverity.Error;let s;switch(n.name){case"script":s="Multi-line scripts are deprecated.\nGroup multiple scripts into blocks:\nscript\nendscript";break;case"thresholds":s="Replace multiple `thresholds` settings with one, for example:\nthresholds = 0\nthresholds = 60\nthresholds = 80\n\nthresholds = 0, 60, 80",t.values.push(n.value);break;case"colors":s="Replace multiple `colors` settings with one, for example:\ncolors = red\ncolors = yellow\ncolors = green\n\ncolors = red, yellow, green",t.values.push(n.value);break;default:s=`${t.displayName} is already defined`}return o(e,s,a)},t.createRange=function(e,t,n){return i.Range.create(i.Position.create(n,e),i.Position.create(n,e+t))}},function(e,t,n){"use strict";var i,a,s,r,o,l,c,p,u,m,d,g,y,h,f,v,b,w,x;n.r(t),n.d(t,"Position",function(){return i}),n.d(t,"Range",function(){return a}),n.d(t,"Location",function(){return s}),n.d(t,"LocationLink",function(){return r}),n.d(t,"Color",function(){return o}),n.d(t,"ColorInformation",function(){return l}),n.d(t,"ColorPresentation",function(){return c}),n.d(t,"FoldingRangeKind",function(){return p}),n.d(t,"FoldingRange",function(){return u}),n.d(t,"DiagnosticRelatedInformation",function(){return m}),n.d(t,"DiagnosticSeverity",function(){return d}),n.d(t,"Diagnostic",function(){return g}),n.d(t,"Command",function(){return y}),n.d(t,"TextEdit",function(){return h}),n.d(t,"TextDocumentEdit",function(){return f}),n.d(t,"CreateFile",function(){return v}),n.d(t,"RenameFile",function(){return b}),n.d(t,"DeleteFile",function(){return w}),n.d(t,"WorkspaceEdit",function(){return x}),n.d(t,"WorkspaceChange",function(){return z}),n.d(t,"TextDocumentIdentifier",function(){return N}),n.d(t,"VersionedTextDocumentIdentifier",function(){return S}),n.d(t,"TextDocumentItem",function(){return k}),n.d(t,"MarkupKind",function(){return $}),n.d(t,"MarkupContent",function(){return _}),n.d(t,"CompletionItemKind",function(){return C}),n.d(t,"InsertTextFormat",function(){return V}),n.d(t,"CompletionItem",function(){return T}),n.d(t,"CompletionList",function(){return q}),n.d(t,"MarkedString",function(){return D}),n.d(t,"Hover",function(){return E}),n.d(t,"ParameterInformation",function(){return I}),n.d(t,"SignatureInformation",function(){return R}),n.d(t,"DocumentHighlightKind",function(){return A}),n.d(t,"DocumentHighlight",function(){return M}),n.d(t,"SymbolKind",function(){return j}),n.d(t,"SymbolInformation",function(){return P}),n.d(t,"DocumentSymbol",function(){return H}),n.d(t,"CodeActionKind",function(){return O}),n.d(t,"CodeActionContext",function(){return F}),n.d(t,"CodeAction",function(){return U}),n.d(t,"CodeLens",function(){return W}),n.d(t,"FormattingOptions",function(){return K}),n.d(t,"DocumentLink",function(){return B}),n.d(t,"EOL",function(){return Y}),n.d(t,"TextDocument",function(){return G}),n.d(t,"TextDocumentSaveReason",function(){return X}),function(e){e.create=function(e,t){return{line:e,character:t}},e.is=function(e){var t=e;return J.objectLiteral(t)&&J.number(t.line)&&J.number(t.character)}}(i||(i={})),function(e){e.create=function(e,t,n,a){if(J.number(e)&&J.number(t)&&J.number(n)&&J.number(a))return{start:i.create(e,t),end:i.create(n,a)};if(i.is(e)&&i.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+a+"]")},e.is=function(e){var t=e;return J.objectLiteral(t)&&i.is(t.start)&&i.is(t.end)}}(a||(a={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return J.defined(t)&&a.is(t.range)&&(J.string(t.uri)||J.undefined(t.uri))}}(s||(s={})),function(e){e.create=function(e,t,n,i){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:i}},e.is=function(e){var t=e;return J.defined(t)&&a.is(t.targetRange)&&J.string(t.targetUri)&&(a.is(t.targetSelectionRange)||J.undefined(t.targetSelectionRange))&&(a.is(t.originSelectionRange)||J.undefined(t.originSelectionRange))}}(r||(r={})),function(e){e.create=function(e,t,n,i){return{red:e,green:t,blue:n,alpha:i}},e.is=function(e){var t=e;return J.number(t.red)&&J.number(t.green)&&J.number(t.blue)&&J.number(t.alpha)}}(o||(o={})),function(e){e.create=function(e,t){return{range:e,color:t}},e.is=function(e){var t=e;return a.is(t.range)&&o.is(t.color)}}(l||(l={})),function(e){e.create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},e.is=function(e){var t=e;return J.string(t.label)&&(J.undefined(t.textEdit)||h.is(t))&&(J.undefined(t.additionalTextEdits)||J.typedArray(t.additionalTextEdits,h.is))}}(c||(c={})),function(e){e.Comment="comment",e.Imports="imports",e.Region="region"}(p||(p={})),function(e){e.create=function(e,t,n,i,a){var s={startLine:e,endLine:t};return J.defined(n)&&(s.startCharacter=n),J.defined(i)&&(s.endCharacter=i),J.defined(a)&&(s.kind=a),s},e.is=function(e){var t=e;return J.number(t.startLine)&&J.number(t.startLine)&&(J.undefined(t.startCharacter)||J.number(t.startCharacter))&&(J.undefined(t.endCharacter)||J.number(t.endCharacter))&&(J.undefined(t.kind)||J.string(t.kind))}}(u||(u={})),function(e){e.create=function(e,t){return{location:e,message:t}},e.is=function(e){var t=e;return J.defined(t)&&s.is(t.location)&&J.string(t.message)}}(m||(m={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(d||(d={})),function(e){e.create=function(e,t,n,i,a,s){var r={range:e,message:t};return J.defined(n)&&(r.severity=n),J.defined(i)&&(r.code=i),J.defined(a)&&(r.source=a),J.defined(s)&&(r.relatedInformation=s),r},e.is=function(e){var t=e;return J.defined(t)&&a.is(t.range)&&J.string(t.message)&&(J.number(t.severity)||J.undefined(t.severity))&&(J.number(t.code)||J.string(t.code)||J.undefined(t.code))&&(J.string(t.source)||J.undefined(t.source))&&(J.undefined(t.relatedInformation)||J.typedArray(t.relatedInformation,m.is))}}(g||(g={})),function(e){e.create=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var a={title:e,command:t};return J.defined(n)&&n.length>0&&(a.arguments=n),a},e.is=function(e){var t=e;return J.defined(t)&&J.string(t.title)&&J.string(t.command)}}(y||(y={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}},e.is=function(e){var t=e;return J.objectLiteral(t)&&J.string(t.newText)&&a.is(t.range)}}(h||(h={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return J.defined(t)&&S.is(t.textDocument)&&Array.isArray(t.edits)}}(f||(f={})),function(e){e.create=function(e,t){var n={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(n.options=t),n},e.is=function(e){var t=e;return t&&"create"===t.kind&&J.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||J.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||J.boolean(t.options.ignoreIfExists)))}}(v||(v={})),function(e){e.create=function(e,t,n){var i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),i},e.is=function(e){var t=e;return t&&"rename"===t.kind&&J.string(t.oldUri)&&J.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||J.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||J.boolean(t.options.ignoreIfExists)))}}(b||(b={})),function(e){e.create=function(e,t){var n={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(n.options=t),n},e.is=function(e){var t=e;return t&&"delete"===t.kind&&J.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||J.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||J.boolean(t.options.ignoreIfNotExists)))}}(w||(w={})),function(e){e.is=function(e){var t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every(function(e){return J.string(e.kind)?v.is(e)||b.is(e)||w.is(e):f.is(e)}))}}(x||(x={}));var N,S,k,$,_,C,V,T,q,D,E,I,R,A,M,j,P,L=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,t){this.edits.push(h.insert(e,t))},e.prototype.replace=function(e,t){this.edits.push(h.replace(e,t))},e.prototype.delete=function(e){this.edits.push(h.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),z=function(){function e(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){if(f.is(e)){var n=new L(e.edits);t._textEditChanges[e.textDocument.uri]=n}}):e.changes&&Object.keys(e.changes).forEach(function(n){var i=new L(e.changes[n]);t._textEditChanges[n]=i}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(S.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var t=e;if(!(i=this._textEditChanges[t.uri])){var n={textDocument:t,edits:a=[]};this._workspaceEdit.documentChanges.push(n),i=new L(a),this._textEditChanges[t.uri]=i}return i}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var i;if(!(i=this._textEditChanges[e])){var a=[];this._workspaceEdit.changes[e]=a,i=new L(a),this._textEditChanges[e]=i}return i},e.prototype.createFile=function(e,t){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(v.create(e,t))},e.prototype.renameFile=function(e,t,n){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(b.create(e,t,n))},e.prototype.deleteFile=function(e,t){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(w.create(e,t))},e.prototype.checkDocumentChanges=function(){if(!this._workspaceEdit||!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.")},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return J.defined(t)&&J.string(t.uri)}}(N||(N={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return J.defined(t)&&J.string(t.uri)&&(null===t.version||J.number(t.version))}}(S||(S={})),function(e){e.create=function(e,t,n,i){return{uri:e,languageId:t,version:n,text:i}},e.is=function(e){var t=e;return J.defined(t)&&J.string(t.uri)&&J.string(t.languageId)&&J.number(t.version)&&J.string(t.text)}}(k||(k={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}($||($={})),function(e){e.is=function(t){var n=t;return n===e.PlainText||n===e.Markdown}}($||($={})),function(e){e.is=function(e){var t=e;return J.objectLiteral(e)&&$.is(t.kind)&&J.string(t.value)}}(_||(_={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(C||(C={})),function(e){e.PlainText=1,e.Snippet=2}(V||(V={})),function(e){e.create=function(e){return{label:e}}}(T||(T={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(q||(q={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},e.is=function(e){var t=e;return J.string(t)||J.objectLiteral(t)&&J.string(t.language)&&J.string(t.value)}}(D||(D={})),function(e){e.is=function(e){var t=e;return!!t&&J.objectLiteral(t)&&(_.is(t.contents)||D.is(t.contents)||J.typedArray(t.contents,D.is))&&(void 0===e.range||a.is(e.range))}}(E||(E={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(I||(I={})),function(e){e.create=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var a={label:e};return J.defined(t)&&(a.documentation=t),J.defined(n)?a.parameters=n:a.parameters=[],a}}(R||(R={})),function(e){e.Text=1,e.Read=2,e.Write=3}(A||(A={})),function(e){e.create=function(e,t){var n={range:e};return J.number(t)&&(n.kind=t),n}}(M||(M={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(j||(j={})),function(e){e.create=function(e,t,n,i,a){var s={name:e,kind:t,location:{uri:i,range:n}};return a&&(s.containerName=a),s}}(P||(P={}));var O,F,U,W,K,H=function(){return function(){}}();!function(e){e.create=function(e,t,n,i,a,s){var r={name:e,detail:t,kind:n,range:i,selectionRange:a};return void 0!==s&&(r.children=s),r},e.is=function(e){var t=e;return t&&J.string(t.name)&&J.number(t.kind)&&a.is(t.range)&&a.is(t.selectionRange)&&(void 0===t.detail||J.string(t.detail))&&(void 0===t.deprecated||J.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))}}(H||(H={})),function(e){e.QuickFix="quickfix",e.Refactor="refactor",e.RefactorExtract="refactor.extract",e.RefactorInline="refactor.inline",e.RefactorRewrite="refactor.rewrite",e.Source="source",e.SourceOrganizeImports="source.organizeImports"}(O||(O={})),function(e){e.create=function(e,t){var n={diagnostics:e};return null!=t&&(n.only=t),n},e.is=function(e){var t=e;return J.defined(t)&&J.typedArray(t.diagnostics,g.is)&&(void 0===t.only||J.typedArray(t.only,J.string))}}(F||(F={})),function(e){e.create=function(e,t,n){var i={title:e};return y.is(t)?i.command=t:i.edit=t,void 0!==n&&(i.kind=n),i},e.is=function(e){var t=e;return t&&J.string(t.title)&&(void 0===t.diagnostics||J.typedArray(t.diagnostics,g.is))&&(void 0===t.kind||J.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||y.is(t.command))&&(void 0===t.edit||x.is(t.edit))}}(U||(U={})),function(e){e.create=function(e,t){var n={range:e};return J.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return J.defined(t)&&a.is(t.range)&&(J.undefined(t.command)||y.is(t.command))}}(W||(W={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return J.defined(t)&&J.number(t.tabSize)&&J.boolean(t.insertSpaces)}}(K||(K={}));var B=function(){return function(){}}();!function(e){e.create=function(e,t,n){return{range:e,target:t,data:n}},e.is=function(e){var t=e;return J.defined(t)&&a.is(t.range)&&(J.undefined(t.target)||J.string(t.target))}}(B||(B={}));var G,X,Y=["\n","\r\n","\r"];!function(e){e.create=function(e,t,n,i){return new Z(e,t,n,i)},e.is=function(e){var t=e;return!!(J.defined(t)&&J.string(t.uri)&&(J.undefined(t.languageId)||J.string(t.languageId))&&J.number(t.lineCount)&&J.func(t.getText)&&J.func(t.positionAt)&&J.func(t.offsetAt))},e.applyEdits=function(e,t){for(var n=e.getText(),i=function e(t,n){if(t.length<=1)return t;var i=t.length/2|0,a=t.slice(0,i),s=t.slice(i);e(a,n),e(s,n);for(var r=0,o=0,l=0;r<a.length&&o<s.length;){var c=n(a[r],s[o]);t[l++]=c<=0?a[r++]:s[o++]}for(;r<a.length;)t[l++]=a[r++];for(;o<s.length;)t[l++]=s[o++];return t}(t,function(e,t){var n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n}),a=n.length,s=i.length-1;s>=0;s--){var r=i[s],o=e.offsetAt(r.range.start),l=e.offsetAt(r.range.end);if(!(l<=a))throw new Error("Overlapping edit");n=n.substring(0,o)+r.newText+n.substring(l,n.length),a=o}return n}}(G||(G={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(X||(X={}));var J,Z=function(){function e(e,t,n,i){this._uri=e,this._languageId=t,this._version=n,this._content=i,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],t=this._content,n=!0,i=0;i<t.length;i++){n&&(e.push(i),n=!1);var a=t.charAt(i);n="\r"===a||"\n"===a,"\r"===a&&i+1<t.length&&"\n"===t.charAt(i+1)&&i++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,a=t.length;if(0===a)return i.create(0,e);for(;n<a;){var s=Math.floor((n+a)/2);t[s]>e?a=s:n=s+1}var r=n-1;return i.create(r,e-t[r])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],i=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,i),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(J||(J={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(7),s=n(3),r=n(0);t.intervalUnits=["nanosecond","millisecond","second","minute","hour","day","week","month","quarter","year"],t.calendarKeywords=["current_day","current_hour","current_minute","current_month","current_quarter","current_week","current_year","first_day","first_vacation_day","first_working_day","friday","last_vacation_day","last_working_day","monday","next_day","next_hour","next_minute","next_month","next_quarter","next_vacation_day","next_week","next_working_day","next_year","now","previous_day","previous_hour","previous_minute","previous_month","previous_quarter","previous_vacation_day","previous_week","previous_working_day","previous_year","saturday","sunday","thursday","tuesday","wednesday"];const o=new RegExp(`^(?:${["false","no","null","none","0","off","true","yes","on","1"].join("|")})$`),l=new RegExp(`^(?:${t.calendarKeywords.join("|")})`+`(?:[ \\t]*[-+][ \\t]*(?:\\d+|(?:\\d+)?\\.\\d+)[ \\t]*\\*[ \\t]*(?:${t.intervalUnits.join("|")}))?$`),c=/^[-+]?\d+$/,p=new RegExp(`^(?:(?:[-+]?(?:(?:\\d+|(?:\\d+)?\\.\\d+)|@\\{.+\\})[ \\t]*(?:${t.intervalUnits.join("|")}))|all)$`),u=new RegExp("^(?:19[7-9]|[2-9]\\d\\d)\\d(?:-(?:0[1-9]|1[0-2])(?:-(?:0[1-9]|[12][0-9]|3[01])(?: (?:[01]\\d|2[0-4]):(?:[0-5][0-9])(?::(?:[0-5][0-9]))?(?:\\.\\d{1,9})?)?)?)?$"),m=/^(?:\-|\+)?(?:\.\d+|\d+(?:\.\d+)?)$/,d=new RegExp("^(?:19[7-9]|[2-9]\\d\\d)\\d-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])[tT](?:[01]\\d|2[0-4]):(?:[0-5][0-9]):(?:[0-5][0-9])(?:\\.\\d{1,9})?(?:[zZ]|[+-](?:[01]\\d|2[0-4]):?(?:[0-5][0-9]))$"),g=/[@$]\{.+\}/;const y=new Map([["forecastssagroupmanualgroups",{errMsg:"Incorrect group syntax",isIncorrect:e=>{return!/^[\d\s,;-]+$/.test(e)}}],["forecastssagroupautounion",{errMsg:"Incorrect group union syntax",isIncorrect:e=>{return!/^[a-z\s,;-]+$/.test(e)}}]]);t.Setting=class extends a.DefaultSetting{constructor(e){super(e),this.value="",this.values=[]}get textRange(){return this._textRange}set textRange(e){this._textRange=e}checkType(e){let n;if(g.test(this.value))return n;switch(this.type){case"string":{if(!/\S/.test(this.value)){n=r.createDiagnostic(e,`${this.displayName} can not be empty`);break}if(this.enum.length>0){if(this.value.split(/\s*,\s*/).some(e=>this.enum.indexOf(e)<0)){const t=this.enum.sort().join("\n * ");n=r.createDiagnostic(e,`${this.displayName} must contain only the following:\n * ${t}`)}break}const t=y.get(this.name);t&&t.isIncorrect(this.value)&&(n=r.createDiagnostic(e,t.errMsg));break}case"number":{const t=/(\d*)%/.exec(this.value);"arrowlength"===this.name&&t&&(this.maxValue="object"==typeof this.maxValue?100*this.maxValue.value:100*this.maxValue,this.minValue="object"==typeof this.minValue?100*this.minValue.value:100*this.minValue,this.value=t[1]),n=this.checkNumber(m,`${this.displayName} should be a real (floating-point) number.`,e);break}case"integer":n=this.checkNumber(c,`${this.displayName} should be an integer number.`,e);break;case"boolean":o.test(this.value)||(n=r.createDiagnostic(e,`${this.displayName} should be a boolean value. For example, ${this.example}`));break;case"enum":{const t=this.findIndexInEnum(this.value);if(0===this.enum.length)n=r.createDiagnostic(e,s.illegalSetting(this.displayName));else if(t<0){if(/percentile/.test(this.value)&&/statistic/.test(this.name)){n=this.checkPercentile(e);break}const t=this.enum.sort().join("\n * ").replace(/percentile\\.+/,"percentile(n)");n=r.createDiagnostic(e,`${this.displayName} must be one of:\n * ${t}`)}break}case"interval":if(!p.test(this.value)){const a=`.\nFor example, ${this.example}. Supported units:\n * ${t.intervalUnits.join("\n * ")}`;"updateinterval"===this.name&&/^\d+$/.test(this.value)?n=r.createDiagnostic(e,`Specifying the interval in seconds is deprecated.\nUse \`count unit\` format${a}`,i.DiagnosticSeverity.Warning):this.enum.length>0?this.findIndexInEnum(this.value)<0&&(n=r.createDiagnostic(e,`Use ${this.enum.sort().join(", ")} or \`count unit\` format${a}`)):n=r.createDiagnostic(e,`${this.displayName} should be set as \`count unit\`${a}`)}break;case"date":a=this.value,l.test(a)||u.test(a)||d.test(a)||(n=r.createDiagnostic(e,`${this.displayName} should be a date. For example, ${this.example}`));break;case"object":try{JSON.parse(this.value)}catch(t){n=r.createDiagnostic(e,`Invalid object specified: ${t.message}`)}break;default:throw new Error(`${this.type} is not handled`)}var a;return n}checkNumber(e,t,n){const i=` For example, ${this.example}`;if(!e.test(this.value))return r.createDiagnostic(n,`${t}${i}`);const a="object"==typeof this.minValue?this.minValue.value:this.minValue,s="object"==typeof this.minValue&&this.minValue.excluded,o="object"==typeof this.maxValue?this.maxValue.value:this.maxValue,l="object"==typeof this.maxValue&&this.maxValue.excluded,c=s?"(":"[",p=l?")":"]";return s&&+this.value<=a||+this.value<a||l&&+this.value>=o||+this.value>o?r.createDiagnostic(n,`${this.displayName} should be in range ${c}${a}, ${o}${p}.${i}`):void 0}checkPercentile(e){let t;const n=this.value.match(/[^percntil_()]+/);return n&&+n[0]>=0&&+n[0]<=100?/_/.test(this.value)?t=r.createDiagnostic(e,`Underscore is deprecated, use percentile(${n[0]}) instead`,i.DiagnosticSeverity.Warning):new RegExp(`\\(${n[0]}\\)`).test(this.value)||(t=r.createDiagnostic(e,`Wrong usage. Expected: percentile(${n[0]}).\nCurrent: ${this.value}`)):t=r.createDiagnostic(e,`n must be a decimal number between [0, 100]. Current: ${n?n[0]:n}`),t}findIndexInEnum(e){return this.enum.findIndex(t=>new RegExp(`^${t}$`,"i").test(e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unknownToken=e=>`${e} is unknown.`,t.deprecatedTagSection='Replace [tag] sections with [tags].\nEnclose the tag name in double quotes in case it contains special characters.\n\n[tag]\n  name = k\n  value = v\n[tag]\n  name = my column\n  value = my value\n\n[tags]\n  k = v\n  "my column" = my value\n',t.settingsWithWhitespaces=e=>`The setting "${e}" contains whitespaces.\nReplace spaces with hyphens.`,t.tagNameWithWhitespaces=e=>`The tag name ${e} contains whitespaces. Wrap it in double quotes.`,t.settingNameInTags=e=>`${e} is interpreted as a series tag and is sent to the\nserver. `+"Move the setting outside of the [tags] section or\nenclose in double-quotes to send it to the server without\na warning.",t.uselessScope=(e,t)=>`${e} setting is appplied only if ${t}.`,t.incorrectColors=(e,t)=>`Number of colors (if specified) must be equal to\nnumber of thresholds minus 1.\nCurrent: ${e}, expected: ${t}`,t.illegalSetting=e=>`${e} setting is not allowed here.`;const i=/(^[ \t]*csv[ \t]+)[ \t]*(from)/;t.getCsvErrorMessage=e=>i.test(e)?"<name> in 'csv <name> from <url>' is missing":"The line should contain a '=' or 'from' keyword",t.noRequiredSetting=(e,t)=>`${t} is required if ${e} is specified`,t.noRequiredSettings=(e,t)=>`${e} has effect only with one of the following:\n * ${t.join("\n * ")}`,t.noMatching=(e,t)=>`${e} has no matching ${t}`,t.lineFeedRequired=e=>`A linefeed character after '${e}' keyword is required`},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);class a{constructor(){this.settingsMap=this.createSettingsMap()}static getRequiredSectionSettingsMap(e){return new Map([["configuration",{sections:[["group"]]}],["series",{settings:[[e.get("entity"),e.get("value"),e.get("entities"),e.get("entitygroup"),e.get("entityexpression")],[e.get("metric"),e.get("value"),e.get("table"),e.get("attribute")]]}],["group",{sections:[["widget"]]}],["widget",{sections:[["series"]],settings:[[e.get("type")]]}],["dropdown",{settings:[[e.get("onchange"),e.get("changefield")]]}],["node",{settings:[[e.get("id")]]}]])}static getParents(e){let t=[];const n=a.parentSections.get(e);if(void 0!==n)for(const e of n)t=t.concat(e,this.getParents(e));return t}static isNestedToPrevious(e,t){return void 0!==e&&void 0!==t&&a.getParents(e).includes(t)}static readSettings(){const t=n(8),i=n(9),a=t.join(e,"..","dictionary.json"),s=i.readFileSync(a,"UTF-8");return JSON.parse(s).settings}static readDescriptions(){const t=n(8),i=n(9),a=t.join(e,"..","descriptions.md"),s=i.readFileSync(a,"UTF-8"),r=new Map,o=/\#\# ([a-z]+?)  \n  \n([^\s#][\S\s]+?)  (?=\n  (?:\n(?=\#)|$))/g;let l=o.exec(s);for(;null!==l;){const[,e,t]=l;r.set(e,t),l=o.exec(s)}return r}static isCompleteSetting(e){return void 0!==e&&void 0!==e.displayName&&void 0!==e.type&&void 0!==e.example}createSettingsMap(){const e=a.readDescriptions(),t=a.readSettings(),n=new Map;for(const s of t)if(a.isCompleteSetting(s)){const t=i.Setting.clearSetting(s.displayName);Object.assign(s,{name:t,description:e.get(t)});const a=new i.Setting(s);n.set(a.name,a)}return n}}a.widgetRequirementsByType=new Map([["console",{sections:[]}],["page",{sections:[]}],["property",{sections:[["property"]]}],["graph",{sections:[["series","node","link"]]}]]),a.parentSections=new Map([["widget",["group","configuration"]],["series",["widget","link"]],["tag",["series"]],["tags",["series"]],["column",["widget"]],["node",["widget"]],["link",["widget"]],["option",["dropdown"]]]),a.sectionDepthMap={configuration:0,group:1,widget:2,column:3,dropdown:3,keys:3,link:3,node:3,other:3,placeholders:3,property:3,series:3,threshold:3,option:4,properties:4,tag:4,tags:4},a.inheritableSections=new Set(["keys","tags"]),t.ResourcesProvider=a}).call(this,"/")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),a=["mode","type"];function s(e,t){let n;if(a.includes(e))n=t.getScopeValue(e);else{let a=t.getSettingFromTree(e);void 0===a?void 0!==(a=i.getSetting(e))&&(n=a.defaultValue):n=a.value}return n}t.requiredCondition=function(e,t){return n=>{const i=s(e,n);return!i||new RegExp(t.join("|")).test(i.toString())}},t.isNotUselessIf=function(e,t){return n=>{const i=s(e,n);return!i||new RegExp(t.join("|")).test(i.toString())?null:t.length>1?`${e} is one of ${t.join(", ")}`:`${e} is ${t[0]}`}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(2),s=n(0);t.snippets=n(14);t.CompletionProvider=class{constructor(e,t,n){const i=e.getText().substr(0,e.offsetAt(t));this.text=s.deleteScripts(s.deleteComments(i));let a=this.text.split("\n");this.currentLine=a[a.length-1],this.settingsMap=n}getCompletionItems(){let e=/^\s*(\S+)\s*=\s*/.exec(this.currentLine);return e?this.completeSettingValue(e[1]):this.completeSnippets().concat(this.completeIf(),this.completeFor(),this.completeSettingName())}completeFor(){const e=/^[ \t]*(?:list|var)[ \t]+(\S+)[ \t]*=/gm;let t,n=e.exec(this.text);for(;n;)t=n,n=e.exec(this.text);let a="collection",s="item";t&&(a=t[1]).endsWith("s")&&(s=a.substr(0,a.lastIndexOf("s")));const r=i.CompletionItem.create("for");return r.insertText=`\nfor \${1:${s}} in \${2:${a}}\n  \${3:entity = @{\${1:${s}}}}\n  \${0}\nendfor`,r.detail="For loop",r.kind=i.CompletionItemKind.Keyword,r.insertTextFormat=i.InsertTextFormat.Snippet,r}completeIf(){const e=/^[ \t]*for[ \t]+(\w+)[ \t]+in/gim,t=/^[ \t]*endfor/gim;let n,a=e.exec(this.text);for(;a;){const i=t.exec(this.text);(!i||i.index<a.index)&&(n=a),a=e.exec(this.text)}let s="item";n&&(s=n[1]);const r=i.CompletionItem.create("if string");r.detail="if item equals text",r.insertText=`\nif @{\${1:${s}}} \${2:==} \${3:"item1"}\n  \${4:entity} = \${5:"item2"}\nelse\n  \${4:entity} = \${6:"item3"}\nendif\n\${0}`;const o=i.CompletionItem.create("if number");o.insertText=`\nif @{\${1:${s}}} \${2:==} \${3:5}\n  \${4:entity} = \${5:"item1"}\nelse\n  \${4:entity} = \${6:"item2"}\nendif\n\${0}`,o.detail="if item equals number";const l=i.CompletionItem.create("if else if");return l.detail="if item equals number else if",l.insertText=`\nif @{\${1:${s}}} \${2:==} \${3:5}\n  \${4:entity} = \${5:"item1"}\nelseif @{\${1:${s}}} \${6:==} \${7:6}\n  \${4:entity} = \${8:"item2"}\nelse\n  \${4:entity} = \${9:"item3"}\nendif\n\${0}`,[r,o,l].map(e=>(e.insertTextFormat=i.InsertTextFormat.Snippet,e.kind=i.CompletionItemKind.Snippet,e))}completeSettingName(){const e=[];for(let[,t]of this.settingsMap)e.push(this.fillCompletionItem({detail:`${t.description?t.description+"\n":""}Example: ${t.example}`,insertText:`${t.displayName} = `,kind:i.CompletionItemKind.Field,name:t.displayName}));return e}completeSettingValue(e){const t=s.getSetting(e);if(!t)return[];switch(t.type){case"string":return this.completeStringSettingValue(t);case"number":case"integer":if(t.example)return[this.fillCompletionItem({insertText:t.example.toString()})];break;case"boolean":return this.getItemsArray(["true","false"]);case"enum":return this.getItemsArray(t.enum.map(e=>e.replace(/percentile\\.+/,"percentile(n)")));case"interval":return this.getItemsArray(a.intervalUnits,...t.enum);case"date":return this.getItemsArray(a.calendarKeywords,(new Date).toISOString());default:return[]}return[]}completeSnippets(){return Object.keys(t.snippets).map(e=>{const n="string"==typeof t.snippets[e].body?t.snippets[e].body:t.snippets[e].body.join("\n");return this.fillCompletionItem({insertText:n,detail:t.snippets[e].description,name:e,insertTextFormat:i.InsertTextFormat.Snippet,kind:i.CompletionItemKind.Keyword})})}completeStringSettingValue(e){let t=[],n=[];return e.possibleValues&&(t=e.possibleValues.map(e=>this.fillCompletionItem({insertText:e.value,detail:e.detail}))),e.script&&e.script.fields.forEach(e=>{if("function"===e.type){let t={insertText:"",kind:i.CompletionItemKind.Function};if(e.args){let i=e.args.filter(e=>e.required),a=e.args.filter(e=>!e.required),s=`${i.map(e=>e.name).join(", ")}`;t.insertText=`${e.name}${""!==s?"("+s+")":""}`,n.push(this.fillCompletionItem(t));let r="";for(let i of a)r=`${""!==r?r+", ":""}${i.name}`,t.insertText=`${e.name}(${""!==s?s+", ":""}${r})`,n.push(this.fillCompletionItem(t))}else t.insertText=e.name,n.push(this.fillCompletionItem(t))}else n.push(this.fillCompletionItem({insertText:e.name,detail:`Type: ${e.type}`}))}),e.possibleValues||""===e.example||(t=[this.fillCompletionItem({insertText:e.example.toString(),kind:i.CompletionItemKind.Field})]),t.concat(n)}fillCompletionItem(e){let t=i.CompletionItem.create(e.name||e.insertText);return t.insertTextFormat=e.insertTextFormat||i.InsertTextFormat.PlainText,t.kind=e.kind||i.CompletionItemKind.Value,t.insertText=e.insertText,t.detail=e.detail||e.insertText,t.sortText=t.kind.toString(),t}getItemsArray(e,...t){let n=e.map(e=>this.fillCompletionItem({insertText:e}));for(let e of t)n.push(this.fillCompletionItem({insertText:e}));return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);class a{constructor(e){if(this.description="",this.displayName="",this.enum=[],this.example="",this.excludes=[],this.maxValue=1/0,this.minValue=-1/0,this.multiLine=!1,this.name="",this.type="",this.widget=[],this.overrideCache=[],Object.assign(this,e),this.enum=this.enum.map(e=>e.toLowerCase()),this.name=a.clearSetting(this.displayName),this.override)for(const e in this.override)this.override.hasOwnProperty(e)&&this.overrideCache.push({setting:this.override[e],test:this.getOverrideTest(e)})}applyScope(e){if(null==this.override)return this;let t=this.overrideCache.filter(t=>t.test(e)).map(e=>e.setting);if(t.length>0){let e=Object.create(i.Setting.prototype);return Object.assign(e,this,...t)}return this}toString(){if(null==this.description)return"";let e=`${this.description}  \n\n`;null!=this.example&&""!==this.example&&(e+=`Example: ${this.displayName} = ${this.example}  \n`),null!=this.type&&""!==this.type&&(e+=`Type: ${this.type}  \n`),null!=this.defaultValue&&""!==this.defaultValue&&(e+=`Default value: ${this.defaultValue}  \n`),null==this.enum&&0===this.enum.length&&(e+=`Possible values: ${this.enum.join()}  \n`),null!=this.excludes&&0!==this.excludes.length&&(e+=`Can not be specified with: ${this.excludes.join()}  \n`),null!=this.maxValue&&this.maxValue!==1/0&&(e+=`Maximum: ${this.maxValue}  \n`),null!=this.minValue&&this.minValue!==-1/0&&(e+=`Minimum: ${this.minValue}  \n`),null!=this.section&&0!==this.section.length&&(e+=`Allowed in section: ${this.section}  \n`);let t="all";return"string"!=typeof this.widget&&this.widget.length>0?t=this.widget.join(", "):this.widget.length>0&&(t=this.widget),e+=`Allowed in widgets: ${t}  \n`}getOverrideTest(e){let t=["widget","section"],n=/^\[(.*)\]$/.exec(e);if(null==n)throw new Error("Wrong override scope format");let i=`return !!(${n[1]});`,a=new Function(t.join(),i);return n=>{try{let i=t.map(e=>n[e]);return a.apply(void 0,i)}catch(t){console.error(`In '${e}' :: ${t}`)}}}}a.clearSetting=e=>e.toLowerCase().replace(/[^a-z]/g,""),a.clearValue=e=>e.toLowerCase(),t.DefaultSetting=a},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(15),s=n(16),r=n(18),o=n(7),l=n(28),c=n(3),p=n(4),u=n(29),m=n(2),d=n(11),g=n(0),y=["url","urlparameters"],h=/(^[ \t]*csv[ \t]+)(\w+)[ \t]*(=)/m,f=/=[ \t]*$/m,v=/(^[ \t]*csv[ \t]+)(\w+)[ \t]*(from)/m,b=/^[ \t]*$/m,w=/\b(csv)\b/i;t.Validator=class{constructor(e){this.aliases=[],this.sectionStack=new u.SectionStack,this.currentSettings=[],this.deAliases=[],this.ifSettings=new Map,this.keywordsStack=[],this.parentSettings=new Map,this.previousSettings=[],this.requiredSettings=[],this.result=[],this.settingValues=new Map,this.variables=new Map([["freemarker",["entity","entities","type"]]]),this.lastEndIf=void 0,this.configTree=new s.ConfigTree,this.config=new a.Config(e),this.keywordHandler=new l.KeywordHandler(this.keywordsStack)}lineByLine(){for(const e of this.config){let t=!1;w.test(e)&&(t=!f.test(e)&&!h.test(e)),this.foundKeyword=d.TextRange.parse(e,this.config.currentLineNumber,t),this.isNotKeywordEnd("script")||this.isNotKeywordEnd("var")||this.isNotKeywordEnd("sql")||(this.isNotKeywordEnd("csv")&&this.validateCsv(),this.eachLine(),void 0!==this.foundKeyword&&(/\b(if|for|csv)\b/i.test(this.foundKeyword.text)&&this.keywordsStack.push(this.foundKeyword),this.switchKeyword()))}this.checkAliases(),this.diagnosticForLeftKeywords(),this.checkRequredSettingsForSection(),this.checkUrlPlaceholders(),this.setSectionToStackAndTree(null);let e=r.ConfigTreeValidator.validate(this.configTree);return e=[...e.reduce((e,t)=>e.has(t.range)?e:e.set(t.range,t),new Map).values()],this.result.push(...e),this.result.concat(this.keywordHandler.diagnostics)}isNotKeywordEnd(e){return this.areWeIn(e)&&(void 0===this.foundKeyword||this.foundKeyword.text!==`end${e}`)}addCurrentToParentSettings(){if(void 0!==this.currentSection)for(const e of this.currentSettings)this.addToParentsSettings(this.currentSection.text,e)}addSettingValue(e){if(null==this.match)throw new Error("Trying to add new entry to settingValues map and sectionStack based on undefined");const t=m.Setting.clearValue(this.match[3]);e.value=t,this.settingValues.set(e.name,t)}addToSettingArray(e,t){const n=void 0===t?[]:t;if(null==this.match)return n;const[,i,a]=this.match;if(void 0===e)return n;const s=n.find(t=>t.name===e.name);if(void 0!==s){const t=this.createRange(i.length,a.length);this.result.push(g.repetitionDiagnostic(t,s,e))}else n.push(e);return n}addToParentsSettings(e,t){let n=this.parentSettings.get(e);void 0===n?n=[t]:n.push(t),this.parentSettings.set(e,n)}addToStringArray(e){const t=e;if(null==this.match)return t;const[,n,i]=this.match;return e.includes(i)?this.result.push(g.createDiagnostic(this.createRange(n.length,i.length),`${i} is already defined`)):t.push(i),t}addToStringMap(e,t){if(null==this.match)return e;const[,n,i]=this.match;if(g.isInMap(i,e)){const e=this.match.index+n.length;this.result.push(g.createDiagnostic(this.createRange(e,i.length),`${i} is already defined`))}else{let n=e.get(t);void 0===n?n=[i]:n.push(i),e.set(t,n)}return e}areWeIn(e){return this.keywordsStack.some(t=>t.text===e)}checkAliases(){this.deAliases.forEach(e=>{this.aliases.includes(e.text)||this.result.push(g.createDiagnostic(e.range,c.unknownToken(e.text)))})}checkEnd(e){if(void 0===this.foundKeyword)return;const t=this.getLastKeyword();if(t!==e)if(this.areWeIn(e)){const n=this.keywordsStack.findIndex(t=>t.text===e);this.keywordsStack.splice(n,1),this.result.push(g.createDiagnostic(this.foundKeyword.range,`${e} has finished before ${t}`))}else this.result.push(g.createDiagnostic(this.foundKeyword.range,c.noMatching(this.foundKeyword.text,e)));else this.keywordsStack.pop()}checkExcludes(e){if(null==this.match)return;const[,t,n]=this.match;for(const i of this.currentSettings)if(e.excludes.includes(i.displayName)){const a=this.createRange(t.length,n.length);this.result.push(g.createDiagnostic(a,`${e.displayName} can not be specified simultaneously with ${i.displayName}`))}}checkFreemarker(){const e=this.config.getCurrentLine();this.match=/<\/?#.*?\/?>/.exec(e),null!==this.match&&(this.result.push(g.createDiagnostic(this.createRange(this.match.index,this.match[0].length),"Freemarker expressions are deprecated.\nUse a native collection: list, csv table, var object.\nMigration examples are available at https://github.com/axibase/charts/blob/master/syntax/freemarker.md",i.DiagnosticSeverity.Information)),this.match=/(as\s*(\S+)>)/.exec(e),this.match&&this.addToStringArray(this.aliases))}checkRequredSettingsForSection(){if(void 0===this.currentSection)return;this.previousSection&&/tag/i.test(this.currentSection.text)&&(this.currentSettings=this.previousSettings,this.currentSection=this.previousSection);const e=(new p.ResourcesProvider).settingsMap,t=p.ResourcesProvider.getRequiredSectionSettingsMap(e).get(this.currentSection.text);if(!t)return;const n=t.settings;void 0!==n&&(this.requiredSettings=n.concat(this.requiredSettings));const i=[];e:for(const e of this.requiredSettings){const t=e[0].displayName;if("metric"===t){const e=this.settingValues.get("columnmetric"),t=this.settingValues.get("columnvalue");if("null"===e&&"null"===t)continue;const n=this.settingValues.get("changefield");if(/metric/.test(n))continue}const n=e.map(e=>e.name);if(!g.isAnyInArray(n,this.currentSettings.map(e=>e.name))){for(const e of this.parentSettings.values())if(g.isAnyInArray(n,e.map(e=>e.name)))continue e;if(this.ifSettings.size>0){for(const e of this.ifSettings.values())if(!g.isAnyInArray(n,e.map(e=>e.name))){i.push(t);continue e}const e=this.currentSection.range.end.line,a=parseInt(this.lastCondition.match(/^\d+/)[0],10);if(this.areWeIn("if")||e<this.lastEndIf&&e>a)continue;let s=0,r=0;for(const e of this.ifSettings.keys())/\bif\b/.test(e)?s++:/\belse\b/.test(e)&&r++;if(s===r)continue}i.push(t)}}for(const e of i)this.result.push(g.createDiagnostic(this.currentSection.range,`${e} is required`));this.requiredSettings.splice(0,this.requiredSettings.length)}checkRepetition(e){if(null==this.match)return;const[,t,n]=this.match,i=this.createRange(t.length,n.length);if(this.areWeIn("if")){if(void 0===this.lastCondition)throw new Error("We are in if, but last condition is undefined");let t=this.ifSettings.get(this.lastCondition);t=this.addToSettingArray(e,t),this.ifSettings.set(this.lastCondition,t);const n=this.currentSettings.find(t=>t.name===e.name);if(void 0!==n)return void this.result.push(g.repetitionDiagnostic(i,n,e))}else this.addToSettingArray(e,this.currentSettings);this.sectionStack.insertCurrentSetting(e)}diagnosticForLeftKeywords(){for(const e of this.keywordsStack)e.canBeUnclosed||this.result.push(g.createDiagnostic(e.range,c.noMatching(e.text,`end${e.text}`)))}eachLine(){this.checkFreemarker();const e=this.config.getCurrentLine();this.match=/(^[\t ]*\[)(\w+)\][\t ]*/.exec(e),null!==this.match||0===e.trim().length&&void 0!==this.currentSection&&"tags"===this.currentSection.text?(null!==this.match&&this.spellingCheck(),this.handleSection()):(this.match=/(^\s*)([a-z].*?[a-z])\s*=\s*(.*?)\s*$/.exec(e),null!==this.match&&(this.checkSettingsWhitespaces(),this.handleSettings(),this.areWeIn("for")&&this.validateFor()),this.match=/(^\s*\[)(\w+)\s*$/.exec(e),null!==this.match&&this.result.push(g.createDiagnostic(this.createRange(this.match[1].length,this.match[2].length),"Section tag is unclosed")))}findDeAliases(){const e=this.config.getCurrentLine(),t=/value\((['"])(\S+?)\1\)/g;let n,i;for(this.match=t.exec(e);null!==this.match;)i=this.match[2],(n=/(\$\{(\S+)\})/.exec(i))&&(i=n[2]),this.deAliases.push(new d.TextRange(i,this.createRange(e.indexOf(i),i.length))),this.match=t.exec(e)}getLastKeyword(){if(0!==this.keywordsStack.length)return this.keywordsStack[this.keywordsStack.length-1].text}getSettingCheck(){if(null==this.match)return;const e=this.match[2];let t=this.getSetting(e);if(void 0!==t)return t=t.applyScope({section:this.currentSection?this.currentSection.text.trim():"",widget:this.currentWidget||""});{if(/column-/.test(e))return;if(d.TextRange.KEYWORD_REGEXP.test(e))return;if(void 0!==this.currentSection&&("placeholders"===this.currentSection.text||"properties"===this.currentSection.text))return t=new m.Setting(new o.DefaultSetting),Object.assign(t,{name:e,section:this.currentSection.text}),t;const n=c.unknownToken(e);this.result.push(g.createDiagnostic(this.createRange(this.match[1].length,e.length),n))}}handleCsv(){const e=this.config.getCurrentLine();let t=null;if(f.exec(e)){let e=this.config.currentLineNumber+1;for(t=this.config.getLine(e);null!==t&&b.test(t);)t=this.config.getLine(++e)}else{let n=h.exec(e)||v.exec(e);null!==n?(this.match=n,t=e.substring(this.match.index+1)):this.result.push(g.createDiagnostic(this.foundKeyword.range,c.getCsvErrorMessage(e)))}this.addToStringMap(this.variables,"csvNames"),this.csvColumns=null===t?0:g.countCsvColumns(t)}handleElse(){if(void 0===this.foundKeyword)throw new Error(`We're trying to handle 'else ', but foundKeyword is ${this.foundKeyword}`);let e;this.setLastCondition(),this.areWeIn("if")?"if"!==this.getLastKeyword()&&(e=`${this.foundKeyword.text} has started before ${this.getLastKeyword()} has finished`):e=c.noMatching(this.foundKeyword.text,"if"),void 0!==e&&this.result.push(g.createDiagnostic(this.foundKeyword.range,e))}handleEndFor(){let e=this.variables.get("forVariables");void 0===e?e=[]:e.pop(),this.variables.set("forVariables",e)}handleFor(){const e=this.config.getCurrentLine();if(this.match=/(^\s*for\s+)(\w+)\s+in\s*/m.exec(e),null!=this.match){const t=e.substring(this.match[0].length).trim();if(""!==t){const n=[/^Object\.keys\((\w+)(?:\.\w+)*\)$/i,/^(\w+)\.values\((["'])\w+\2\)$/i,/^(\w+)(\[\d+\])*$/i];let i;for(const e of n){const n=e.exec(t);if(i=n?n[1]:null)break}if(i){if(!g.isInMap(i,this.variables)){const t=c.unknownToken(i),n=e.lastIndexOf(i);this.result.push(g.createDiagnostic(this.createRange(n,i.length),t))}}else try{Function(`return ${t}`)}catch(n){const i=e.indexOf(t);this.result.push(g.createDiagnostic(this.createRange(i,t.length),"Incorrect collection declaration."))}}else{const e=this.match[0].indexOf("in");this.result.push(g.createDiagnostic(this.createRange(e,"in".length),"Empty 'in' statement"))}this.addToStringMap(this.variables,"forVariables")}}handleList(){if(void 0===this.foundKeyword)throw new Error("We're trying to handle 'list', but foundKeyword is undefined");const e=this.config.getCurrentLine();if(this.match=/(^\s*list\s+)(\w+)\s*=/.exec(e),this.addToStringMap(this.variables,"listNames"),/(=|,)[ \t]*$/m.test(e))this.keywordsStack.push(this.foundKeyword);else{let e=this.config.currentLineNumber+1,t=this.config.getLine(e);for(;null!==t&&/^[ \t]*$/m.test(t);)t=this.config.getLine(++e);null!==t&&(/^[ \t]*,/.test(t)||/\bendlist\b/.test(t))&&this.keywordsStack.push(this.foundKeyword)}}handleSection(){if(null==this.match)return void(void 0!==this.previousSection&&(this.currentSection=this.previousSection,this.currentSettings=this.previousSettings));const[,e,t]=this.match;this.currentSection&&/tag/i.test(t)||(this.checkRequredSettingsForSection(),this.addCurrentToParentSettings(),/widget/i.test(t)&&(this.checkAliases(),this.deAliases.splice(0,this.deAliases.length),this.aliases.splice(0,this.aliases.length),this.settingValues.clear()),this.checkUrlPlaceholders(),this.ifSettings.clear()),this.previousSettings=this.currentSettings.splice(0,this.currentSettings.length),this.previousSection=this.currentSection,this.currentSection=new d.TextRange(t,this.createRange(e.length,t.length)),this.parentSettings.delete(this.currentSection.text),this.setSectionToStackAndTree(this.currentSection)}setSectionToStackAndTree(e){let t;const n=this.sectionStack.getLastSection();n&&this.configTree.addSection(n.range,n.settings),(t=null==e?this.sectionStack.finalize():this.sectionStack.insertSection(this.currentSection))&&this.result.push(t)}handleSettings(){if(null==this.match)return;const e=this.config.getCurrentLine();if(void 0!==this.currentSection&&/(?:tag|key)s?/.test(this.currentSection.text)){if(/(?:tag|key)s?/.test(this.currentSection.text)&&/(^[ \t]*)([a-z].*?[a-z])[ \t]*=/.test(e)){if(this.match=/(^[ \t]*)([a-z].*?[a-z])[ \t]*=/.exec(e),null===this.match)return;const[,t,n]=this.match,a=this.getSetting(n);this.isAllowedWidget(a)&&this.result.push(g.createDiagnostic(this.createRange(t.length,n.length),c.settingNameInTags(n),i.DiagnosticSeverity.Information))}}else this.handleRegularSetting()}isAllowedWidget(e){return void 0!==e&&"tag"!==this.currentSection.text&&(null==e.widget||void 0===this.currentWidget||e.widget===this.currentWidget)}isAllowedInSection(e){if(null==e.section||null==this.currentSection)return!0;const t=p.ResourcesProvider.sectionDepthMap[this.currentSection.text];if("mode"===e.name){if(null==this.currentWidget)return!0;if("chart"===this.currentWidget)return"column-stack"===e.value?t<=p.ResourcesProvider.sectionDepthMap.widget:t<=p.ResourcesProvider.sectionDepthMap.series}if(Array.isArray(e.section))return e.section.some(e=>t<=p.ResourcesProvider.sectionDepthMap[e]);{const n=p.ResourcesProvider.sectionDepthMap[e.section];return t<=n}}handleRegularSetting(){const e=this.config.getCurrentLine(),t=this.getSettingCheck();if(void 0!==t){if(this.addSettingValue(t),t.deprecated&&this.result.push(g.createDiagnostic(t.textRange,t.deprecated,i.DiagnosticSeverity.Warning)),this.isAllowedInSection(t)||this.result.push(g.createDiagnostic(t.textRange,c.illegalSetting(t.displayName),i.DiagnosticSeverity.Error)),"type"===t.name){this.currentWidget=this.match[3];let e=p.ResourcesProvider.widgetRequirementsByType.get(this.currentWidget);e&&e.sections&&this.sectionStack.setSectionRequirements("widget",e.sections)}t.multiLine?(this.currentSettings.push(t),this.sectionStack.insertCurrentSetting(t)):this.checkRepetition(t),this.currentSection&&["placeholders","properties","property"].includes(this.currentSection.text)||(this.typeCheck(t),this.checkExcludes(t),"alias"===t.name&&(this.match=/(^\s*alias\s*=\s*)(\S+)\s*$/m.exec(e),this.addToStringArray(this.aliases)),this.findDeAliases())}}checkSettingsWhitespaces(){const e=this.config.getCurrentLine(),t=/(^\s*)((\w+\s+)+\w+)\s*=\s*(.+?)\s*$/.exec(e);if(null!=t&&t[2]){const n=t[2];if(n&&!this.foundKeyword&&/^\w+(\s.*\w)+$/.test(n)){const t=e.indexOf(n),a=this.createRange(t,n.length);"tags"===this.currentSection.text?/^["].+["]$/.test(n)||this.result.push(g.createDiagnostic(a,c.tagNameWithWhitespaces(n),i.DiagnosticSeverity.Warning)):"properties"!==this.currentSection.text&&this.result.push(g.createDiagnostic(a,c.settingsWithWhitespaces(n),i.DiagnosticSeverity.Warning))}}}setLastCondition(){this.lastCondition=`${this.config.currentLineNumber}${this.config.getCurrentLine()}`}spellingCheck(){if(null==this.match)return;const e=this.match[1].length,t=this.match[2],n=this.createRange(e,t.length);"tag"===t&&this.result.push(g.createDiagnostic(n,c.deprecatedTagSection,i.DiagnosticSeverity.Warning))}switchKeyword(){if(void 0===this.foundKeyword)throw new Error("We're trying to handle a keyword, but foundKeyword is undefined");const e=this.config.getCurrentLine();switch(this.foundKeyword.text){case"endfor":this.handleEndFor();case"endif":this.lastEndIf=this.config.currentLineNumber;case"endvar":case"endcsv":case"endlist":case"endsql":case"endscript":{const e=this.foundKeyword.text.substring("end".length);this.checkEnd(e);break}case"else":case"elseif":this.handleElse();break;case"csv":this.handleCsv();break;case"var":{const t=e.match(/((\s*[\[\{\(]\s*)+)/g),n=e.match(/((\s*[\]\}\)]\s*)+)/g);t&&(n&&t.map(e=>e.trim()).join("").length!==n.map(e=>e.trim()).join("").length||null===n)&&this.keywordsStack.push(this.foundKeyword),this.match=/(var\s*)(\w+)\s*=/.exec(e),this.addToStringMap(this.variables,"varNames");break}case"list":this.handleList();break;case"for":this.handleFor();break;case"if":/!=|==/.test(e)||this.result.push(g.createDiagnostic(this.foundKeyword.range,"Specify == or !=")),this.setLastCondition();break;case"script":this.keywordHandler.handleScript(e,this.foundKeyword);break;case"sql":this.keywordHandler.handleSql(e,this.foundKeyword);break;case"import":break;default:throw new Error(`${this.foundKeyword.text} is not handled`)}}typeCheck(e){if(null==this.match)return;const t=this.createRange(this.match[1].length,this.match[2].length),n=e.checkType(t);null!=n&&this.result.push(n)}validateCsv(){const e=this.config.getCurrentLine(),t=g.countCsvColumns(e);t===this.csvColumns||/^[ \t]*$/m.test(e)||this.result.push(g.createDiagnostic(this.createRange(0,e.length),`Expected ${this.csvColumns} columns, but found ${t}`))}validateFor(){const e=this.config.getCurrentLine(),t=/@{.+?}/g;for(this.match=t.exec(e);null!==this.match;){const n=this.match[0],i=this.match.index,a=/[a-zA-Z_]\w*(?!\w*["\('])/g;for(this.match=a.exec(n);null!==this.match;){if("."===n.charAt(this.match.index-1)){this.match=a.exec(n);continue}const e=this.match[0];if(!g.isInMap(e,this.variables)){const t=i+this.match.index,n=c.unknownToken(e);this.result.push(g.createDiagnostic(this.createRange(t,e.length),n))}this.match=a.exec(n)}this.match=t.exec(e)}}getSetting(e){const t=this.config.getCurrentLine().indexOf(e),n=t>-1?this.createRange(t,e.length):void 0;return g.getSetting(e,n)}checkUrlPlaceholders(){let e=this.getUrlPlaceholders();e.length>0&&this.currentSection&&this.currentSection.text.match(/widget/i)&&this.sectionStack.requireSections("widget","placeholders");let t=this.sectionStack.getSectionRange("placeholders");if(t){let n=this.sectionStack.getSectionSettings("placeholders",!1),a=e.filter(e=>{const t=m.Setting.clearValue(e);return null==n.find(e=>e.name===t)});a.length>0&&this.result.push(g.createDiagnostic(t.range,`Missing placeholders: ${a.join(", ")}.`,i.DiagnosticSeverity.Error));let s=n.filter(t=>!e.includes(t.name)).map(e=>e.name);s.length>0&&this.result.push(g.createDiagnostic(t.range,`Unnecessary placeholders: ${s.join(", ")}.`,i.DiagnosticSeverity.Warning))}}getUrlPlaceholders(){let e=new Set;for(let t of y){let n=this.sectionStack.getCurrentSetting(t);if(n){const t=/{(.+?)}/g;let i=t.exec(n.value);for(;null!==i;){const a=m.Setting.clearSetting(i[1]);e.add(a),i=t.exec(n.value)}}}return[...e]}createRange(e,t){return g.createRange(e,t,this.config.currentLineNumber)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);class a{constructor(e,t,n=!1){this.priority=1,this.range=t,this.text=e,this.canBeUnclosed=n}static isCloseAble(e){return/^[\s\t]*(?:for|if|list|sql|var|script[\s\t]*$|csv|else|elseif)\b/.test(e)}static isClosing(e){return/^[\s\t]*(?:end(?:for|if|list|var|script|sql|csv)|elseif|else)\b/.test(e)}static parse(e,t,n){const s=a.KEYWORD_REGEXP.exec(e);if(null===s)return;const[,r,o]=s;return new a(o,i.createRange(r.length,o.length,t),n)}set textPriority(e){this.priority=e}}a.KEYWORD_REGEXP=/^([ \t]*)(import|endvar|endcsv|endfor|elseif|endif|endscript|endlist|endsql|script|else|if|list|sql|for|csv|var)\b/i,t.TextRange=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);t.ResourcesProviderWeb=class extends i.ResourcesProvider{static readSettings(){return n(30).settings}static readDescriptions(){const e=n(31).default,t=new Map,i=/\#\# ([a-z]+?)  \n  \n([^\s#][\S\s]+?)  (?=\n  (?:\n(?=\#)|$))/g;let a=i.exec(e);for(;null!==a;){const[,n,s]=a;t.set(n,s),a=i.exec(e)}return t}constructor(){super()}}},function(e,t,n){"use strict";n.r(t);var i=n(6);n.d(t,"CompletionProvider",function(){return i.CompletionProvider});var a=n(10);n.d(t,"Validator",function(){return a.Validator});var s=n(12);n.d(t,"ResourcesProviderWeb",function(){return s.ResourcesProviderWeb})},function(e){e.exports={configuration:{prefix:"configuration",body:["[configuration]","  offset-right = ${1:50}","  height-units = ${2:2}","  width-units = ${3:2}","","  [group]","","    ${0}"],description:"Initial configuration"},csv:{prefix:"csv",body:["csv ${1:cities} = ${2:name, region}","  ${3:Sunnyvale, CA}","  ${4:Cupertino, CA}","endcsv","","for ${5:city} in ${1:cities}","  entity = ${6:@{city.name}}","endfor","${0}"],description:"Csv and corresponding for"},"chart-basic":{prefix:"chart-basic",body:["[widget]","  type = chart","  title = ${1:basic chart}","  timespan = ${2:1 day}","  max-range = ${3:100}","","  [series]","    ${0}"],description:"Basic chart"},bar:{prefix:"bar",body:["[widget]","  type = bar","  title = ${1:bar}","  timespan = ${2:1 day}","","  [column]","","    [series]","      entity = ${3:entity-1}","      metric = ${4:metric-1}","      ${0}"],description:"Bar"},"bar-horizontal":{prefix:"bar-horizontal",body:["[widget]","  type = bar","  title = ${1:Horizontal bar}","  horizontal = true","  timespan = ${2:1 day}","","  [column]","","    [series]","      entity = ${3:entity-1}","      metric = ${4:metric-1}","      ${0}"],description:"Horizontal bar"},box:{prefix:"box",body:["[widget]","  type = box","  title = ${1:Box}","  timespan = ${2:1 day}","  autoscale = ${3:false}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    format = ${6:kilobytes}","    axis = ${7:right}","    ${0}"],description:"Box"},calendar:{prefix:"calendar",body:["[widget]","  type = calendar","  title = ${1:Calendar}","  timespan = ${2:1 day}","  summarize-period = ${3:10 minute}","  color-range = ${4:blue}","","  [series]","    entity = ${5:entity-1}","    metric = ${6:metric-1}","    ${0}"],description:"Calendar"},"calendar-thresholds":{prefix:"calendar-thresholds",body:["[widget]","  type = calendar","  title = ${1:Calendar}","  timespan = ${2:1 day}","  summarize-period = ${3:10 minute}","","  color-range = ${4:red}","  thresholds = ${5:10, 20, 30, 40, 50, 60, 70, 80, 90, 100}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    statistic = ${8:percentile_95}","    period = ${9:10 minute}","    ${0}"],description:"Calendar with thresholds"},chart:{prefix:"chart",body:["[widget]","  type = chart","  title = ${1:Chart}","  timespan = ${2:1 day}","  step-line = ${3:false}","  min-range = ${4:0}","  max-range = ${5:100}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    statistic = ${8:avg}","    period = ${9:10 minute}","    ${0}"],description:"Chart"},"chart-alert":{prefix:"chart-alert",body:["[widget]","  type = chart","  title = ${1:Alert chart}","  timespan = ${2:1 day}","  max-range = ${3:100}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    alert-expression = ${6:value > 5}","    alert-style = ${7:stroke: red}","    ${0}"],description:"Alert chart "},"chart-column":{prefix:"chart-column",body:["[widget]","  type = chart","  title = ${1:Column chart}","  timespan = ${2:1 day}","  max-range = ${3:100}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    statistic = ${6:percentile_75}","    period = ${7:10 minute}","    mode = column","    ${0}"],description:"Column chart"},"chart-combo":{prefix:"chart-combo",body:["[widget]","  type = chart","  title = ${1:Combo chart}","  timespan = ${2:1 day}","  max-range = ${3:100}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    mode = ${6:column}","    statistic = ${7:percentile_75}","    period = ${8:10 minute}","    color = ${9:green}","    ${0}"],description:"Combo chart"},"chart-computed":{prefix:"chart-computed",body:["[widget]","  type = chart","  title = ${1:Computed chart}","  timespan = ${2:1 day}","  max-range = ${3:100}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    display = false","    alias = ${6:free}","","  [series]","    entity = ${4:entity-1}","    metric = ${7:metric-2}","    display = false","    alias = ${8:total}","","  [series]","    label = ${9:Memory Used, %}","    value = ${10:(1 - value('${6:free}') / value('${8:total}')) * 100}","    markers = ${11:false}","    ${0}"],description:"Computed chart"},"chart-dual-axis":{prefix:"chart-dual-axis",body:["[widget]","  type = chart","  title = ${1:Dual axis chart}","  timespan = ${2:1 day}","  step-line = ${3:false}","  min-range = ${4:0}","  max-range = ${5:100}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    statistic = ${8:avg}","    period = ${9:10 minute}","","  [series]","    entity = ${6:entity-1}","    metric = ${10:metric-2}","    axis = right","    format = ${11:kilobytes}","    markers = false","    ${0}"],description:"Dual axis chart"},"chart-range":{prefix:"chart-range",body:["[widget]","  type = chart","  title = ${1:Range chart}","  mode = range","  timespan = ${2:1 day}","  step-line = ${3:false}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    statistic = ${6:percentile_75}","    period = ${7:10 minute}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    statistic = ${8:percentile_25}","    period = ${7:10 minute}","    ${0}"],description:"Range chart"},"chart-stack":{prefix:"chart-stack",body:["[widget]","  type = chart","  title = ${1:Stack chart}","  mode = stack","  stepline = ${2:true}","  timespan = ${3:1 day}","  max-range = ${4:100}","","  [series]","    entity = ${5:entity-1}","    metric = ${6:metric-1}","    statistic = ${7:avg}","    ${0}"],description:"Stack chart"},"alert-console":{prefix:"alert-console",body:["[widget]","  type = console","  title = ${1:Alert console}","","  severity-style = ${2:row}","","  [column]","    key = ${3:time}","    ${0}"],description:"Alert console"},"message-console":{prefix:"message-console",body:["[widget]","  type = console","  title = ${1:Message console}","  source = message","  entity = ${2:entity-1}","    ${0}"],description:"Message console"},gauge:{prefix:"gauge",body:["[widget]","  type = gauge","  title = ${1:Gauge}","  thresholds = ${2:0, 60, 80, 100}","  width-units = ${3:0.3}","  height-units = ${4:0.3}","","  [series]","    entity = ${5:entity-1}","    metric = ${6:metric-1}","    ${0}"],description:"Gauge"},graph:{prefix:"graph",body:["[widget]","  type = graph","  title = ${1:Graph}","  node-connect = ${2:false}","  node-labels = ${3:true}","  link-data = ${4:true}","  timespan = ${5:1 day}","  endtime = ${6:2015-03-14}","","  node-radius = ${7:20}","","  node-thresholds = ${8:-10, -5, 0, 5, 10}","  node-colors = ${9:red, orange, whitesmoke, limegreen, green}","","  link-thresholds = ${10:20000, 40000, 70000, 80000}","  link-widths = ${11:1, 2, 3, 8, 10}","","  [node]","    id = ${12:entity-1}","  [node]","    id = ${13:entity-2}","  [node]","    id = ${14:entity-3}","","    [link]","      nodes = ${12:entity-1} - ${13:entity-2}","    [link]","      nodes = ${12:entity-1} - ${14:entity-3}","    [link]","      nodes = ${13:entity-2} - ${14:entity-3}","","      [series]","        entity = ${12:entity-1}","        metric = ${15:metric-1}","        links = ${12:entity-1} - ${13:entity-2}","        [tags]","          ${16:airport_2_name} = ${13:entity-2}","","      [series]","        entity = ${12:entity-1}","        metric = ${15:metric-1}","        links = ${12:entity-1} - ${14:entity-3}","        [tags]","          ${16:airport_2_name} = ${14:entity-3}","","      [series]","        entity = ${13:entity-2}","        metric = ${15:metric-1}","        links = ${13:entity-2} - ${14:entity-3}","        [tags]","          ${16:airport_2_name} = ${14:entity-3}","","      [series]","        entity = ${12:entity-1}","        metric = ${17:metric-2}","        nodes = ${12:entity-1}","","      [series]","        entity = ${14:entity-2}","        metric = ${17:metric-2}","        nodes = ${14:entity-3}","","      [series]","        entity = ${13:entity-2}","        metric = ${17:metric-2}","        nodes = ${13:entity-2}","        ${0}"],description:"Graph"},pie:{prefix:"pie",body:["[widget]","  type = pie","  title = ${1:Pie}","","  [series]","    entity = ${2:entity-1}","    metric = ${3:metric-1}","    ${0}"],description:"Pie"},property:{prefix:"property",body:["[widget]","  type = property","  title = ${1:Property}","  width-units = ${2:0.6}","  class = ${3:terminal}","  timespan = ${4:1 day}","  sort = ${5:command}","  update-interval = ${6:10 second}","","  [column]","    key = ${7:pid}","    label = ${8:PID}","    format = ${9:####}","","  [property]","    type = ${10:process}","    entity = ${11:entity-1}","    ${0}"],description:"Property"},"chart-table":{prefix:"table",body:["[widget]","  type = table","  title = ${1:CPU Usage}","  width-units = ${2:0.3}","","  alert-expression = ${3:value > 5}","  alert-style = ${4:background-color: orange}","","  sort = ${5:value desc}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    ${0}"],description:"Table"},"table-grid":{prefix:"table-grid",body:["[widget]","  type = table","  title = ${2:Table grid}","  last = ${3:true}","","  width-units = ${3:0.5}","","  merge-columns = ${4:entity}","  sort = ${5:metric-1 order(asc/desc)}","","  [column]","    key = ${6:metric-1}","    label = ${7:Metric, measure units}","","  [series]","    entity = ${8:entity-1}","    metric = ${6:metric-1}","    ${0}"],description:"Grid table"},text:{prefix:"text",body:["[widget]","  type = text","  title = ${1:Text}","  width-units = ${2:0.2}","  height-units = ${3:0.2}","  alert-expression = ${4:value > 1}","  alert-style = ${5:color: red}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    ${0}"],description:"Text"},treemap:{prefix:"treemap",body:["[widget]","  type = treemap","  title = ${1:Treemap}","  thresholds = ${2:0, 10, 60, 80, 100}","  timespan = ${3:1 day}","","  [series]","    entity = ${4:entity-1}","    metric = ${5:metric-1}","    size = ${6:1}","    ${0}"],description:"Treemap"},histogram:{prefix:"histogram",body:["[widget]","  type = histogram","  title = ${1:Treemap}","  right-axis = ${2:density}","  top-axis = ${3:percentiles}","  mode = ${4:stack}","  percentiles = ${5:1, 25, 50, 75, 90, 99.9}","","  horizontal-grid = ${2:density}","","  [series]","    entity = ${6:entity-1}","    metric = ${7:metric-1}","    ${0}"],description:"Histogram"},"portal: 3x2":{prefix:"portal: 3x2",body:["[configuration]","  offset-right = ${1:50}","  width-units = ${2:3}","  height-units = ${3:2}","","  timespan = ${4:1 day}","","  [group]","","    [widget]","      type = ${5:chart}","      [series]","        entity = ${6:entity-1}","        metric = ${7:metric-1}","","    [widget]","      type = ${8:chart}","      [series]","        entity = ${9:entity-2}","        metric = ${10:metric-2}","","    [widget]","      type = ${11:chart}","      [series]","        entity = ${12:entity-3}","        metric = ${13:metric-3}","","  [group]","    [widget]","      type = ${14:chart}","      [series]","        entity = ${15:entity-4}","        metric = ${16:metric-4}","","    [widget]","      type = ${17:chart}","      [series]","        entity = ${18:entity-5}","        metric = ${19:metric-5}","","    [widget]","      type = ${20:chart}","      [series]","        entity = ${21:entity-6}","        metric = ${22:metric-6}","        ${0}"],description:"Portal 3x2"},"series with tags":{prefix:"series with tags",body:["[series]","  entity = ${1:entity-1}","  metric = ${2:metric-1}","  [tags]","    ${3:tag} = ${4:value}","    ${0}"],description:"Series section with child tags section"},"detail series":{prefix:"series detail",body:["[series]","  entity = ${1:entity-1}","  metric = ${2:metric-1}","  ${0}"],description:"Series section with entity and metric settings"},"averaged series":{prefix:"series averaged",body:["[series]","  entity = ${1:entity-1}","  metric = ${2:metric-1}","  statistics = ${3:avg}","  period = ${4:10 minute}","  ${0}"],description:"Detail series section with average aggregation"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.Config=class{constructor(e){this.currentLineNumber=-1,this.lines=i.deleteComments(e).toLowerCase().split("\n")}getCurrentLine(){return this.currentLine}getLine(e){return e<this.lines.length&&e>=0?this.lines[e]:null}*[Symbol.iterator](){for(let e of this.lines)this.currentLine=e,this.currentLineNumber++,yield e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),a=n(17);t.ConfigTree=class{get getRoot(){return this.root}addSection(e,t){const n=new a.Section(e,t),s=i.ResourcesProvider.sectionDepthMap[e.text];if(!(s>0)||this.root){switch(s){case 0:this.root=n,this.lastAddedParent=n;break;case 1:n.parent=this.root,this.lastAddedParent=n;break;case 2:{const e=this.root.children[this.root.children.length-1];if(!e)return;n.parent=e,this.lastAddedParent=n;break}case 3:if(this.lastAddedParent&&"column"===this.lastAddedParent.name&&"series"===e.text)n.parent=this.lastAddedParent;else{const e=this.root.children[this.root.children.length-1];if(!e)return;const t=e.children[e.children.length-1];if(!t)return;n.parent=t,this.lastAddedParent=n}break;case 4:if(i.ResourcesProvider.isNestedToPrevious(e.text,this.previous.name)?n.parent=this.previous:n.parent=this.lastAddedParent,!n.parent)return}n.parent&&n.parent.children.push(n),this.previous=n,n.applyScope()}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);t.Section=class{constructor(e,t){this.children=[],this.scope={},this.range=e,this.name=e.text,this.settings=t}applyScope(){void 0!==this.parent&&(this.scope=Object.create(this.parent.scope));for(const e of this.settings)"type"===e.name?this.scope.widgetType=e.value:"mode"===e.name&&(this.scope.mode=e.value)}getSetting(e){const t=i.Setting.clearSetting(e);return this.settings.find(e=>e.name===t)}getSettingFromTree(e){let t=this;for(;t;){const n=t.getSetting(e);if(void 0!==n)return n;t=t.parent}}getScopeValue(e){return"type"===e?this.scope.widgetType:this.scope.mode}matchesConditions(e){const t=this;if(void 0===e)return!0;for(const n of e)if(!n(t))return!1;return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(19);t.ConfigTreeValidator=class{static validate(e){const t=new a(e),n=[];return i.default.forEach((e,i)=>{const a=t.getSectionsByName(i);a.length>0&&a.forEach(t=>{e.forEach(e=>{const i=e.check(t);i&&(Array.isArray(i)?n.push(...i):n.push(i))})})}),n}};class a{constructor(e){this.requestedSections=[],this.tree=e}getSectionsByName(e){return this.tree.getRoot&&this.walk(e,this.tree.getRoot),this.requestedSections}walk(e,t){for(let n of t.children)n.name===e?this.requestedSections.push(n):this.walk(e,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(20),a=n(23),s=n(24),r=n(25),o=n(26),l=n(27),c=new Map([["series",[s.default,o.default,r.default,a.default,i.noUselessSettingsForSeries]],["widget",[l.default,i.noUselessSettingsForWidget]]]);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(3),s=n(0),r=n(21),o=n(22);function l(e){return t=>{const n=[];return e.forEach((e,r)=>{const o=t.getSettingFromTree(r);if(void 0===o)return;const l=e.map(e=>e(t)).filter(e=>e);l.length>0&&n.push(s.createDiagnostic(o.textRange,a.uselessScope(o.displayName,`${l.join(", ")}`),i.DiagnosticSeverity.Warning))}),n}}t.noUselessSettingsForWidget={check:l(o.default),name:"Checks absence of useless settings in [widget]"},t.noUselessSettingsForSeries={check:l(r.default),name:"Checks absence of useless settings in [series]"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),a=new Map([["forecast-arima-auto-regression-interval",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-arima-auto",["false"])]],["forecast-arima-d",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-arima-auto",["false"])]],["forecast-arima-p",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-arima-auto",["false"])]],["forecast-hw-alpha",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-hw-auto",["false"])]],["forecast-hw-beta",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-hw-auto",["false"])]],["forecast-hw-gamma",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("forecast-hw-auto",["false"])]]]);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),a=new Map([["negative-style",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("mode",["column-stack","column"])]],["current-period-style",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("mode",["column-stack","column"])]],["moving-average",[i.isNotUselessIf("type",["chart"]),i.isNotUselessIf("server-aggregate",["false"])]],["ticks",[i.isNotUselessIf("type",["calendar","treemap","gauge"]),i.isNotUselessIf("mode",["half","default"])]],["color-range",[i.isNotUselessIf("type",["calendar","treemap","gauge"]),i.isNotUselessIf("mode",["half","default"])]],["gradient-count",[i.isNotUselessIf("type",["calendar","treemap","gauge"]),i.isNotUselessIf("mode",["half","default"])]]]);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),a=n(0),s=n(5),r=new Map([["colors",{conditions:[s.requiredCondition("type",["calendar","treemap","gauge"]),s.requiredCondition("mode",["half","default"])],requiredSetting:"thresholds"}],["forecast-style",{conditions:[s.requiredCondition("type",["chart"]),s.requiredCondition("mode",["column","column-stack"])],requiredSetting:"data-type"}],["forecast-horizon-start-time",{conditions:[s.requiredCondition("type",["chart"])],requiredSetting:["forecast-horizon-end-time","forecast-horizon-interval","forecast-horizon-length"]}],["table",{requiredSetting:"attribute"}],["attribute",{requiredSetting:"table"}],["column-alert-style",{conditions:[s.requiredCondition("type",["bar"])],requiredSetting:"column-alert-expression"}],["alert-style",{requiredSetting:"alert-expression"}],["link-alert-style",{conditions:[s.requiredCondition("type",["graph"])],requiredSetting:"alert-expression"}],["node-alert-style",{conditions:[s.requiredCondition("type",["graph"])],requiredSetting:"alert-expression"}],["icon-alert-style",{conditions:[s.requiredCondition("type",["pie","text"])],requiredSetting:"icon-alert-expression"}],["icon-alert-expression",{conditions:[s.requiredCondition("type",["pie"])],requiredSetting:"icon"}],["icon-color",{conditions:[s.requiredCondition("type",["text"])],requiredSetting:"icon"}],["icon-position",{conditions:[s.requiredCondition("type",["text"])],requiredSetting:"icon"}],["icon-size",{conditions:[s.requiredCondition("type",["text"])],requiredSetting:"icon"}],["caption-style",{conditions:[s.requiredCondition("type",["pie","gauge"])],requiredSetting:"caption"}]]),o={name:"Checks presence of required setting if dependent is specified",check(e){const t=[];return r.forEach((n,s)=>{if(!e.matchesConditions(n.conditions))return;if(void 0===e.getSettingFromTree(s))return;const r=n.requiredSetting;let o,l;if(Array.isArray(r)){for(const t of r)if(o=e.getSettingFromTree(t))break;l=i.noRequiredSettings(s,r)}else o=e.getSettingFromTree(r),l=i.noRequiredSetting(s,r);void 0===o&&t.push(a.createDiagnostic(e.range.range,l))}),t}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),a=n(0),s=n(5),r={name:"Checks colors is less than thresholds by 1",check(e){let t,n;if(!e.matchesConditions([s.requiredCondition("type",["calendar","treemap","gauge"]),s.requiredCondition("mode",["half","default"])]))return;const r=e.getSettingFromTree("colors");if(void 0===r)return;const o=e.getSettingFromTree("thresholds");if(void 0===o)return a.createDiagnostic(e.range.range,"thresholds is required if colors is specified");r.values.length>0?(r.values.push(r.value),t=r.values):t=(t=r.value.replace(/(\s*\d{3}\s*,?)/g,"")).split(",").filter(e=>""!==e.trim()),o.values.length>0?(o.values.push(o.value),n=o.values):n=o.value.split(",").filter(e=>""!==e.trim());const l=n.length-1;return t.length!==l?a.createDiagnostic(r.textRange,i.incorrectColors(`${t.length}`,`${l}`)):void 0}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),a={name:"Checks forecast-ssa-group-auto-count is greater than forecast-ssa-decompose-eigentriple-limit",check(e){const t=e.getSettingFromTree("forecast-ssa-group-auto-count");if(void 0===t)return;const n=e.getSettingFromTree("forecast-ssa-decompose-eigentriple-limit");return(n?n.value:i.getSetting("forecast-ssa-decompose-eigentriple-limit").defaultValue)<=t.value?i.createDiagnostic(t.textRange,"forecast-ssa-group-auto-count must be less than forecast-ssa-decompose-eigentriple-limit (default 0)"):void 0}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(0),s={name:"Checks forecast-horizon-end-time is greater than end-time",check(e){let t=e.getSettingFromTree("forecast-horizon-end-time");if(void 0===t)return;let n=e.getSettingFromTree("end-time");return void 0!==n&&n.value>=t.value?a.createDiagnostic(n.textRange,`${t.displayName} must be greater than ${n.displayName}`,i.DiagnosticSeverity.Error):void 0}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(0),s={name:"Checks start-time is greater than end-time",check(e){const t=e.getSettingFromTree("end-time"),n=e.getSettingFromTree("start-time");if(void 0!==t&&void 0!==n)return n.value>=t.value?a.createDiagnostic(t.textRange,`${t.displayName} must be greater than ${n.displayName}`,i.DiagnosticSeverity.Error):void 0}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),a=n(0),s=/^\s*sql\s*=.*$/m,r=/(^\s*)sql\s*\S/;t.BLOCK_SQL_START=/sql(?!([\s\S]*=))/,t.BLOCK_SQL_END=/^\s*endsql\s*$/;const o=/^\s*script\s*=.*$/m,l=/(^\s*)script\s*\S/;t.BLOCK_SCRIPT_START=/script(?!([\s\S]*=))/,t.BLOCK_SCRIPT_END=/^\s*endscript\s*$/;t.KeywordHandler=class{constructor(e){this.diagnostics=[],this.keywordsStack=e}handleSql(e,t){if(s.test(e))return;this.keywordsStack.push(t);const n=r.exec(e);null!==n&&this.diagnostics.push(a.createDiagnostic(a.createRange(n[1].length,"sql".length,t.range.start.line),i.lineFeedRequired("sql")))}handleScript(e,t){if(o.test(e))return;this.keywordsStack.push(t);const n=l.exec(e);null!==n&&this.diagnostics.push(a.createDiagnostic(a.createRange(n[1].length,"script".length,t.range.start.line),i.lineFeedRequired("script")))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),a=n(4),s=n(2),r=n(11),o=n(0);class l{constructor(e){this.range=e,this.dependencies=[],this.settings=[];const t=(new a.ResourcesProvider).settingsMap,n=a.ResourcesProvider.getRequiredSectionSettingsMap(t).get(this.name);n&&n.sections&&this.setRequiredSections(n.sections)}setRequiredSections(e){this.dependencies.splice(0,this.dependencies.length);for(const t of e)this.dependencies.push({resolvedCount:0,unresolved:t.slice()})}insertSetting(e){this.settings.push(e)}getSetting(e){const t=s.Setting.clearSetting(e);return this.settings.find(e=>e.name===t)}resolveDependency(e){for(const t of this.dependencies){const n=t.unresolved.indexOf(e);n>=0&&(t.resolvedCount++,t.unresolved.splice(n,1))}}get dependenciesResolved(){return 0===this.dependencies.length||this.dependencies.some(e=>0===e.unresolved.length)}get name(){return this.range.text}get unresolved(){if(0===this.dependencies.length)return[];return this.dependencies.reduce((e,t)=>t.resolvedCount>e.resolvedCount?t:t.unresolved.length<e.unresolved.length?t:e).unresolved}}const c={dependencies:[],dependenciesResolved:!0,name:"",range:new r.TextRange("",i.Range.create(i.Position.create(0,0),i.Position.create(0,0))),settings:[],unresolved:[],resolveDependency(){},setRequiredSections(){},getSetting(){},insertSetting(){},[Symbol.toStringTag]:"DummySectionStackNode"};t.SectionStack=class{constructor(){this.stack=[]}insertSection(e){const t=e.text;let[n,i]=this.checkAndGetDepth(e);if(n<this.stack.length){if(0===n)return this.createErrorDiagnostic(e,`Unexpected section [${t}].`);i=this.checkDependenciesResolved(n),this.stack.splice(n,this.stack.length-n)}for(let e=this.stack.length;e<n;e++)this.stack.push(c);for(const e of this.stack)e.resolveDependency(t);return this.stack.push(new l(e)),i}getLastSection(){return this.stack[this.stack.length-1]}finalize(){let e=this.checkDependenciesResolved(0);return this.stack=[],e}requireSections(e,...t){let n=this.stack.find(t=>t.name===e);if(n){for(let e of n.dependencies)for(let n of t)e.unresolved.includes(n)||e.unresolved.push(n);0===n.dependencies.length&&n.dependencies.push({resolvedCount:0,unresolved:t})}}setSectionRequirements(e,t){let n=this.stack.find(t=>t.name===e);n&&n.setRequiredSections(t)}insertCurrentSetting(e){this.stack.length>0&&this.stack[this.stack.length-1].insertSetting(e)}getCurrentSetting(e,t=!0){for(let n=t?this.stack.length:1;n>0;){let t=this.stack[--n].getSetting(e);if(void 0!==t)return t}}getSectionSettings(e,t=!0){let n=e?this.stack.findIndex(t=>t.name===e):this.stack.length-1,i=[];if(n>=0)for(let e=t?0:n;e<=n;e++){let t=this.stack[e];for(const e of t.settings)i.push(e)}return i}getSectionRange(e){let t=this.stack.find(t=>t.name===e);return t?t.range:null}createErrorDiagnostic(e,t){return o.createDiagnostic(e.range,t,i.DiagnosticSeverity.Error)}checkDependenciesResolved(e){const t=this.stack;for(let n=t.length;n>e;){const e=t[--n];if(!e.dependenciesResolved){let t,n=e.unresolved.map(e=>`[${e}]`);return t=n.length>1?`Required sections ${n.join(", ")} are not declared.`:`Required section ${n.join(", ")} is not declared.`,this.createErrorDiagnostic(e.range,t)}}return null}checkAndGetDepth(e){const t=e.text,n=this.stack.length;let i=a.ResourcesProvider.sectionDepthMap[t],s=null;if(null==i)s=this.createErrorDiagnostic(e,`Unknown section [${t}].`);else if(i>n)if(a.ResourcesProvider.inheritableSections.has(t)&&n>0)i=n;else{let i=`Unexpected section [${t}]. `,r=Object.entries(a.ResourcesProvider.sectionDepthMap).filter(([,e])=>e===n).map(([e])=>`[${e}]`);r.length>1?i+=`Expected one of ${r.join(", ")}.`:i+=`Expected ${r[0]}.`,s=this.createErrorDiagnostic(e,i)}return[i,s]}}},function(e){e.exports={$schema:"./dictionary.schema.json",settings:[{displayName:"add-meta",type:"boolean",section:"series",example:!0,defaultValue:!1},{displayName:"ahead-time-span",type:"string",section:"widget",widget:"chart",example:"80%"},{displayName:"alert-expression",type:"string",section:["column","widget"],example:"value > 5",script:{returnValue:"boolean",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"alert-row-style",multiLine:!0,type:"string",example:"background-color: red"},{displayName:"alert-style",multiLine:!0,type:"string",section:"series",example:"stroke: red; stroke-width: 2",script:{returnValue:"string",fields:[{name:"alert",type:"number"}]}},{displayName:"alias",type:"string",section:"series",example:"s1"},{displayName:"align",type:"enum",section:"widget",example:"END_TIME",defaultValue:"CALENDAR",enum:["END_TIME","START_TIME","CALENDAR","FIRST_VALUE_TIME"]},{displayName:"arcs",type:"boolean",section:"widget",widget:"graph",defaultValue:!0,example:!1},{displayName:"arrow-length",type:"number",section:"widget",widget:"gauge",example:"0.3, 30%",maxValue:1,minValue:0},{displayName:"arrows",type:"boolean",section:"widget",widget:"graph",defaultValue:!1,example:!0},{displayName:"attribute",section:"series",type:"string",example:"my_attribute",excludes:["metric"]},{displayName:"audio-alert",type:"string",section:"series",example:"(alert > 0.5) ? '/portal/resource/alarm.ogg' : '/portal/resource/klaxon.ogg'",script:{fields:[{name:"alert",type:"number"}],returnValue:"string"}},{displayName:"audio-onload",type:"boolean",section:"widget",defaultValue:!1,example:!0},{displayName:"author",type:"string",example:"my_name"},{displayName:"auto-height",type:"boolean",section:"widget",defaultValue:!1,example:!0},{displayName:"auto-padding",type:"boolean",section:"widget",widget:"graph",defaultValue:!0,example:!1},{displayName:"auto-period",type:"boolean",section:"widget",widget:"chart",defaultValue:!0,example:!1},{displayName:"auto-scale",type:"boolean",section:"widget",widget:"chart",defaultValue:!1,example:!0},{displayName:"axis",type:"enum",defaultValue:"left",section:"series",example:"right",enum:["right","left"]},{displayName:"axis-title",type:"string",section:"widget",example:"CPU Utilization in %"},{displayName:"axis-title-left",type:"string",section:"widget",example:"CPU Utilization in %"},{displayName:"axis-title-right",type:"string",section:"widget",example:"CPU Utilization in %"},{displayName:"bar-count",type:"integer",section:"widget",widget:"histogram",example:20},{displayName:"batch-size",type:"integer",section:"widget",example:1,defaultValue:8},{displayName:"batch-update",type:"boolean",example:!0,section:"widget",defaultValue:!1},{displayName:"border-width",type:"number",example:.3,section:"widget",widget:"gauge"},{displayName:"bottom-axis",type:"enum",defaultValue:"values",section:"widget",widget:"histogram",example:"none",enum:["none","percentiles","values"]},{displayName:"bundle",section:"widget",widget:"graph",type:"boolean",example:!1,defaultValue:!0},{displayName:"bundled",section:"widget",widget:"graph",type:"boolean",example:!1,defaultValue:!0},{displayName:"buttons",type:"enum",section:"widget",example:"menu",enum:["menu","update"]},{displayName:"cache",type:"boolean",example:!0,defaultValue:!1,section:"widget"},{displayName:"capitalize",type:"boolean",example:!1,defaultValue:!0,section:"widget"},{displayName:"caption",type:"string",example:"KPI",section:"widget"},{displayName:"caption-style",multiLine:!0,type:"string",example:"color: silver",section:"widget"},{displayName:"case",type:"enum",enum:["upper","lower"],example:"upper",section:"widget",widget:"property"},{displayName:"centralize-columns",type:"boolean",example:!0,defaultValue:!1,section:"widget"},{displayName:"centralize-ticks",type:"boolean",example:!0,defaultValue:!1,section:"widget"},{displayName:"change-field",type:"string",example:"series.entity",section:"dropdown"},{displayName:"circle",type:"boolean",example:!0,defaultValue:!1,section:"widget",widget:"text"},{displayName:"class",type:"enum",example:"terminal",enum:["terminal","metro"],section:"widget",override:{"[widget == 'console' || widget == 'property']":{enum:["terminal"]},"[widget == 'box']":{enum:["metro"]}}},{displayName:"collapsible",type:"boolean",example:!1,defaultValue:!0,section:"widget"},{displayName:"color",type:"string",example:"orange",section:"series",excludes:["colors","color-range"]},{displayName:"color-range",type:"string",example:"black, blue",excludes:["colors","color"],possibleValues:[{value:"blue"},{value:"red"},{value:"black"},{value:"green"},{value:"yellow"},{value:"silver"}]},{displayName:"colors",type:"string",example:"green",section:"widget",excludes:["color-range","color"]},{displayName:"column-alert-expression",type:"string",example:"value > 10",section:"column"},{displayName:"column-alert-style",type:"string",example:"fill: red; stroke: red",section:"column"},{displayName:"column-entity",type:"string",example:"Entity",section:"widget"},{displayName:"column-metric",type:"string",example:"Temperature",section:"widget"},{displayName:"column-time",type:"string",example:"Time in seconds",section:"widget"},{displayName:"column-value",type:"string",example:"CPU Usage",section:"widget"},{displayName:"column-label-format",type:"string",example:"tags.mount_point",section:"column",defaultValue:"entity: metric: tagName=tagValue: statistics - period",possibleValues:[{value:"entity"},{value:"metric"},{value:"tagName"},{value:"tagValue"},{value:"tags.{tag-name}"},{value:"statistics"},{value:"period"}]},{displayName:"context-height",type:"integer",example:50,defaultValue:0},{displayName:"context-path",type:"string",example:"/hbs",defaultValue:"/api/v1",section:"configuration"},{displayName:"counter",type:"boolean",example:!0,defaultValue:!1,section:"series"},{displayName:"counter-position",type:"enum",example:"none",section:"widget",widget:"gauge",enum:["none","top","bottom"]},{displayName:"current-period-style",multiLine:!0,type:"string",example:"fill-opacity: 0; stroke-width: 2; stroke-dasharray: 5, 2, 1, 2",section:"widget",widget:"chart"},{displayName:"data",type:"boolean",example:!0,defaultValue:!1,section:"widget",widget:"graph"},{displayName:"data-labels",type:"boolean",example:!0,defaultValue:!1,section:"widget",widget:"calendar"},{displayName:"data-type",type:"enum",example:"forecast",enum:["history","forecast","forecast_deviation","lower_confidence","upper_confidence"],section:"series"},{displayName:"day-format",type:"string",example:"%y/%m/%d",possibleValues:[{value:"%a",detail:"Three-letter abbreviated day name, for example: Sun, Mon, Tue, Wed, Thu, Fri, Sat."},{value:"%aa",detail:"Two-letter abbreviated day name, for example: Su, Mo, Tu, We, Th, Fr, Sa."},{value:"%A",detail:"Full day name."},{value:"%b",detail:"Abbreviated month name."},{value:"%B",detail:"Full month name."},{value:"%d",detail:"Zero-padded day of the month as a decimal number [01,31]."},{value:"%e",detail:"Space-padded day of the month as a decimal number [ 1,31]. Equivalent to %_d."},{value:"%j",detail:"Day of the year as a decimal number [001,366]."},{value:"%m",detail:"Month as a decimal number [01,12]."},{value:"%U",detail:"Week number of the year as a decimal number [00,53]. Sunday is the first day of the week."},{value:"%w",detail:"Weekday as a decimal number [0(Sunday),6]."},{value:"%W",detail:"Week number of the year as a decimal number [00,53]. Monday is the first day of the week."},{value:"%x",detail:"Date, as %m/%d/%Y."},{value:"%y",detail:"Year without century as a decimal number [00,99]."},{value:"%Y",detail:"Year with century as a decimal number."}],section:"widget"},{displayName:"default-color",type:"string",example:"magenta",section:"series"},{displayName:"default-size",type:"number",example:2,defaultValue:1,section:"widget",widget:"treemap"},{displayName:"depth",type:"integer",example:3,section:"widget",widget:"graph"},{displayName:"description",type:"string",example:"My configuration"},{displayName:"dialog-maximize",type:"boolean",example:!1,defaultValue:!0,section:"widget"},{displayName:"disable-alert",type:"boolean",example:!0,defaultValue:!1,section:"widget",widget:"page"},{displayName:"disconnect-count",type:"integer",example:50,section:"widget",widget:"chart"},{displayName:"disconnected-node-display",type:"boolean",example:!1,defaultValue:!0,section:"widget",widget:"graph"},{displayName:"disconnect-interval",type:"interval",example:"1 minute",section:"widget",widget:"chart"},{displayName:"disconnect-value",type:"integer",example:0,section:"widget",widget:"chart"},{displayName:"display",type:"string",example:"value > top(3)",section:"series",script:{returnValue:"boolean",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"display-date",type:"boolean",example:!0,defaultValue:!1,section:"widget",widget:"chart"},{displayName:"display-in-legend",type:"boolean",example:!1,section:"series"},{displayName:"display-labels",type:"boolean",example:!1,defaultValue:!0,section:"widget",widget:"treemap"},{displayName:"display-other",type:"boolean",example:!1,defaultValue:!0,section:"widget",widget:"pie"},{displayName:"display-panels",type:"enum",example:"true",defaultValue:"hover",section:"widget",enum:["true","false","hover"]},{displayName:"display-tags",type:"string",example:"mount_point",defaultValue:!1,section:"widget"},{displayName:"display-ticks",type:"boolean",example:!1,defaultValue:!0,widget:"gauge",section:"widget"},{displayName:"display-tip",type:"boolean",example:!0,widget:"gauge",section:"widget"},{displayName:"display-total",type:"boolean",example:!1,defaultValue:!0,widget:"treemap",section:"widget"},{displayName:"display-values",type:"boolean",example:!1,defaultValue:!0,section:"widget",widget:"bar"},{displayName:"downsample",type:"boolean",example:!0,defaultValue:!1,section:"widget"},{displayName:"downsample-algorithm",type:"enum",example:"DETAIL",section:"widget",enum:["DETAIL","INTERPOLATE"]},{displayName:"downsample-difference",type:"number",example:4,minValue:0,section:"widget",excludes:["downsample-ratio"]},{displayName:"downsample-ratio",type:"number",example:2,minValue:1,section:"widget",excludes:["downsample-difference"]},{displayName:"downsample-gap",type:"interval",example:"10 minute",section:"widget"},{displayName:"downsample-order",type:"integer",example:5,minValue:0,section:"widget"},{displayName:"duration",type:"integer",example:2e3,defaultValue:1e3,widget:"graph",section:"widget"},{displayName:"effects",type:"boolean",example:!1,defaultValue:!0,widget:"graph",section:"widget"},{displayName:"empty-refresh-interval",type:"interval",example:"5 minute",section:"series"},{displayName:"empty-threshold",type:"interval",example:"5 minute",section:"series"},{displayName:"enabled",type:"string",example:!1,section:"series",script:{returnValue:"boolean",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"end-time",type:"date",example:"previous_working_day",section:"widget"},{displayName:"end-working-minutes",type:"integer",example:60,defaultValue:1440,section:"series",minValue:0},{displayName:"entities",type:"string",example:"nurswgvml111, nurswgvml00*",section:"series",excludes:["entity","entity-expression","entity-group","entity-label"]},{displayName:"entity",type:"string",example:"nurswgvml*",section:"series",excludes:["entities","entity-expression","entity-group"]},{displayName:"entity-expression",type:"string",example:"tags.app = 'ATSD'",section:"series",excludes:["entities","entity","entity-group"]},{displayName:"entity-group",type:"string",example:"nmob-sub-group",section:"series",excludes:["entities","entity","entity-expression"]},{displayName:"entity-label",type:"string",example:"srv007",section:"widget"},{displayName:"error-refresh-interval",type:"interval",example:"30 minute",section:"series"},{displayName:"exact-match",type:"boolean",example:!0,section:"series"},{displayName:"expand",type:"boolean",example:!0,section:"series",widget:"pie"},{displayName:"expand-panels",type:"enum",example:"all",defaultValue:"compact",enum:[],section:"widget",override:{"[widget == 'chart']":{enum:["true","all","default","auto","compact","false","none"]},"[section == 'configuration']":{enum:["true","all","default","auto","compact","false","none"]}}},{displayName:"expand-tags",type:"boolean",example:!0,section:"widget",widget:"property"},{displayName:"expire-time-span",type:"interval",example:"10 day",section:"widget",widget:"table"},{displayName:"fill-value",type:"boolean",example:!1,defaultValue:!0,section:"series",widget:"chart"},{displayName:"filter",type:"string",example:"value > 1",section:"series"},{displayName:"filter-range",type:"boolean",example:!0,defaultValue:!1,section:"series"},{displayName:"fit-svg",type:"boolean",example:!0,section:"widget",widget:"page"},{displayName:"font-scale",type:"number",example:.7,defaultValue:.5,minValue:0,maxValue:1,section:"widget"},{displayName:"font-size",type:"integer",example:42,section:"widget",widget:"treemap"},{displayName:"forecast-arima-auto",type:"boolean",example:"true",section:"series",widget:"chart"},{displayName:"forecast-arima-auto-regression-interval",type:"interval",example:"1 week",section:"series",widget:"chart",excludes:["forecast-arima-p"]},{displayName:"forecast-arima-d",type:"number",example:"5",section:"series",widget:"chart"},{displayName:"forecast-arima-p",type:"enum",example:"1",section:"series",widget:"chart",enum:["0","1"],excludes:["forecast-arima-auto-regression-interval"]},{displayName:"forecast-horizon-interval",type:"interval",example:"3 day",section:"series",widget:"chart",excludes:["forecast-horizon-length","forecast-horizon-end-time"]},{displayName:"forecast-horizon-length",type:"integer",example:"100",section:"series",widget:"chart",minValue:0,excludes:["forecast-horizon-interval","forecast-horizon-end-time"]},{displayName:"forecast-horizon-start-time",type:"date",example:"2019-02-05T00:00:00Z",section:"series",widget:"chart"},{displayName:"forecast-horizon-end-time",type:"date",example:"2019-02-06T00:00:00Z",section:"series",widget:"chart",excludes:["forecast-horizon-interval","forecast-horizon-length"]},{displayName:"forecast-hw-auto",type:"boolean",example:"true",section:"series",widget:"chart"},{displayName:"forecast-hw-period",type:"interval",example:"1 year",section:"series",widget:"chart"},{displayName:"forecast-hw-alpha",type:"number",example:"0.6",section:"series",widget:"chart"},{displayName:"forecast-hw-beta",type:"number",example:"0.1",section:"series",widget:"chart"},{displayName:"forecast-hw-gamma",type:"number",example:"0.1",section:"series",widget:"chart"},{displayName:"forecast-include",type:"string",example:"HISTORY, FORECAST",section:"series",defaultValue:"FORECAST",enum:["FORECAST","HISTORY","RECONSTRUCTED"],widget:"chart"},{displayName:"forecast-name",type:"string",example:"hw5",section:"series",widget:"chart"},{displayName:"forecast-score-interval",type:"interval",example:"1 day",section:"series",widget:"chart"},{displayName:"forecast-ssa",type:"boolean",example:"true",section:"series",widget:"chart"},{displayName:"forecast-ssa-decompose-eigentriple-limit",type:"number",example:0,section:"series",widget:"chart",defaultValue:0,minValue:0},{displayName:"forecast-ssa-decompose-method",type:"enum",example:"TRUNCATED",section:"series",widget:"chart",defaultValue:"AUTO",enum:["FULL","TRUNCATED","AUTO"]},{displayName:"forecast-ssa-decompose-singular-value-threshold",type:"integer",example:1,section:"series",widget:"chart",minValue:0,maxValue:{value:100,excluded:!0}},{displayName:"forecast-ssa-decompose-window-length",type:"number",example:"50",section:"series",widget:"chart",minValue:{value:0,excluded:!0},maxValue:50},{displayName:"forecast-ssa-forecast-base",type:"enum",example:"RECONSTRUCTED",section:"series",widget:"chart",enum:["RECONSTRUCTED","ORIGINAL"]},{displayName:"forecast-ssa-forecast-method",type:"enum",example:"RECURRENT",section:"series",widget:"chart",defaultValue:"RECURRENT",enum:["RECURRENT","VECTOR"]},{displayName:"forecast-ssa-group-auto-count",type:"integer",example:"5",section:"series",widget:"chart",minValue:0},{displayName:"forecast-ssa-group-auto-clustering-method",type:"enum",example:"NOVOSIBIRSK",section:"series",defaultValue:"HIERARCHICAL",widget:"chart",enum:["HIERARCHICAL","XMEANS","NOVOSIBIRSK"],excludes:["forecast-ssa-group-manual-groups"]},{displayName:"forecast-ssa-group-auto-clustering-params",type:"object",example:'{ "v": 0.5, "c": 0.45 }',section:"series",widget:"chart",excludes:["forecast-ssa-group-manual-groups"]},{displayName:"forecast-ssa-group-auto-stack",type:"boolean",example:"true",section:"series",widget:"chart",excludes:["forecast-ssa-group-manual-groups","forecast-ssa-group-auto-union"]},{displayName:"forecast-ssa-group-auto-union",type:"string",example:"A;C-E , B;F-",section:"series",widget:"chart",excludes:["forecast-ssa-group-manual-groups","forecast-ssa-group-auto-stack"]},{displayName:"forecast-ssa-group-manual-groups",type:"string",example:"1;3-6 , 2;7-",section:"series",widget:"chart",excludes:["forecast-ssa-group-auto-clustering-method","forecast-ssa-group-auto-clustering-params","forecast-ssa-group-auto-stack","forecast-ssa-group-auto-union"]},{displayName:"forecast-ssa-reconstruct-averaging-function",type:"enum",example:"AVG",defaultValue:"MEDIAN",section:"series",widget:"chart",enum:["AVG","MEDIAN"]},{displayName:"forecast-ssa-reconstruct-fourier",type:"boolean",example:"true",section:"series",widget:"chart"},{displayName:"forecast-style",multiLine:!0,type:"string",example:"stroke: magenta;",section:"widget",widget:"chart"},{displayName:"format",type:"string",example:"kilobytes",possibleValues:[{value:"bytes"},{value:"kilobytes"},{value:"megawatt"},{value:"kilowatthour"},{value:"hertz"},{value:"kilojoule"},{value:"million watt"},{value:"thousands"}],section:"series",script:{returnValue:"string",fields:[{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"numeric",type:"function"},{name:"decimal",type:"function"},{name:"round",type:"function"},{name:"fixed",type:"function"},{name:"binary",type:"function"},{name:"currency",type:"function"},{name:"percent",type:"function"},{name:"fraction",type:"function"},{name:"iso",type:"function"},{name:"json",type:"function"},{name:"precise",type:"function",args:[{name:"n",type:"number"}]}]}},{displayName:"format-axis",type:"string",example:'Math.round(value * 10)/10 + "%"',section:"widget",widget:"gauge",script:{returnValue:"string",fields:[{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"numeric",type:"function"},{name:"decimal",type:"function"},{name:"round",type:"function"},{name:"fixed",type:"function"},{name:"binary",type:"function"},{name:"currency",type:"function"},{name:"percent",type:"function"},{name:"fraction",type:"function"},{name:"iso",type:"function"},{name:"json",type:"function"}]}},{displayName:"format-counter",type:"string",example:'d3.format("0.3f")',section:"widget",widget:"gauge",script:{returnValue:"string",fields:[{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"numeric",type:"function"},{name:"decimal",type:"function"},{name:"round",type:"function"},{name:"fixed",type:"function"},{name:"binary",type:"function"},{name:"currency",type:"function"},{name:"percent",type:"function"},{name:"fraction",type:"function"},{name:"iso",type:"function"},{name:"json",type:"function"}]}},{displayName:"format-headers",type:"boolean",example:!0,section:"column",widget:"property"},{displayName:"format-size",type:"string",example:"kilobytes",section:"widget",widget:"treemap",script:{returnValue:"string",fields:[{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"numeric",type:"function"},{name:"decimal",type:"function"},{name:"round",type:"function"},{name:"fixed",type:"function"},{name:"binary",type:"function"},{name:"currency",type:"function"},{name:"percent",type:"function"},{name:"fraction",type:"function"},{name:"iso",type:"function"},{name:"json",type:"function"}]}},{displayName:"format-tip",type:"string",example:'d3.format("0.1f")',section:"widget",widget:"gauge",script:{returnValue:"string",fields:[{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"numeric",type:"function"},{name:"decimal",type:"function"},{name:"round",type:"function"},{name:"fixed",type:"function"},{name:"binary",type:"function"},{name:"currency",type:"function"},{name:"percent",type:"function"},{name:"fraction",type:"function"},{name:"iso",type:"function"},{name:"json",type:"function"}]}},{displayName:"frequency",type:"interval",example:"30 minute",section:"series"},{displayName:"gradient-count",type:"string",example:"5",minValue:1,section:"widget",widget:["gauge","treemap","calendar"]},{displayName:"gradient-intensity",type:"string",example:"-25%/75%",section:"widget",widget:"gauge"},{displayName:"group",section:"widget",widget:"bar",type:"string",example:"region",defaultValue:"metric"},{displayName:"group-first",type:"boolean",example:!1,section:"series"},{displayName:"group-interpolate",type:"enum",section:"series",example:"LINEAR",defaultValue:"NONE",enum:["LINEAR","PREVIOUS","NONE","NEXT","VALUE\\(\\d+\\)"]},{displayName:"group-interpolate-extend",type:"boolean",example:!0,section:"series"},{displayName:"group-keys",type:"string",example:"entity, type",section:"series"},{displayName:"group-label",type:"string",example:"Tables",widget:"bar",section:"series"},{displayName:"group-period",type:"interval",section:"series",example:"1 month",enum:["auto"]},{displayName:"group-statistic",type:"enum",example:"sum",section:"series",enum:["count","min","max","sum","avg","percentile\\((\\d{1,2}(\\.\\d)?|100)\\)","median","standard_deviation","first","last","delta","counter","wtavg","wavg","min_value_time","max_value_time","threshold_count","threshold_duration","threshold_percent"]},{displayName:"header-style",multiLine:!0,type:"string",example:"background-color: steelblue",section:"widget"},{displayName:"height-units",type:"number",minValue:0,example:2,section:"widget"},{displayName:"hidden",type:"boolean",example:!0,section:"series",defaultValue:!1},{displayName:"hide-column",type:"string",example:"value <= 0 \\| column.key.indexOf('paging') == 0",multiLine:!0,section:"column",widget:"property",script:{returnValue:"boolean",fields:[{name:"value",type:"number"},{name:"alert",type:"number"},{name:"row",type:"object"},{name:"column",type:"object"},{name:"widget",type:"object"},{name:"el",type:"array"},{name:"rowEl",type:"array"},{name:"td",type:"boolean"},{name:"filter",type:"function",args:[{name:"filter",type:"function"}]},{name:"dialog",type:"function",args:[{name:"request",type:"object"}]},{name:"series",type:"function",args:[{name:"request",type:"object"}]}]}},{displayName:"hide-empty-columns",type:"boolean",example:!0,defaultValue:!1,widget:"bar",section:"widget"},{displayName:"hide-empty-series",type:"boolean",example:!1,defaultValue:!0,widget:"table",section:"widget"},{displayName:"hide-if-empty",type:"boolean",example:!0,widget:"table",section:"series"},{displayName:"horizontal",type:"boolean",example:!0,defaultValue:!1,widget:"bar",section:"widget"},{displayName:"horizontal-grid",type:"enum",example:!1,enum:[],section:"widget",override:{"[widget == 'chart']":{enum:["true","false"]},"[widget == 'histogram']":{enum:["none","density","fractions","frequency","false"]}}},{displayName:"hour-format",type:"string",example:"%I %p"},{displayName:"icon",type:"string",example:"value > 1 ? 'exclamation-sign' : 'ok'",script:{returnValue:"string",fields:[{name:"value",type:"number"}]}},{displayName:"icon-alert-expression",type:"string",example:"value('s1') > 10",widget:"pie",section:"series",script:{returnValue:"boolean",fields:[{name:"value",type:"function",args:[{name:"alias",required:!0,type:"string"}]}]}},{displayName:"icon-alert-style",multiLine:!0,type:"string",example:"return alert > 12000 ? 'fill: red' : 'fill:green';",script:{returnValue:"string",fields:[{name:"alert",type:"number"}]}},{displayName:"icon-color",type:"string",example:"green",section:"series",widget:"text"},{displayName:"icon-position",type:"enum",example:"bottom",section:"widget",widget:"text",enum:["bottom","right","left","top"]},{displayName:"icon-size",type:"enum",example:"auto",section:"widget",widget:"text",enum:["auto"]},{displayName:"id",type:"string",example:"queue_1",widget:"graph"},{displayName:"interpolate",type:"enum",example:"LINEAR",defaultValue:"NONE",section:"series",enum:["LINEAR","PREVIOUS","NONE","NEXT","VALUE\\(\\d+\\)"]},{displayName:"interpolate-boundary",type:"enum",section:"series",example:"INNER",enum:["INNER","OUTER"]},{displayName:"interpolate-extend",type:"boolean",example:!0,section:"series"},{displayName:"interpolate-fill",type:"enum",example:"true",section:"series",enum:["true","false","\\d+"]},{displayName:"interpolate-function",type:"enum",example:"LINEAR",section:"series",enum:["LINEAR","AUTO","PREVIOS"]},{displayName:"interpolate-period",type:"interval",example:"1 minute",section:"series"},{displayName:"interval-format",type:"string",example:"%H:%M"},{displayName:"join",type:"string",section:"widget",widget:"property",example:"true"},{displayName:"key",type:"string",example:"%cpu",section:"column"},{displayName:"key-tag-expression",type:"string",example:"tags.docker-host = 'nurswghbs001'",section:"property",widget:"property"},{displayName:"label",type:"string",multiLine:!0,example:"CPU Busy - nurswgvml007",section:"series"},{displayName:"label-format",type:"string",example:"tagName",section:"series"},{displayName:"last",type:"boolean",example:!0,defaultValue:!1,section:"property",widget:"property"},{displayName:"last-marker",type:"boolean",example:!1,defaultValue:!0,widget:"chart",section:"widget"},{displayName:"last-value-label",type:"string",example:"none",defaultValue:"right",widget:"chart",section:"widget"},{displayName:"layout",type:"enum",example:"rectangle",section:"widget",widget:"graph",defaultValue:"circle",enum:["rectangle","circle"]},{displayName:"left-axis",type:"enum",example:"fraction",defaultValue:"frequency",widget:"histogram",section:"widget",enum:["none","density","fraction","frequency"]},{displayName:"left-units",type:"number",example:1,section:"widget",minValue:0},{displayName:"legend-last-value",type:"boolean",example:!1,defaultValue:!0,widget:"chart",section:"widget"},{displayName:"legend-position",type:"string",example:"left",section:"widget"},{displayName:"legend-ticks",type:"boolean",example:!0,section:"widget"},{displayName:"legend-value",type:"boolean",example:!0,section:"widget"},{displayName:"limit",type:"integer",example:1e3,section:"widget"},{displayName:"linear-zoom",widget:"graph",section:"widget",type:"boolean",example:!0},{displayName:"link-alert-expression",widget:"graph",type:"string",section:"series",example:"value('s1') > 10",script:{returnValue:"boolean",fields:[{name:"value",type:"function",args:[{name:"alias",required:!0,type:"string"}]}]}},{displayName:"link-alert-style",multiLine:!0,section:"series",type:"string",widget:"graph",example:"if (alert > 99) return 'stroke-width:3px';",script:{returnValue:"string",fields:[{name:"alert",type:"number"}]}},{displayName:"link-animate",type:"boolean",example:!0,defaultValue:!1,widget:"graph",section:"widget"},{displayName:"link-color-range",type:"string",example:"silver, steelblue, orange",widget:"graph",section:"widget"},{displayName:"link-colors",type:"string",example:"blue, green, orange, red",widget:"graph",section:"widget"},{displayName:"link-data",widget:"graph",section:"widget",type:"boolean",example:!0},{displayName:"link-labels",type:"boolean",example:!0,widget:"graph",section:"widget"},{displayName:"link-label-zoom-threshold",type:"number",example:1,defaultValue:0,widget:"graph",section:"widget"},{displayName:"links",widget:"graph",section:"series",type:"string",example:"alpha.queue - beta.queue"},{displayName:"link-thresholds",type:"string",example:"Math.max(0.1, percentile(50)), percentile(95)",script:{returnValue:"string",fields:[{name:"percentile",type:"function"},{name:"max",type:"function"},{name:"min",type:"function"},{name:"avg",type:"function"},{name:"sum",type:"function"}]}},{displayName:"link-value",widget:"graph",section:"series",type:"string",example:"Math.max(0, value('alias'))",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"link-width-order",type:"enum",example:"top",widget:"graph",section:"widget",defaultValue:"undefined",enum:["top","bottom","undefined"]},{displayName:"link-widths",widget:"graph",section:"widget",type:"string",example:"1, 1, 2, 3"},{displayName:"load-future-data",type:"boolean",example:!0,widget:"chart",section:"series"},{displayName:"marker-format",type:"string",example:"metric:entity",widget:"pie",section:"series"},{displayName:"markers",type:"boolean",example:!1,defaultValue:!0,section:"series"},{displayName:"max-font-size",type:"integer",example:14,defaultValue:100},{displayName:"maximum",type:"number",example:42,section:"series"},{displayName:"max-range",type:"number",example:40,section:"widget"},{displayName:"max-range-force",type:"number",example:100,section:"widget"},{displayName:"max-range-right",type:"number",example:5e5,section:"widget"},{displayName:"max-range-right-force",type:"number",example:100,section:"widget"},{displayName:"max-ring-width",widget:"graph",section:"widget",type:"number",defaultValue:.5,example:.6},{displayName:"max-threshold",section:"series",type:"number",example:60},{displayName:"menu",type:"enum",example:"update",section:"widget",enum:["update"]},{displayName:"merge-columns",type:"string",example:"entity, tags",section:"widget"},{displayName:"merge-fields",section:"series",type:"string",example:"mount_point"},{displayName:"method-path",section:"configuration",type:"enum",example:"/messages/query",defaultValue:"/series/query",enum:["/alerts/query","/series/query","/messages/query","/properties/query"]},{displayName:"metric",type:"string",example:"cpu_busy",section:"series",excludes:["attribute","table"]},{displayName:"metric-label",widget:"bar",section:"series",type:"string",example:"CPU Busy, %"},{displayName:"min-caption-size",widget:"pie",section:"widget",type:"integer",example:42},{displayName:"min-font-size",type:"integer",example:10},{displayName:"minimum",section:"series",defaultValue:0,type:"number",example:42},{displayName:"minor-ticks",type:"integer",example:4,widget:"gauge",section:"widget"},{displayName:"min-range",section:"widget",type:"number",example:10},{displayName:"min-range-force",section:"widget",type:"number",example:0},{displayName:"min-range-right",section:"widget",type:"number",example:25e4},{displayName:"min-range-right-force",section:"widget",type:"number",example:0},{displayName:"min-ring-width",minValue:0,defaultValue:.3,type:"number",example:.4,widget:"graph",section:"widget"},{displayName:"min-severity",type:"string",widget:"console",section:"widget",example:"3"},{displayName:"min-threshold",defaultValue:0,type:"number",section:"series",example:10},{displayName:"mode",type:"enum",example:"column",section:["widget","series"],enum:["non-hierarchy","hierarchy","column","range","stack","column-stack","sleek","half","default","row","pie","ring","auto","line"],override:{"[widget == 'chart']":{enum:["line","stack","column","range","column-stack"]},"[widget == 'gauge']":{enum:["sleek","half","default"]},"[widget == 'pie']":{enum:["pie","ring"]},"[widget == 'histogram']":{enum:["stack"]},"[widget == 'treemap']":{enum:["row","column","auto"]},"[widget == 'graph']":{enum:["hierarchy","non-hierarchy"]}}},{displayName:"moving-average",type:"boolean",widget:"chart",section:"widget",example:!0},{displayName:"multiple-column",type:"boolean",defaultValue:!1,widget:"bar",section:"column",example:!0},{displayName:"multiple-series",type:"boolean",example:!0},{displayName:"negative-style",multiLine:!0,type:"string",example:"fill: red",widget:"chart",section:"widget"},{displayName:"node-alert-expression",type:"string",example:"value > 5",script:{fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}],returnValue:"boolean"}},{displayName:"node-alert-style",multiLine:!0,widget:"graph",type:"string",example:"if (alert > 99) return 'fill:red';",script:{returnValue:"string",fields:[{name:"alert",type:"number"}]}},{displayName:"node-collapse",widget:"graph",section:"widget",type:"boolean",example:!1,defaultValue:!0},{displayName:"node-colors",widget:"graph",section:"widget",type:"string",example:"red, orange, whitesmoke, limegreen, green"},{displayName:"node-connect",widget:"graph",section:"widget",type:"boolean",example:!1,defaultValue:!0},{displayName:"node-data",widget:"graph",section:"widget",type:"boolean",example:!0},{displayName:"node-labels",widget:"graph",section:"widget",type:"boolean",example:!0},{displayName:"node-label-zoom-threshold",widget:"graph",section:"widget",type:"number",example:2},{displayName:"node-radius",type:"integer",defaultValue:5,widget:"graph",section:"widget",example:20},{displayName:"node-radiuses",type:"string",widget:"graph",section:"widget",example:"10, 20, 30, 40"},{displayName:"nodes",widget:"graph",type:"string",example:"queue_1-queue_2"},{displayName:"node-thresholds",widget:"graph",section:"widget",type:"string",example:"min(), 0, max()",script:{returnValue:"string",fields:[{name:"percentile",type:"function"},{name:"max",type:"function"},{name:"min",type:"function"},{name:"avg",type:"function"},{name:"sum",type:"function"}]}},{displayName:"node-value",widget:"graph",section:"series",type:"string",example:"Math.max(0, value('alias'))",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"offset",type:"integer",widget:"property",section:"property",example:5e3},{displayName:"offset-bottom",section:"configuration",type:"integer",example:50},{displayName:"offset-left",section:"configuration",type:"integer",example:50},{displayName:"offset-right",section:"configuration",type:"integer",example:50},{displayName:"offset-top",section:"configuration",type:"integer",example:50},{displayName:"on-change",section:"dropdown",type:"string",multiLine:!1,example:"widget.post.queries[0].type = this.value; widget.reload();",script:{returnValue:"void",fields:[{name:"widget",type:"object"}]}},{displayName:"on-click",section:"column",type:"string",example:"dialog({ series: [s], disconnectValue: 0 })",multiLine:!0,script:{returnValue:"void",fields:[{name:"value",type:"number"},{name:"alert",type:"number"},{name:"row",type:"object"},{name:"column",type:"object"},{name:"widget",type:"object"},{name:"el",type:"array"},{name:"rowEl",type:"array"},{name:"td",type:"boolean"},{name:"filter",type:"function",args:[{name:"filter",type:"function"}]},{name:"dialog",type:"function",args:[{name:"request",type:"object"}]},{name:"series",type:"function",args:[{name:"request",type:"object"}]}]}},{displayName:"on-series-click",type:"string",multiLine:!0,example:"callDialog({ type: 'page', url: 'http://www.axibase.com/' })",script:{returnValue:"void",fields:[{name:"series",type:"object"},{name:"widget"},{name:"config",type:"object"},{name:"interval",type:"object"}]}},{displayName:"on-series-double-click",multiLine:!0,type:"string",example:"''",script:{returnValue:"void",fields:[{name:"series",type:"object"},{name:"widget"},{name:"config",type:"object"},{name:"interval",type:"object"}]}},{displayName:"options",multiLine:!0,section:"dropdown",type:"string",example:'javascript: requestMetricsSeriesValues("entity")'},{displayName:"padding",widget:"graph",section:"widget",type:"string",example:"1px"},{displayName:"palette-ticks",section:"widget",type:"boolean",example:!0,defaultValue:!1},{displayName:"parent",widget:"graph",section:"node",type:"string",example:"manager_1"},{displayName:"parse-numbers",type:"boolean",example:!0,section:"column",widget:"property",defaultValue:!1},{displayName:"path",section:"configuration",type:"string",example:"/messages/query"},{displayName:"percentile-markers",defaultValue:"none",type:"enum",example:"all",widget:"box",section:"widget",enum:["all","none","top","bottom"]},{displayName:"percentiles",type:"string",example:"10%/90%"},{displayName:"period",type:"interval",example:"15 minute",section:"series",enum:["auto"]},{displayName:"periods",section:"configuration",type:"string",example:"20 minute, 4 hour"},{displayName:"pin-radius",widget:"gauge",section:"widget",type:"number",example:.2,minValue:0,maxValue:1},{displayName:"pointer-position",widget:"chart",section:"series",type:"string",example:"right",defaultValue:"false"},{displayName:"position",section:"column",type:"string",example:"first"},{displayName:"primary-key",widget:"console",section:"widget",type:"string",defaultValue:"id",example:"id"},{displayName:"principal",type:"string",example:"username"},{displayName:"range-merge",type:"boolean",section:"widget",example:!0,defaultValue:!1},{displayName:"range-offset",widget:"histogram",section:"widget",type:"number",example:50},{displayName:"range-select-end",widget:"histogram",type:"string",section:"widget",example:"alert(min + ',' + max)",script:{returnValue:"void",fields:[{name:"min",type:"number"},{name:"max",type:"number"}]}},{displayName:"range-select-start",widget:"histogram",type:"string",section:"widget",example:"alert(min + ',' + max)",script:{returnValue:"void",fields:[{name:"min",type:"number"},{name:"max",type:"number"}]}},{displayName:"rate",type:"interval",example:"15 second",section:"series"},{displayName:"rate-counter",type:"boolean",example:!0,section:"series"},{displayName:"ratio",type:"number",example:.2,widget:"treemap",section:"widget"},{displayName:"refresh-interval",type:"interval",example:"5 second",section:"series"},{displayName:"reload",section:"dropdown",type:"boolean",example:!0},{displayName:"replace-underscore",section:"widget",type:"boolean",example:!0,defaultValue:!1,widget:"table"},{displayName:"replace-value",type:"string",example:"value < 50 ? null : value",section:"series",script:{returnValue:"number",fields:[{name:"value",type:"number"},{name:"time",type:"integer"},{name:"previousValue",type:"number"},{name:"previousTime",type:"integer"}]}},{displayName:"responsive",section:"widget",type:"boolean",example:!0,defaultValue:!1},{displayName:"retain-time-span",widget:"chart",section:"widget",type:"boolean",example:!1,defaultValue:!0},{displayName:"retry-refresh-interval",type:"interval",example:"5 minute",section:"series"},{displayName:"right-axis",type:"enum",example:"density",defaultValue:"none",widget:"histogram",section:"widget",enum:["density","none","fraction","frequency"]},{displayName:"ring-width",widget:"gauge",type:"number",minValue:0,maxValue:1,section:"widget",example:.2},{displayName:"rotate-legend-ticks",section:"widget",type:"boolean",defaultValue:!1,example:!0},{displayName:"rotate-palette-ticks",type:"boolean",section:"widget",example:!1,defaultValue:!0},{displayName:"rotate-ticks",type:"string",example:"45",section:"widget",defaultValue:"90"},{displayName:"row-alert-style",multiLine:!0,type:"string",example:"background-color: orange",section:"column",script:{returnValue:"string",fields:[{name:"alert",type:"number"}]}},{displayName:"row-style",multiLine:!0,type:"string",section:"column",example:"value > 1 ? 'background: orange' : null",script:{returnValue:"string",fields:[{name:"value",type:"number"},{name:"alert",type:"number"},{name:"row",type:"object"},{name:"column",type:"object"},{name:"widget",type:"object"},{name:"el",type:"array"},{name:"rowEl",type:"array"},{name:"td",type:"boolean"},{name:"filter",type:"function",args:[{name:"filter",type:"function"}]},{name:"dialog",type:"function",args:[{name:"request",type:"object"}]},{name:"series",type:"function",args:[{name:"request",type:"object"}]}]}},{displayName:"rule",type:"string",example:"cpu_busy_prod",widget:"console",section:"widget"},{displayName:"scale",type:"number",example:1.5,section:"widget"},{displayName:"scale-x",type:"number",example:.7,section:"widget"},{displayName:"scale-y",type:"number",example:.7,section:"widget"},{displayName:"script",type:"string",example:"console.log(widget.config)",script:{returnValue:"void",fields:[{name:"widget",type:"object"},{name:"config",type:"object"}]}},{displayName:"selector-mode",section:"widget",widget:"pie",type:"enum",example:"highlight",enum:["highlight","expand"]},{displayName:"series",widget:"graph",section:["node","link"],type:"string",example:"series-1"},{displayName:"series-labels",widget:"pie",section:"series",type:"string",example:"inside",defaultValue:"none",script:{returnValue:"string",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"series-limit",type:"integer",section:"series",example:10},{displayName:"series-type",widget:"chart",type:"string",section:"series",example:"s3"},{displayName:"series-value",type:"string",example:"avg()",section:"column",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"server-aggregate",type:"boolean",example:!0,section:"series"},{displayName:"severity",type:"integer",widget:"console",section:"widget",example:6,minValue:0,maxValue:7},{displayName:"severity-style",multiLine:!0,type:"enum",example:"row",widget:"console",section:"widget",enum:["row","column"]},{displayName:"show-tag-names",type:"boolean",example:!0,section:"widget",defaultValue:!1},{displayName:"size",type:"string",defaultValue:"1",example:"3",widget:"treemap",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"size-name",type:"string",example:"sum",widget:"treemap",section:"widget"},{displayName:"smooth",type:"enum",section:"series",example:"AVG",enum:["AVG","EMA","WAVG","WTAVG"]},{displayName:"smooth-count",type:"integer",example:50,minValue:0,section:"series"},{displayName:"smooth-factor",type:"number",section:"series",example:.5,minValue:0,maxValue:1},{displayName:"smooth-incomplete-value",type:"string",defaultValue:"null",example:"NaN"},{displayName:"smooth-interval",type:"interval",example:"15 minute",section:"series"},{displayName:"smooth-minimum-count",type:"integer",section:"series",example:10},{displayName:"smooth-range",type:"integer",section:"series",example:6e4},{displayName:"sort",section:"widget",type:"string",example:"metric, value desc"},{displayName:"source",widget:"console",section:"widget",type:"enum",defaultValue:"alert",example:"message",enum:["message","alert"]},{displayName:"sql",section:"widget",example:"SELECT time, entity, value FROM cpu_busy WHERE time > now - 5 * minute",multiLine:!0,type:"string"},{displayName:"stack",widget:"bar",type:"boolean",section:"widget",example:!1,defaultValue:!0,override:{"[widget == 'chart']":{deprecated:"This setting is deprecated in timechart. Use `mode = stack` instead"}}},{displayName:"start-time",type:"date",example:"2017-04-01T10:15:00Z",section:"widget"},{displayName:"start-working-minutes",section:"series",type:"integer",defaultValue:0,minValue:0,example:10},{displayName:"statistic",type:"enum",example:"avg",section:"series",enum:["count","detail","min","max","sum","avg","percentile\\((\\d{1,2}(\\.\\d)?|100)\\)","median","standard_deviation","first","last","delta","counter","wtavg","wavg","min_value_time","max_value_time","threshold_count","threshold_duration","threshold_percent"]},{displayName:"statistics",type:"enum",example:"last",section:"series",enum:["count","min","max","sum","avg","percentile\\((\\d{1,2}(\\.\\d)?|100)\\)","median","standard_deviation","first","last","delta","counter","wtavg","wavg","min_value_time","max_value_time","threshold_count","threshold_duration","threshold_percent"]},{displayName:"step-line",widget:"chart",section:"series",type:"boolean",example:!0},{displayName:"style",multiLine:!0,type:"string",example:"stroke-width: 4; color: green"},{displayName:"summarize-period",type:"interval",example:"1 hour",enum:["auto"]},{displayName:"summarize-statistic",type:"enum",example:"percentile(75)",enum:["avg","max","min","sum","count","last","percentile\\((\\d{1,2}(\\.\\d)?|100)\\)","median"]},{displayName:"table",type:"string",example:"klz_disk",section:"series",excludes:["metric"]},{displayName:"table-header-style",multiLine:!0,section:"widget",type:"string",example:"display: none"},{displayName:"tag",type:"string",section:"column",example:"file_system"},{displayName:"tag-expression",type:"string",section:"series",example:"tags.file_system NOT LIKE '/m*'"},{displayName:"tag-offset",type:"integer",widget:"property",section:"property",example:15e3},{displayName:"tags-dropdowns",section:"widget",type:"boolean",example:!0},{displayName:"tags-dropdowns-style",multiLine:!0,type:"string",section:"widget",example:"max-width: 150px"},{displayName:"tension",widget:"graph",type:"number",minValue:0,maxValue:1,defaultValue:.9,example:.8},{displayName:"text",type:"string",example:"Option 3"},{displayName:"thresholds",type:"string",example:"0, 50, 90, 100",section:"series",widget:["gauge","treemap","calendar"],script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"ticks",type:"integer",section:"widget",example:10,defaultValue:5},{displayName:"ticks-right",type:"integer",section:"widget",example:10,defaultValue:5},{displayName:"ticks-time",type:"integer",section:"widget",example:20,defaultValue:10},{displayName:"time-offset",type:"interval",example:"-200 day",widget:"chart",section:"series"},{displayName:"timespan",section:"widget",type:"interval",defaultValue:"1 hour",example:"5 minute"},{displayName:"time-zone",type:"string",section:"widget",example:"UTC"},{displayName:"title",type:"string",example:"My portal"},{displayName:"tooltip",type:"string",multiLine:!0,example:"NURSWGVML007"},{displayName:"top-axis",widget:"histogram",section:"widget",type:"enum",example:"percentiles",defaultValue:"none",enum:["percentiles","none","values"]},{displayName:"top-units",type:"number",section:"widget",example:1,minValue:0},{displayName:"total-size",widget:"treemap",section:"widget",type:"integer",example:70},{displayName:"total-value",widget:"pie",section:"widget",type:"string",example:"value('007-root') + value('006-root')",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"transformation-order",type:"string",defaultValue:"none",section:"series",example:"aggregate, interpolate",enum:["none","interpolate","group","rate","aggregate","smooth","downsample","forecast"]},{displayName:"transpose",type:"boolean",section:"widget",example:!0,defaultValue:!1},{displayName:"type",type:"enum",example:"chart",enum:["chart","gauge","treemap","bar","calendar","histogram","box","pie","graph","text","page","console","table","property"],override:{"[section == 'property' || section == 'properties']":{enum:[".*"]}}},{displayName:"unscale",defaultValue:".event",type:"string",section:"widget",widget:"page",example:".event, .location"},{displayName:"update-interval",section:"widget",type:"interval",defaultValue:"1 minute",example:"5 minute"},{displayName:"url",type:"string",section:"widget",example:"http://atsd_hostname:port"},{displayName:"url-parameters",type:"string",section:"widget",example:"db=12&adapter=7"},{displayName:"value",type:"string",example:"Math.max(0, value('alias'))",multiLine:!0,section:"option",script:{returnValue:"number",fields:[{name:"metric",type:"string"},{name:"entity",type:"string"},{name:"tags",type:"object"},{name:"value",type:"function",args:[{name:"alias",type:"string"}]},{name:"previous",type:"function",args:[{name:"alias",type:"string"}]},{name:"movavg",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"count",type:"number",required:!0},{name:"minCount",type:"number"}]},{name:"detail",type:"function"},{name:"forecast",type:"function"},{name:"forecast_deviation",type:"function"},{name:"lower_confidence",type:"function"},{name:"upper_confidence",type:"function"},{name:"percentile",type:"function",args:[{name:"percentage",type:"number",required:!0},{name:"alias",type:"string",required:!0},{name:"period",type:"interval",required:!1}]},{name:"max",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"maximum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"min",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"minimum",type:"function",args:[{name:"alias",type:"string"},{name:"count",type:"number"}]},{name:"avg",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"average",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"sum",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"delta",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"counter",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"last",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"first",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"min_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"max_value_time",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"count",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"threshold_count",type:"function"},{name:"threshold_percent",type:"function"},{name:"threshold_duration",type:"function"},{name:"time",type:"function",args:[{name:"alias",type:"string"}]},{name:"bottom",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"top",type:"function",args:[{name:"rank",type:"integer",required:!0},{name:"getValue",type:"function"}]},{name:"meta",type:"function",args:[{name:"alias",type:"string"}]},{name:"entityTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"metricTag",type:"function",args:[{name:"alias",type:"string",required:!0},{name:"tagName",type:"string",required:!0}]},{name:"median",type:"function",args:[{name:"alias",type:"string"},{name:"period",type:"interval"}]},{name:"series",type:"array"}]}},{displayName:"vertical-grid",section:"widget",type:"string",example:"none"},{displayName:"widgets-per-row",type:"integer",section:"group",example:3},{displayName:"width",widget:"graph",section:"widget",type:"string",example:"40%"},{displayName:"width-units",type:"number",example:2,minValue:0,section:"widget"},{displayName:"zoom-svg",widget:"page",section:"widget",type:"number",minValue:0,example:1.2}]}},function(e,t,n){"use strict";n.r(t),t.default='## addmeta  \n  \n## aheadtimespan  \n  \nShow an amount of time ahead of the last series value.  \nDefine in percent.  \n  \n## alertexpression  \n  \nApply separate alert rules to several series with one `alert-style` in `[widget]` settings.  \n  \n## alertrowstyle  \n  \n## alertstyle  \n  \nVertex style upon breach of `alert-expression` condition.  \n  \n## alias  \n  \nCreate a unique series designation to pass data to other series.  \n  \n## align  \n  \nDetermine a uniform start time for all periods.  \nPossible values: `START_TIME`, `END_TIME`, `CALENDAR`(default), `FIRST_VALUE_TIME`.  \n  \n## arcs  \n  \n## arrowlength  \n  \nLength of the gauge arrow, measured as `%` of radius.  \n  \n## arrows  \n  \nArrows on the directed edges.  \n  \n## attribute  \n  \nUse as an alternative to `metric` setting.  \nIf both `table` and `attribute` are defined, `metric = table,attribute`.  \n  \n## audioalert  \n  \nPlay an audio file when `alert-expression` evaluates to `true`.  \nStore audio files in the `opt/atsd/atsd/conf/portal` directory of your ATSD installation.  \nSet the following path in the `audio-alert` setting: `/portal/resource/alarm.oog`.  \nFiles in this directory must always be references with the `/resource/` before the file name.  \nAudio is only played on `true` to `false` changes or vise versa.  \nAudio is played once, on initial alert occurrence.  \nSupported audio alert formats: `.mp3`, `.oog`, `.wav`.  \n  \n## audioonload  \n  \nPlay audio alert on initial widget load if `audio-alert` setting contains path to audio file and `audio-onload = true`.  \n  \n## author  \n  \n## autoheight  \n  \nCalculate row height automatically based on vertical space allocated to the widget and the number of rows.  \n  \n## autopadding  \n  \nAdd padding if labels overflow container.  \n  \n## autoperiod  \n  \nAutomatically define the aggregation period for the series based on the chosen time interval.  \n  \n## autoscale  \n  \nAutomatically scale the visible portion of the graph.  \n  \n## axis  \n  \nAssign series axis.  \n  \n## axistitle  \n  \nLabel axes.  \n  \n## axistitleleft  \n  \nLabel left axis.  \n  \n## axistitleright  \n  \nLabel right axis.  \n  \n## barcount  \n  \nNumber of bars or distributions.  \nAlternatively control bar count from mouseover menu in the upper right corner of the widget.  \n  \n## batchsize  \n  \nMaximum number of series in one batch request to the server.  \nIf `0` is specified, the limit is not set.  \nApplies when `batch-update = true`.  \n  \n## batchupdate  \n  \nSending data queries to the server in batches with size specified in `batch-size` setting.  \nIf enabled, series for which the request has failed are requested separately from successfully updated series.  \n  \n## borderwidth  \n  \nOffset between gauge ring and parent container,measured as `%` of radius.  \n  \n## bottomaxis  \n  \nValues displayed on the bottom axis.  \n  \n## bundle  \n  \nHierarchical contraction of edges ([Danny Holten](https://www.researchgate.net/publication/6715561_Hierarchical_Edge_Bundles_Visualization_of_Adjacency_Relations_in_Hierarchical_Data) algorithm).  \n  \n## bundled  \n  \nHierarchical contraction of edges ([Danny Holten](https://www.researchgate.net/publication/6715561_Hierarchical_Edge_Bundles_Visualization_of_Adjacency_Relations_in_Hierarchical_Data) algorithm).  \n  \n## buttons  \n  \nAdd buttons to the widget header. The buttons are visible on mouse-over.  \n`update` stops/resumes the loading of new data into the widget.  \n`reset` is supported only in the table widget. The parameter resets column sorting to the initial order.  \n  \n## cache  \n  \nRetrieve the most recent value from the HBase **Last Insert** table.  \nThis setting is useful for widget which only display one value: Gauge, Bar, Text, Treemap, etc.  \n  \n## capitalize  \n  \nCapitalize column names. Default: `true`.  \n  \n## caption  \n  \nText displayed on top of the gauge.  \nCaption can be split into multiple lines.  \nHTML markup is supported.  \n  \n## captionstyle  \n  \nCSS style applied to caption.  \n  \n## case  \n  \nDefine case for column headers.  \n  \n## centralizecolumns  \n  \nPosition columns between ticks instead of directly above ticks.  \n  \n## centralizeticks  \n  \nPosition time and date markers between instead of under ticks.  \n  \n## changefield  \n  \nWidget setting changed upon drop-down list selection. To update the widget subsection setting, use `{section-name}.{setting-name}` syntax. For example, `series.entity` or `keys.mq_manager_name`.  \n  \n## circle  \n  \nDisplays background circle.  \n  \n## class  \n  \nApply Unix style with black background.  \n  \n## collapsible  \n\n## columnalertexpression  \n  \nBoolean expression to apply conditional style to bars. The CSS style must be specified in the `column-alert-style` setting.\nThe `value` field contains the total of all series in the given bar.  \n  \n## columnalertstyle  \n  \nCSS style applied to the bar rectangle if `column-alert-expression` is `true`.  \n  \n## columnlabelformat  \n  \nColumn label pattern containing text and placeholders.\nSupported placeholders: `entity`, `metric`, `tagName`, `tagValue`, `tags.{tag-name}`, `statistics`, `period`.  \n  \n## columnentity  \n  \nChange the name of column `entity` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\nHide `column-entity` with `column-entity = null`.  \n  \n## columnmetric  \n  \nChange the name of column `metric` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\nHide `column-metric` with `column-metric = null`.  \n  \n## columntime  \n  \nChange the name of column `time` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\nHide `column-time` with `column-time = null`.  \n  \n## columnvalue  \n  \nChange the name of column `value` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\nHide `column-value` with `column-value = null`.  \n  \n## color  \n  \nAssign a color to the series.  \n  \n## colorrange  \n  \nColor palette automatically assigned to threshold ranges.  \n  \n## colors  \n  \nRedefine default palette.  \nTable, Console, Property, Text, and Page widgets do not support this setting.  \nDefault palette is defined by the array `window.defaultColors`.  \n  \n## contextheight  \n  \nDefine the height of the context graph. Used to adjust the displayed timespan.  \n`0` by default for the widget in the main window.  \n`70` by default for the widget in the dialog window.  \n  \n## contextpath  \n  \nContext path. Default value is `api/v1`.  \n  \n## counter  \n  \n## counterposition  \n  \nCounter position.  \n  \n## currentperiodstyle  \n  \nApply CSS styles to values of the current period, such as the most recent hour, day, or week, in `column` and `column-stack` mode.  \n  \n## data  \n  \nInformation about the last time series value next to the image of the corresponding vertex.  \n  \n## datalabels  \n  \nDisplay values inside colored rectangles formatted according to [format](https://axibase.com/docs/charts/widgets/shared/#format) setting.  \n  \n## datatype  \n  \nDefine current series data type.  \n  \n## dayformat  \n  \nFormat `x` axis timestamps using Format Syntax.  \n  \n## defaultcolor  \n  \n## defaultsize  \n  \n## depth  \n  \nDepth of the displayed vertex hierarchy from `1` to the maximum depth of the vertex hierarchy plus `1`  \nFinal level corresponds to edges  \nMaximum depth of the hierarchy is default.  \n  \n## description  \n  \n## dialogmaximize  \n  \nIf enabled, the dialog window is expanded to the entire portal page.  \nDialog window can be opened by clicking on the widget header.  \n  \n## disablealert  \n  \nCancel alerts raised by the loaded page.  \n  \n## disconnectcount  \n  \nDefine average distance between time values in the series  \nIf the gap between data is greater than the defined value,a break is displayed.  \nIf `disconnect-count = 1`, the disconnect interval is equal to the mean interval.  \nSee Disconnect Count Behavior for more information.  \n  \n## disconnectednodedisplay  \n  \nShow vertices without edge.  \n  \n## disconnectinterval  \n  \nDefines maximum time gap between data during which points of the series line are connected.  \nIf the gap between data is greater than the specified interval, a break is displayed.  \n  \n## disconnectvalue  \n  \nApply disconnect value in tandem with disconnect interval or count.  \nDefine the value to be applied to disconnected areas.  \nUse this setting when ATSD is not collecting `null` values or those below a minimum threshold.  \nAdditionally, toggle display of disconnect value with **Connect Values** on left axis mouseover menu.  \n  \n## display  \n  \nDefine a rule to display series.  \nFilter series based on metric values for widgets containing many series.  \n  \n## displaydate  \n  \nDisplay the time period captured by the Time Chart.  \n  \n## displayinlegend  \n  \n## displaylabels  \n  \n## displayother  \n  \n## displaypanels  \n  \nDisplay control panels in the top left or right corners in Time and Bar charts.  \n  \n## displaytags  \n  \nDisplay a separate column for each tag in the underlying series.  \n  \n## displayticks  \n  \nDisplay ticks on the axis.  \n  \n## displaytip  \n  \nDisplay last value marker.  \n  \n## displaytotal  \n  \nDisplays the sum of rectangle sizes such as `size` setting for series.  \n  \n## displayvalues  \n  \nShow or hide bar total values.  \n  \n## downsample  \n  \nEnable [downsampling](https://axibase.com/docs/atsd/api/data/series/downsample.html#downsampling) for the current chart configuration.  \n  \n## downsamplealgorithm  \n  \nDefine [downsample algorithm](https://axibase.com/docs/atsd/api/data/series/downsample.html#algorithm) used for calculation.  \n  \n## downsampledifference  \n  \nDefine deviation between consecutive values which the database considers equivalent.  \nUse this setting to include minor deviations in downsampling.  \n  \n## downsampleratio  \n  \nDefine downsample [ratio](https://axibase.com/docs/atsd/api/data/series/downsample.html#ratio-check).  \n  \n## downsamplegap  \n  \nControl the occurrence of repeated values by defining the gap using time interval.  \nA larger gap value decreases the occurrence of repeated values.  \n  \n## downsampleorder  \n  \n## duration  \n  \nThe duration of a transaction when changing the geometry of the graph in milliseconds.  \n  \n## effects  \n  \nAnimation when changing the geometry of the graph.  \n  \n## emptyrefreshinterval  \n  \n## emptythreshold  \n  \n## enabled  \n  \nHide series in the widget legend based on expression or boolean statement.  \n  \n## endtime  \n  \nSpecifies the date and time in local or [ISO format](https://axibase.com/docs/atsd/shared/date-format.html) until which the values for the series are loaded.  \nThe setting can be overridden by each widget separately.  \nNote that `start-time` is **inclusive** and `end-time` is **exclusive**.  \nThis means that `start-time = 2017-09-14 10:00:00` includes data points that occurred exactly at `10:00:00` and later whereas `end-time = 2017-09-14 11:00:00` includes data points that occurred up to `10:59:59`, excluding points that occurred at `11:00:00`.  \nThe setting supports [calendar](https://axibase.com/docs/atsd/shared/calendar.html) keywords.  \n  \n## endworkingminutes  \n  \n## entities  \n  \nDefine multiple entities with one setting.  \nIf both `entity` and `entities` are specified, the former takes precedence.  \nSupport `?` and `*` [wildcards](https://axibase.com/docs/charts/syntax/wildcards.html)|  \n  \n## entity  \n  \nDefine the Entity.  \nSupports `?` and `*` [wildcards](https://axibase.com/docs/charts/syntax/wildcards.html)  \n  \n## entityexpression  \n  \nApply server-side filter to all series based on entity names, tags, and fields.  \n  \n## entitygroup  \n  \nDefine an Entity Group.  \n  \n## entitylabel  \n  \nOverride grouped series legend when `group=entity`.  \n  \n## errorrefreshinterval  \n  \nDefine the wait period after ATSD handles a server processing error before refreshing data.  \n  \n## exactmatch  \n  \nIgnore series with tags, other than those specified in the series configuration.  \n  \n## expand  \n  \nExpand all segments or an individual segment.  \nDouble-click modifies `expand` setting interactively.  \n  \n## expandpanels  \n  \nDisplay control panels in the top left or right corners in Time chart.  \n  \n## expandtags  \n  \nShow response tags as columns.  \nUseful when exact tags are not known in advance.  \n  \n## expiretimespan  \n  \n## fillvalue  \n  \nInterpolates a missing value for the given timestamp when merging multiple series with different timestamps.\nPossible values: `false`, `true`.  \n  \n## filterrange  \n  \n## fitsvg  \n  \n## fontscale  \n  \nRatio of font height to row height when `auto-height = true`.  \nMinimum row height is `10px`, maximum row height is `64px`.  \n  \n## fontsize  \n  \nFont size settings as a whole number.  \n  \n## forecastarimaauto  \n  \nGenerate an ARIMA forecast using optimal settings.\nIf `true`, ARIMA parameters `p` and `d` are selected automatically based on scoring.\nIf set to `false`, parameters `p`, `d` are required.\n  \n## forecastarimaautoregressioninterval  \n  \nAlternative parameter for `p` where `p` is calculated as `auto-regression-interval / interval`.\nSpecified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\nFormat: `count time_unit`.  \n  \n## forecastarimad  \n  \nIntegration parameter `d`, a number of `0` or `1`.  \n  \n## forecastarimap  \n  \nAuto-regression parameter `p`.  \n  \n## forecasthorizoninterval  \n  \nGenerate a forecast for the specified interval into the future starting with last sample of the loaded series.\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).  \n  \n## forecasthorizonlength  \n  \nGenerate a forecast for the specified number of samples into the future.  \n  \n## forecasthorizonendtime  \n  \nGenerate a forecast starting with last sample of the loaded series and until the specified date in the future.  \n  \n## forecasthorizonstarttime  \n  \nGenerate a forecast for the specified interval into the future starting with specified date instead of the last sample of the loaded series.  \n  \n## forecasthwauto  \n  \nGenerate a Holt-Winters forecast using optimal settings.\nIf `true` Holt-Winters parameters `alpha`, `beta`, `gamma` are selected automatically based on scoring.\nIf set to `false`, parameters `alpha`, `beta`, `gamma` are required.  \n  \n## forecasthwalpha  \n  \nHolt-Winters `alpha` (data) parameter.\nPossible values: `[0, 1]`.  \n  \n## forecasthwbeta  \n  \nHolt-Winters `beta` (trend) parameter.\nPossible values: `[0, 1]`.  \n  \n## forecasthwgamma  \n  \nHolt-Winters `gamma` (seasonality) parameter.\nPossible values: `[0, 1]`.  \n  \n## forecasthwperiod  \n  \nSeries period (seasonality) parameter.\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\nFormat: `count time_unit`.\n  \n## forecastinclude  \n  \nInclude input series, forecast or reconstructed series into response.  \n  \n## forecastname  \n  \n[Forecast name](https://axibase.com/docs/atsd/api/data/series/query.html#forecast-filter) when `data-type` setting is set to  `forecast`, `forecast_deviation`, `lower_confidence`, `upper_confidence`.\nIf no forecast name is specified, the [default series forecast](https://axibase.com/docs/atsd/forecasting/#persistence-settings) is loaded.  \n\n## forecastscoreinterval  \n  \nInterval for scoring the produced forecasts ending with the last sample of the input series.\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\nFormat: `count time_unit`.\nFor SSA, the default value is the minimum of `forecast-horizon-interval` and `1/3` of the loaded series duration.\nFor ARIMA and Holt-Winters the default value is `1/4` of the loaded series duration.  \n  \n## forecastssa  \n  \nGenerate an SSA (singular spectrum analysis) forecast.  \n  \n## forecastssadecomposeeigentriplelimit  \n  \nMaximum number of eigenvectors extracted from the trajectory matrix during the singular value decomposition (SVD).\nPossible values: between `0` and `500`.\nIf set to `0`, the count is determined automatically.  \n  \n## forecastssadecomposemethod  \n  \nThe algorithm applied in singular value decomposition (SVD) of the trajectory matrix to extract eigenvectors.\nPossible values: `FULL`, `TRUNCATED`, `AUTO`.  \n  \n## forecastssadecomposesingularvaluethreshold  \n  \nThreshold, specified in percent, to discard small eigenvectors. Eigenvector with eigenvalue λ is discarded if √λ is less than the specified % of √ sum of all eigenvalues.\nDiscard if `√λ ÷ √ (∑ λi) < threshold ÷ 100`.\nIf threshold is `0`, no vectors are discarded.\nPossible values: `[0, 100)`.  \n  \n## forecastssadecomposewindowlength  \n  \nHeight (row count) of the trajectory matrix, specified as the % of the sample count in the input series.\nPossible values: `(0, 50]`.  \n  \n## forecastssaforecastbase  \n  \nInput series to which the recurrent formula is applied when calculating the forecast.\nPossible values: `RECONSTRUCTED`, `ORIGINAL`.  \n  \n## forecastssaforecastmethod  \n  \nForecast calculation method.\nPossible values: `RECURRENT`, `VECTOR`.  \n  \n## forecastssagroupautocount  \n  \nMaximum number of eigenvector groups. The eigenvectors are placed into groups by the clustering method in Auto mode, or using by enumerating eigenvector indexes in Manual mode. The groups are sorted by maximum eigenvalue in descending order and are named with letters `A`, `B`, `C` etc.\nIf set to `0`, only one group is returned.  \n  \n## forecastssagroupautoclusteringmethod  \n  \nAlgorithm used to place eigenvectors into groups.\nPossible values: `HIERARCHICAL`, `XMEANS`, or `NOVOSIBIRSK`.  \n  \n## forecastssagroupautoclusteringparams  \n  \nDictionary (map) of parameters required by given clustering method.  \n  \n## forecastssagroupautostack  \n  \nBuild groups recursively, starting with the group `A` with maximum eigenvalue, to view the cumulative result of incrementally added eigenvectors. In enabled, group `A` contains its own eigenvectors. Group `B` contains its own eigenvectors as well as eigenvectors from group `A`. Group `C` includes its own eigenvectors as well as eigenvectors from group `A` and `B`, and etc.  \n  \n## forecastssagroupautounion  \n  \nJoin eigenvectors from automatically created groups into custom groups. Multiple custom groups are separated using comma. Groups within the custom group are enumerated using semi-colon as a separator or hyphen for range. For example, custom group `A;B;D` contains eigenvectors from automatic groups `A`, `B` and `D`. Custom group `A;C-E` contains eigenvectors from automatic groups `A`,`C`,`D`,`E`.  \n  \n## forecastssagroupmanualgroups  \n  \nJoin eigenvectors using their index into custom groups. Multiple custom groups are separated using comma. Eigenvectors within the same group are enumerated using semi-colon as a separator or hyphen for range. For example, custom group `1;3-6` contains eigenvectors with indexes `1`, `3`, `4`, `5` and `6`.  \n  \n## forecastssareconstructaveragingfunction  \n  \nAveraging function to calculate anti-diagonal elements of the reconstructed matrix.\nPossible values: `AVG`, `MEDIAN`.  \n  \n## forecastssareconstructfourier  \n  \nUse Fourier transform in the reconstruction stage and in SVD (singular value decomposition).  \n  \n## forecaststyle  \n  \nCSS styles applied to forecasts in `column` and `column-stack` modes.  \n  \n## format  \n  \nDisplay series with the appropriate unit of measurement.  \nSee [Format Settings](https://axibase.com/docs/charts/syntax/format-settings.html) for complete syntax.  \n  \n## formataxis  \n  \nValue axis format.  \n  \n## formatcounter  \n  \nCounter format.  \n  \n## formatheaders  \n  \nDisable column name formatting.  \n  \n## parsenumbers  \n  \nIf `true`, column values are processed as numbers.\n  \n## formatsize  \n  \nFormat size setting values.  \n  \n## formattip  \n  \nLast value format.  \n  \n## frequency  \n  \n## gradientcount  \n  \nSpecify the number of gradient colors between each color in Color Range.  \n  \n## gradientintensity  \n  \nColor intensity of the first and the last sector in each range.  \n  \n## groupfirst  \n  \nControl the sequence of aggregation and grouping. If set to `true`, grouping is performed before aggregation.  \n  \n## groupinterpolate  \n  \nInterpolate grouped values.  \n  \n## groupinterpolateextend  \n  \nFill missing leading and trailing periods with `NEXT` and `PREVIOUS` values.  \n  \n## groupkeys  \n  \nCount messages by period with a comma-separated list of keys including `entity`, `type`, `source`, and custom tags.  \nSupported in server aggregation mode only: `server-aggregate = true`.  \n  \n## grouplabel  \n  \n## groupperiod  \n  \nAssign a group period to a series for computing [group](https://axibase.com/docs/atsd/api/data/series/group.html#group-processor) statistics.  \n  \n## groupstatistic  \n  \nAssign a group statistic function to the series.  \nSee [Aggregators](https://axibase.com/docs/charts/configuration/aggregators.html) for more information.  \n  \n## headerstyle  \n  \nCustomize widget header style.  \nGroup diverse portals visually.  \n`background-color`: Replace color, retain pattern.  \n`background`: Replace both color and pattern.  \n`display: none`: Hide header.  \n`header-style = return \'background: white;\';`: Remove all styles.  \n  \n## heightunits  \n  \nFunctionality depends on section:\n\n* `[configuration]` - number of rows in the portal. Default value: 4.\n\n* `[widget]` - number of rows the widget occupies. Default value: 1.  \n  \n## hidden  \n  \n## hidecolumn  \n  \nExpression based setting.  \nHide particular columns if all cell values in a column satisfy the condition or if column name matches the pattern.  \n  \n## hideemptycolumns  \n  \nShow or hide columns with no data.  \n  \n## hideemptyseries  \n  \nHide series for which no data exists or data whose validity is expired.  \n  \n## hideifempty  \n  \n## horizontal  \n  \nDisplay bars horizontally.  \n  \n## horizontalgrid  \n  \nHide horizontal grid.  \n  \n## hourformat  \n  \n## icon  \n  \nName of the icon displayed in the cell.  \n  \n## iconalertexpression  \n  \nApply alert rules to the icon.  \n  \n## iconalertstyle  \n  \nAlert styles applied to the icon when the `alert-expression` is satisfied.  \n  \n## iconcolor  \n  \nColor of the icon.  \n  \n## iconposition  \n  \nPosition of the icon relative to the series value.  \n  \n## iconsize  \n  \nAutomatically resize icons to occupy all available space except the area used by the value and label.  \nIf `icon-size` is not set, icon is scaled proportionally to the font height which can be controlled using the `min-font-size` and `max-font-size` settings.  \n  \n## id  \n  \nUnique name of the vertex.  \n  \n## interpolate  \n  \nInterpolate missing aggregation periods.  \n  \n## interpolateboundary  \n  \nDefine [interpolation behavior](https://axibase.com/docs/atsd/api/data/series/interpolate.html#boundary) for leading and trailing values.  \n  \n## interpolateextend  \n  \nInterpolate leading and trailing periods with `NEXT` or `PREVIOUS` values, respectively.  \n  \n## interpolatefill  \n  \nInterpolate values outside of the selection interval.  \n  \n## interpolatefunction  \n  \nDefine interpolation function for entire series, instead of only missing values.  \n  \n## interpolateperiod  \n  \nDefine the period for interpolated values.  \n  \n## intervalformat  \n  \n## join  \n  \nPerforms join by `entity` and `type`.  \n`join = entity` performs join by `entity` only.  \n  \n## key  \n  \nKey name.  \nIf set configuration of column can be sorted by name.  \nIf the name of the key is the property received from the server object, the value of the cell by default is the value of the property.  \n  \n## keytagexpression  \n  \nExpression for matching properties with specified keys and tags.  \nKeys are accessed with `keys.{key-name}` and tags with `tags.{tag-name}`.  \n  \n## label  \n  \nText on label.  \n`element-id` by default.  \n  \n## labelformat  \n  \nLabel series using text and placeholders.  \nSee [Label Formating](https://axibase.com/docs/charts/syntax/label-formatting.html#label-formatting).  \n  \n## last  \n  \nReturn only records with the update time equal to the maximum update time of matched records.  \n  \n## lastmarker  \n  \nHide most recent series value marker.  \n  \n## lastvaluelabel  \n  \n## layout  \n  \nForm of the widget in `non-hierarchy` mode.  \n  \n## leftaxis  \n  \nValues displayed on the left-axis.  \n`density`: Scales the height of the bars such that the sum of their areas equals `1`.  \n`fractions`: Scales the height of the bars such that the sum of their heights equals `1`.  \n`frequency`: Scales the height of the bars such that each bar height is equal to the number of observations in the series. Thus, the sum of the heights is equal to the total number of observations  \n  \n## leftunits  \n  \nSet absolute offset from the left, in units.  \n  \n## legendlastvalue  \n  \n## legendposition  \n  \nModify legend locations for widgets which contain a legend.  \nBy default, legend position is `hidden` in Time Chart.  \nLegend position is set to `top` on Dialog Chart.  \nCombine values to define corners: `legend-position = bottomright`  \n  \n## legendticks  \n  \n## legendvalue  \n  \n## limit  \n  \nMaximum number of returned records.  \n  \n## linearzoom  \n  \n## linkalertexpression  \n  \n## linkalertstyle  \n  \nStyle of edges in the event of an `alert-expression` being triggered and tied to the time series.  \n  \n## linkanimate  \n  \nAnimation of directed vertices.  \n  \n## linkcolorrange  \n  \nColor scheme for `link-threshold`.  \n  \n## linkcolors  \n  \nColor to indicate the threshold of time series.  \nAttached to the edges and separated by commas.  \n  \n## linkdata  \n  \nSeries last value next to the `link-label`.  \n  \n## linklabels  \n  \nDisplay edge labels.  \n  \n## linklabelzoomthreshold  \n  \nParameter value is a value of scale when labels appear based on edge threshold.  \n`value < 1`: Labels disappear on zoom out.  \n`value > 1`: Labels appear on zoom in.  \n  \n## links  \n  \nList of edges associated with this series is defined by an ID or edge ID of the corresponding vertices with a hyphen.  \nWhen edge ID contains a hyphen, it must be shielded with `""` double quotes.  \n  \n## linkthresholds  \n  \nThreshold for time series attached to the edges.  \nSupports both JavaScript and `percentile` functions.  \n  \n## linkvalue  \n  \n## linkwidthorder  \n  \nSort links according to their width.  \n  \n## linkwidths  \n  \nWidth to indicate the thresholds of the time series tied to the edges and separated by commas or spaces.  \n  \n## loadfuturedata  \n  \nLoad future series values.  \nImport forecasts generated by third-party tools such as R language.  \n  \n## markerformat  \n  \n## markers  \n  \nHide series marker values.  \n  \n## maxfontsize  \n  \nMaximum caption font size.  \nFont size cannot scale above set size.  \n  \n## maximum  \n  \n## maxrange  \n  \nDefine maximum range displayed on the left axis.  \nActual range can differ based on loaded data samples.  \n  \n## maxrangeforce  \n  \nApply a forced range to the left axis, regardless of loaded data.  \n  \n## maxrangeright  \n  \nDefine maximum range displayed on the right axis.  \nActual range can differ based on loaded data samples.  \n  \n## maxrangerightforce  \n  \nApply a forced range to the right axis, regardless of loaded data.  \n  \n## maxringwidth  \n  \nThe maximum allowed width of the vertex ring from the current minimal value of the ring width.  \n  \n## maxthreshold  \n  \n## menu  \n  \n## mergecolumns  \n  \nKey by which columns are grouped into rows.  \n  \n## mergefields  \n  \nCombine series into series grouped based on field. Applies only in `multiple-series` mode. Series which use [wildcard](https://axibase.com/docs/charts/syntax/wildcards.html), `entities`, `entityGroup` settings or comma-separated tag values are treated as multiple series by default.  \nPossible values:  \n`entity`: All series with the same entity are combined.  \n`{tag-name}`: All series with the same value of tag `{tag-name}` are combined.  \n  \n## methodpath  \n  \nData API method path. Default value is specific for each data type: `/series/query`, `/properties/query`, `/messages/query`, `/alerts/query`.  \n  \n## metric  \n  \nDefine the Metric.  \n  \n## metriclabel  \n  \nOverride grouped series legend when `group=metric`.  \n  \n## mincaptionsize  \n  \n## minfontsize  \n  \nMinimum caption font size.  \nFont size cannot scale below set size.  \n  \n## minimum  \n  \n## minorticks  \n  \nNumber of minor ticks between major ticks.  \n  \n## minrange  \n  \nDefine minimum range displayed on the left axis.  \nActual range can differ based on loaded data samples.  \n  \n## minrangeforce  \n  \nDefine strict minimum value of the left or right axis. If the value of a series does not fall within the set boundaries set by these value gaps, the series is not displayed.  \n  \n## minrangeright  \n  \nDefine minimum range displayed on the right axis.  \nActual range can differ based on loaded data samples.  \n  \n## minrangerightforce  \n  \nApply a forced range to the right axis, regardless of loaded data.  \n  \n## minringwidth  \n  \nThe minimum allowed width of the vertex ring.  \nThe value is from `0` to a maximum permissible value of the ring width.  \n  \n## minseverity  \n  \n## minthreshold  \n  \n## mode  \n  \nApply mode setting to both or either `[widget]` and `[series]` settings.  \n  \n## movingaverage  \n  \nEnable moving average to set aggregation period based on a sliding window ending with the current time.  \nDisable moving average to set aggregation period based on calendar.  \n  \n## multiplecolumn  \n  \nApplies to [wildcard](https://axibase.com/docs/charts/syntax/wildcards.html#wildcards) series.  \nDefault value: `false`.  \nIf `true`, series with the same entity and tags are grouped in the same column.  \nThis applies to derived series which are placed in the same column alongside the underlying series.  \n  \n## multipleseries  \n  \n## negativestyle  \n  \nApply CSS styles to negative values of a series in `column` or `column-stack` mode.  \n  \n## nodealertexpression  \n  \n## nodealertstyle  \n  \nStyle of vertices, in the event of an `alert-expression` being triggered tied to the time series.  \n  \n## nodecollapse  \n  \nCollapse vertex sectors when clicked.  \n  \n## nodecolors  \n  \nColor to indicate the threshold of time series that are bound to vertices and separated by commas.  \n  \n## nodeconnect  \n  \nConnect vertices on the perimeter.  \n  \n## nodedata  \n  \n## nodelabels  \n  \nDisplay vertex labels.  \n  \n## nodelabelzoomthreshold  \n  \nParameter value is a value of scale when labels appear based on vertex threshold  \n`value < 1`: Labels disappear on zoom out.  \n`value > 1`: Labels appear on zoom in.  \n  \n## noderadius  \n  \nRadius of the vertex in pixels.  \nNot valid in `hierarchy` mode.  \n  \n## noderadiuses  \n  \nRadii of the lighting for the display of the time series `thresholds` linked to the vertices and separated by commas or spaces.  \n  \n## nodes  \n  \nList of vertices associated with this series.  \nWhen the vertex id contains a hyphen, it must be shielded with `""` double quotes.  \n  \n## nodethresholds  \n  \nThreshold for time series tied to vertices.  \nSupports JavaScript, `percentile` functions, or can be set as an array.  \n  \n## nodevalue  \n  \n## offset  \n  \nDifference, in milliseconds, between maximum update time of matched records and update time of the current record.  \nIf the difference exceeds `offset`, the record is excluded from results.  \n  \n## offsetbottom  \n  \n## offsetleft  \n  \n## offsetright  \n  \n## offsettop  \n  \n## onchange  \n  \nIf specified, field is evaluated instead of default `onchange` behavior. Either `onchange`, or `change-field` is required for any drop-down list.  \n  \n## onclick  \n  \nSet interaction behavior for user click.  \nFilter the tables based on the clicked values of a specific column.  \n  \n## onseriesclick  \n  \nSpecifies an action to be performed when the user selects a series. For a Calendar widget, it is a row of summarization periods.  \n  \n## onseriesdoubleclick  \n  \nDisable [double click functionality](https://axibase.com/docs/charts/widgets/pie-chart/#on-series-double-click) in the widget.  \n  \n## options  \n  \nComma-separated list of option values.  \n  \n## padding  \n  \nOffset from the edge of the container in pixels.  \n  \n## paletteticks  \n  \nDisplay legend labels.  \n  \n## parent  \n  \nID of parent vertex.  \n  \n## path  \n  \n## percentilemarkers  \n  \nPercentiles marker position.  \n  \n## percentiles  \n  \nPercentiles displayed when `top-axis = percentiles`.  \nMultiple percentiles must be separated with commas.  \n  \n## period  \n  \nDefine period for [aggregator](https://axibase.com/docs/atsd/api/data/series/aggregate.html#aggregate-processor) functions which require one.  \n  \n## periods  \n  \n## pinradius  \n  \nRadius of the inner circle holding the arrow, measured as `%` of radius.  \n  \n## pointerposition  \n  \nDefine the location of the final value pointer.  \n  \n## position  \n  \nPosition of the column relative to other columns in the table.  \n  \n## primarykey  \n  \n## principal  \n  \n## rangemerge  \n  \nIf threshold is not defined, different set of ranges is computed for each series based on observed min and max values within the loaded timespan.  \n`range-merge` computes a single set of ranges for all series in the widget by using `min` and `max` for all loaded series.  \n  \n## rangeoffset  \n  \nAdds an offset to the left and right of the dataset, set in pixels.  \nInactive by default.  \n  \n## rangeselectend  \n  \n## rangeselectstart  \n  \n## rate  \n  \nCompute the difference between consecutive sample per unit of time, or [rate period](https://axibase.com/docs/atsd/api/data/series/rate.html#rate-period).  \nCompute the underlying rate of change when a metric measures a continuously incrementing counter.  \n  \n## ratecounter  \n  \nCompute the difference between consecutive samples per unit of time.  \n  \n## ratio  \n  \n## refreshinterval  \n  \nDefine the period in seconds that ATSD waits before refreshing data with new samples.  \n  \n## replaceunderscore  \n  \nReplace underscores with whitespace in column names.  \n  \n## replacevalue  \n  \nModify or filter series values.  \nThe example expression filters all values less than `50` from the series.  \nAggregators are not supported.  \n  \n## responsive  \n  \nAdjust font size based on widget dimensions.  \nFont size is reduced proportionally to widget size.  \n  \n## retaintimespan  \n  \n## retryrefreshinterval  \n  \nDefine the wait period after ATSD receives an empty sample to retry data refresh.  \n  \n## rightaxis  \n  \nValues displayed on the right-axis.  \n  \n## ringwidth  \n  \nWidth of the colored ring area, measured as `%` of radius.  \n  \n## rotatelegendticks  \n  \n## rotatepaletteticks  \n  \nRotate legend labels.  \n  \n## rotateticks  \n  \nRotate `x` axis labels.  \nSet in degrees.  \n`true` rotates by `90` degrees.  \n  \n## rowalertstyle  \n  \nStyles assigned to the whole row.  \nCan be specified as JavaScript code.  \n  \n## rowstyle  \n  \nStyle assigned to the entire row specified as JavaScript code.  \nIn the syntax example all alerts with severity less than `7` are hidden.  \nFilter data prior display in the widget.  \n  \n## rule  \n  \nName of rule for which alerts are filtered.  \n  \n## scale  \n  \nScales the width and height of the target page.  \nValue is the factor by which the page scales.  \n  \n## scalex  \n  \nScale a widget or axis.  \nNot supported in all browsers.  \n  \n## scaley  \n  \n## script  \n  \n## selectormode  \n  \nControls how pie segments react to click interaction. Possible Settings: highlight, expand. Highlight – double click highlights the selected pie segment, other segments are greyed out. Expand – double click expands the selected pie segment.  \n\n## series\n  \n## serieslabels  \n  \nDisplay values for each pie slice (series) as a tick.  \nSet to an expression that changes the label type depending on series value.  \n  \n## serieslimit  \n  \nDefine the maximum number of series retrieved from the database, to prevent the client or server from processing excessive series.  \n  \n## seriestype  \n  \nUse this setting in `stack` mode as a grouping parameter.  \nSeries of like types are grouped together or summed.  \nSet a unique series type to achieve fill effect without applying `stack` mode.  \n  \n## seriesvalue  \n  \n## serveraggregate  \n  \n## severity  \n  \nSeverity rating of alerts displayed in the console:  \nUndefined: `0`  \nUnknown: `1`  \nNormal: `2`  \nWarning: `3`  \nMinor: `4`  \nCritical: `6`  \nFatal: `7`.  \n  \n## severitystyle  \n  \nControl alert behavior. Highlight a single column or entire row.  \n  \n## showtagnames  \n  \nDisplay all entity tags.  \nOnly valid for tables with `tag` column.  \n  \n## size  \n  \nThe relative size of the series rectangle.  \n`1` by default.  \nSet to a series value by referring to `alias`.  \nSet to the current value of the series using `value`.  \n  \n## sizename  \n  \nTitle for for `display-total`.  \nDisplayed after `Total`.  \nFor example: `Total sum`.  \n  \n## smooth  \n  \nWeighted [averaging](https://axibase.com/docs/atsd/api/data/series/smooth.html) function applied to window samples.  \n  \n## smoothcount  \n  \nNumber of samples in the window.  \n  \n## smoothfactor  \n  \nWeighting parameter used by `EMA` function. If specified, must be `>0 and <1`.  \n  \n## smoothincompletevalue  \n  \nSample value returned if the window is not full.  \n  \n## smoothinterval  \n  \nWindow duration interval.  \n  \n## smoothminimumcount  \n  \nMinimum number of samples in the window.  \n  \n## smoothrange  \n  \nWeighting parameter used by `EMA` function.  \n  \n## sort  \n  \nSort console based on one or more columns.  \nAdditional ascending `ASC` or descending `DESC` parameter is accepted.  \n  \n## source  \n  \nSpecify the source of records.  \n  \n## stack  \n  \nDisable series grouping to display each series in a separate column.  \n  \n## starttime  \n  \nSpecifies the date and time in local or [ISO format](https://axibase.com/docs/atsd/shared/date-format.html) from which the values for the series are loaded.  \nThe setting can be overridden by each widget separately.  \nNote that `start-time` is **inclusive** and `end-time` is **exclusive**.  \nThis means that `start-time = 2017-09-14 10:00:00` includes data points that occurred exactly at `10:00:00` and later whereas `end-time = 2017-09-14 11:00:00` includes data points that occurred up to `10:59:59`, excluding points that occurred at `11:00:00`.  \nThe setting supports [calendar](https://axibase.com/docs/atsd/shared/calendar.html) keywords.  \n  \n## startworkingminutes  \n  \n## statistic  \n  \nApply aggregation statistical functions.  \nSee [Aggregators](https://axibase.com/docs/charts/configuration/aggregators.html) for more information.  \n  \n## statistics  \n  \n## stepline  \n  \nConnect neighboring samples using a step line instead of one which is linearly interpolated.  \nToggle step line mode by changing `y` axis controls displayed on mouseover.  \n  \n## style  \n  \nRender forecast as a solid line instead of dashed line.  \n  \n## summarizeperiod  \n  \nPeriod by which loaded time series data is split.  \n  \n## summarizestatistic  \n  \nStatistical function applied to values within each period.  \n  \n## table  \n  \nUse as an alternative to `metric` setting.  \nIf both `table` and `attribute` are defined, `metric = table,attribute`.  \n  \n## tableheaderstyle  \n  \nCustom CSS style applied to table header, including a style to hide the header.  \n  \n## tagexpression  \n  \nApply server-side filtering based on [series tags](https://axibase.com/docs/atsd/api/meta/metric/series-tags.html).  \n  \n## tagoffset  \n  \nDifference, in milliseconds, between update time of the current record and update time of the tag field.  \nIf the difference exceeds `tag-offset`, the tag field is excluded from tags object.  \n  \n## tagsdropdowns  \n  \n## tagsdropdownsstyle  \n  \n## tension  \n  \nThe degree curvature of edges.  \nCorresponds to the parameter `C` in the formula for the cardinal spline.  \nVaries from `0` to `1`, `0` corresponds to straight edges.  \n  \n## thresholds  \n  \nDefines the threshold values.  \nBy default the mean value all metrics for the whole time-span is chosen as the threshold.  \nSet to the rate of change (`delta`) of series contained in the widget by referring to `alias`.  \n  \n## ticks  \n  \nNumber of major ticks on gauge axis.  \n  \n## ticksright  \n  \nControl the number of tick marks on the right axis.  \n  \n## tickstime  \n  \nControl the number of tick marks on the time (`x`) axis.  \n  \n## timeoffset  \n  \nOffset time series day into either the past or future based on sign.  \nCompare day from today to the same data from some ago.  \n`time-offset > 0`: Offset into the past.  \n`time-offset < 0`: Offset into the future.  \nUse on either `[widget]` or `[series]` level settings.  \n  \n## timespan  \n  \nDefine data load interval.  \n  \n## timezone  \n  \nSet the time zone for the data being loaded into the portal. Only the `UTC` option is supported.  \nIf `UTC` is not set, the portal displays dates in the local time zone.  \nIf `UTC` is set, `start-time` and `end-time` settings specified in local format are evaluated based on the UTC time zone.  \n  \n## title  \n  \n## tooltip  \n  \nTooltip for the `[other]` section displayed upon mouseover.  \n  \n## topaxis  \n  \nValues displayed on the top axis.  \n  \n## topunits  \n  \nSet absolute offset from the top, in units.  \n  \n## totalsize  \n  \nMaximum size of all rectangles combined  \n  \n## totalvalue  \n  \nDefine the total value explicitly, otherwise it is computed as the sum of all series values.  \n`total-value` can be calculated by referencing other series similar to computed series.  \n  \n## transformationorder  \n  \n[`transformation-order`](https://axibase.com/docs/atsd/api/data/series/query.html#transformations) controls the sequence of data modification procedures.\nDefault sequence: `interpolate`, `group`, `rate`, `aggregate`, `smooth`, `downsample`, `forecast`, `none`.\nIf set to `none`, the default sequence is used.\nIf specified, the `server-aggregate` setting is set to `true` by default.  \n  \n## transpose  \n  \nTranspose rows and columns for a layout optimized for columnar presentation.  \n  \n## type  \n  \nDefine widget type.  \n  \n## unscale  \n  \n`CSS Selector` to determine unscaled elements in a user-loaded `svg` file.  \n  \n## updateinterval  \n  \nPolling interval at which new incremental data is requested from the server by widgets on the portal.  \nFor example `update-interval = 5 minute`.  \nThe default value is 1 minute.  \nThe setting can be overridden by each widget separately.  \nChart updates are disabled if the `endtime` parameter for the portal or the widget is set to a fixed date, for example: `endtime = 2016-06-27T00:00:00Z`.  \n  \n## url  \n  \nURL of the ATSD server. The setting is necessary if the data is loaded from an ATSD server running on a different host.  \n  \n## urlparameters  \n  \nOptional request parameters included in data API requests.  \nParameter names and values must be URL-encoded if necessary and separated by ampersand. `?` at the start of the query string is optional.  \n  \n## value  \n  \nDefine series value.  \nRetrieve the value of the underlying series identified by alias.  \n  \n## verticalgrid  \n  \nDisplay a vertical line corresponding to each percentile on the top axis.  \n  \n## widgetsperrow  \n  \nUse the `widgets-per-row` setting under `[group]` level to control the number of widgets displayed on each row.  \n  \n## width  \n  \nMaximum and minimum allowed width of the vertex ring is the percent from the radius of the circle.  \nBy default, minimum `30%`, maximum `50%`.  \n  \n## widthunits  \n  \nFunctionality depends on section:\n\n* `[configuration]` - number of columns in the portal. Default value: 6.\n\n* `[widget]` - number of columns the widget occupies. Default value: 1.  \n  \n## zoomsvg  \n  \nZoom the user-loaded `svg` file.  \n'}])});