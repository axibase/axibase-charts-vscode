(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../server/descriptions.md":
/*!*********************************!*\
  !*** ../server/descriptions.md ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"## addmeta  \\n  \\n## aheadtimespan  \\n  \\nShow an amount of time ahead of the last series value.  \\nDefine in percent.  \\n  \\n## alertexpression  \\n  \\nApply separate alert rules to several series with one `alert-style` in `[widget]` settings.  \\n  \\n## alertrowstyle  \\n  \\n## alertstyle  \\n  \\nVertex style upon breach of `alert-expression` condition.  \\n  \\n## alias  \\n  \\nCreate a unique series designation to pass data to other series.  \\n  \\n## align  \\n  \\nDetermine a uniform start time for all periods.  \\nPossible values: `START_TIME`, `END_TIME`, `CALENDAR`(default), `FIRST_VALUE_TIME`.  \\n  \\n## arcs  \\n  \\n## arrowlength  \\n  \\nLength of the gauge arrow, measured as `%` of radius.  \\n  \\n## arrows  \\n  \\nArrows on the directed edges.  \\n  \\n## attribute  \\n  \\nUse as an alternative to `metric` setting.  \\nIf both `table` and `attribute` are defined, `metric = table,attribute`.  \\n  \\n## audioalert  \\n  \\nPlay an audio file when `alert-expression` evaluates to `true`.  \\nStore audio files in the `opt/atsd/atsd/conf/portal` directory of your ATSD installation.  \\nSet the following path in the `audio-alert` setting: `/portal/resource/alarm.oog`.  \\nFiles in this directory must always be references with the `/resource/` before the file name.  \\nAudio is only played on `true` to `false` changes or vise versa.  \\nAudio is played once, on initial alert occurrence.  \\nSupported audio alert formats: `.mp3`, `.oog`, `.wav`.  \\n  \\n## audioonload  \\n  \\nPlay audio alert on initial widget load if `audio-alert` setting contains path to audio file and `audio-onload = true`.  \\n  \\n## author  \\n  \\n## autoheight  \\n  \\nCalculate row height automatically based on vertical space allocated to the widget and the number of rows.  \\n  \\n## autopadding  \\n  \\nAdd padding if labels overflow container.  \\n  \\n## autoperiod  \\n  \\nAutomatically define the aggregation period for the series based on the chosen time interval.  \\n  \\n## autoscale  \\n  \\nAutomatically scale the visible portion of the graph.  \\n  \\n## axis  \\n  \\nAssign series axis.  \\n  \\n## axistitle  \\n  \\nLabel axes.  \\n  \\n## axistitleleft  \\n  \\nLabel left axis.  \\n  \\n## axistitleright  \\n  \\nLabel right axis.  \\n  \\n## barcount  \\n  \\nNumber of bars or distributions.  \\nAlternatively control bar count from mouseover menu in the upper right corner of the widget.  \\n  \\n## batchsize  \\n  \\nMaximum number of series in one batch request to the server.  \\nIf `0` is specified, the limit is not set.  \\nApplies when `batch-update = true`.  \\n  \\n## batchupdate  \\n  \\nSending data queries to the server in batches with size specified in `batch-size` setting.  \\nIf enabled, series for which the request has failed are requested separately from successfully updated series.  \\n  \\n## borderwidth  \\n  \\nOffset between gauge ring and parent container,measured as `%` of radius.  \\n  \\n## bottomaxis  \\n  \\nValues displayed on the bottom axis.  \\n  \\n## bundle  \\n  \\nHierarchical contraction of edges ([Danny Holten](https://www.researchgate.net/publication/6715561_Hierarchical_Edge_Bundles_Visualization_of_Adjacency_Relations_in_Hierarchical_Data) algorithm).  \\n  \\n## bundled  \\n  \\nHierarchical contraction of edges ([Danny Holten](https://www.researchgate.net/publication/6715561_Hierarchical_Edge_Bundles_Visualization_of_Adjacency_Relations_in_Hierarchical_Data) algorithm).  \\n  \\n## buttons  \\n  \\nAdd buttons to the widget header. The buttons are visible on mouse-over.  \\n`update` stops/resumes the loading of new data into the widget.  \\n`reset` is supported only in the table widget. The parameter resets column sorting to the initial order.  \\n  \\n## cache  \\n  \\nRetrieve the most recent value from the HBase **Last Insert** table.  \\nThis setting is useful for widget which only display one value: Gauge, Bar, Text, Treemap, etc.  \\n  \\n## capitalize  \\n  \\nCapitalize column names. Default: `true`.  \\n  \\n## caption  \\n  \\nText displayed on top of the gauge.  \\nCaption can be split into multiple lines.  \\nHTML markup is supported.  \\n  \\n## captionstyle  \\n  \\nCSS style applied to caption.  \\n  \\n## case  \\n  \\nDefine case for column headers.  \\n  \\n## centralizecolumns  \\n  \\nPosition columns between ticks instead of directly above ticks.  \\n  \\n## centralizeticks  \\n  \\nPosition time and date markers between instead of under ticks.  \\n  \\n## changefield  \\n  \\nWidget setting changed upon drop-down list selection. To update the widget subsection setting, use `{section-name}.{setting-name}` syntax. For example, `series.entity` or `keys.mq_manager_name`.  \\n  \\n## circle  \\n  \\nDisplays background circle.  \\n  \\n## class  \\n  \\nApply Unix style with black background.  \\n  \\n## collapsible  \\n\\n## columnalertexpression  \\n  \\nBoolean expression to apply conditional style to bars. The CSS style must be specified in the `column-alert-style` setting.\\nThe `value` field contains the total of all series in the given bar.  \\n  \\n## columnalertstyle  \\n  \\nCSS style applied to the bar rectangle if `column-alert-expression` is `true`.  \\n  \\n## columnlabelformat  \\n  \\nColumn label pattern containing text and placeholders.\\nSupported placeholders: `entity`, `metric`, `tagName`, `tagValue`, `tags.{tag-name}`, `statistics`, `period`.  \\n  \\n## columnentity  \\n  \\nChange the name of column `entity` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\\nHide `column-entity` with `column-entity = null`.  \\n  \\n## columnmetric  \\n  \\nChange the name of column `metric` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\\nHide `column-metric` with `column-metric = null`.  \\n  \\n## columntime  \\n  \\nChange the name of column `time` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\\nHide `column-time` with `column-time = null`.  \\n  \\n## columnvalue  \\n  \\nChange the name of column `value` in the [Table](../streaming-table/README.md), [Property](../property-table/README.md), and [Console](../alert-console/README.md) widgets.\\nHide `column-value` with `column-value = null`.  \\n  \\n## color  \\n  \\nAssign a color to the series.  \\n  \\n## colorrange  \\n  \\nColor palette automatically assigned to threshold ranges.  \\n  \\n## colors  \\n  \\nRedefine default palette.  \\nTable, Console, Property, Text, and Page widgets do not support this setting.  \\nDefault palette is defined by the array `window.defaultColors`.  \\n  \\n## contextheight  \\n  \\nDefine the height of the context graph. Used to adjust the displayed timespan.  \\n`0` by default for the widget in the main window.  \\n`70` by default for the widget in the dialog window.  \\n  \\n## contextpath  \\n  \\nContext path. Default value is `api/v1`.  \\n  \\n## counter  \\n  \\n## counterposition  \\n  \\nCounter position.  \\n  \\n## currentperiodstyle  \\n  \\nApply CSS styles to values of the current period, such as the most recent hour, day, or week, in `column` and `column-stack` mode.  \\n  \\n## data  \\n  \\nInformation about the last time series value next to the image of the corresponding vertex.  \\n  \\n## datalabels  \\n  \\nDisplay values inside colored rectangles formatted according to [format](https://axibase.com/docs/charts/widgets/shared/#format) setting.  \\n  \\n## datatype  \\n  \\nDefine current series data type.  \\n  \\n## dayformat  \\n  \\nFormat `x` axis timestamps using Format Syntax.  \\n  \\n## defaultcolor  \\n  \\n## defaultsize  \\n  \\n## depth  \\n  \\nDepth of the displayed vertex hierarchy from `1` to the maximum depth of the vertex hierarchy plus `1`  \\nFinal level corresponds to edges  \\nMaximum depth of the hierarchy is default.  \\n  \\n## description  \\n  \\n## dialogmaximize  \\n  \\nIf enabled, the dialog window is expanded to the entire portal page.  \\nDialog window can be opened by clicking on the widget header.  \\n  \\n## disablealert  \\n  \\nCancel alerts raised by the loaded page.  \\n  \\n## disconnectcount  \\n  \\nDefine average distance between time values in the series  \\nIf the gap between data is greater than the defined value,a break is displayed.  \\nIf `disconnect-count = 1`, the disconnect interval is equal to the mean interval.  \\nSee Disconnect Count Behavior for more information.  \\n  \\n## disconnectednodedisplay  \\n  \\nShow vertices without edge.  \\n  \\n## disconnectinterval  \\n  \\nDefines maximum time gap between data during which points of the series line are connected.  \\nIf the gap between data is greater than the specified interval, a break is displayed.  \\n  \\n## disconnectvalue  \\n  \\nApply disconnect value in tandem with disconnect interval or count.  \\nDefine the value to be applied to disconnected areas.  \\nUse this setting when ATSD is not collecting `null` values or those below a minimum threshold.  \\nAdditionally, toggle display of disconnect value with **Connect Values** on left axis mouseover menu.  \\n  \\n## display  \\n  \\nDefine a rule to display series.  \\nFilter series based on metric values for widgets containing many series.  \\n  \\n## displaydate  \\n  \\nDisplay the time period captured by the Time Chart.  \\n  \\n## displayinlegend  \\n  \\n## displaylabels  \\n  \\n## displayother  \\n  \\n## displaypanels  \\n  \\nDisplay control panels in the top left or right corners in Time and Bar charts.  \\n  \\n## displaytags  \\n  \\nDisplay a separate column for each tag in the underlying series.  \\n  \\n## displayticks  \\n  \\nDisplay ticks on the axis.  \\n  \\n## displaytip  \\n  \\nDisplay last value marker.  \\n  \\n## displaytotal  \\n  \\nDisplays the sum of rectangle sizes such as `size` setting for series.  \\n  \\n## displayvalues  \\n  \\nShow or hide bar total values.  \\n  \\n## downsample  \\n  \\nEnable [downsampling](https://axibase.com/docs/atsd/api/data/series/downsample.html#downsampling) for the current chart configuration.  \\n  \\n## downsamplealgorithm  \\n  \\nDefine [downsample algorithm](https://axibase.com/docs/atsd/api/data/series/downsample.html#algorithm) used for calculation.  \\n  \\n## downsampledifference  \\n  \\nDefine deviation between consecutive values which the database considers equivalent.  \\nUse this setting to include minor deviations in downsampling.  \\n  \\n## downsampleratio  \\n  \\nDefine downsample [ratio](https://axibase.com/docs/atsd/api/data/series/downsample.html#ratio-check).  \\n  \\n## downsamplegap  \\n  \\nControl the occurrence of repeated values by defining the gap using time interval.  \\nA larger gap value decreases the occurrence of repeated values.  \\n  \\n## downsampleorder  \\n  \\n## duration  \\n  \\nThe duration of a transaction when changing the geometry of the graph in milliseconds.  \\n  \\n## effects  \\n  \\nAnimation when changing the geometry of the graph.  \\n  \\n## emptyrefreshinterval  \\n  \\n## emptythreshold  \\n  \\n## enabled  \\n  \\nHide series in the widget legend based on expression or boolean statement.  \\n  \\n## endtime  \\n  \\nSpecifies the date and time in local or [ISO format](https://axibase.com/docs/atsd/shared/date-format.html) until which the values for the series are loaded.  \\nThe setting can be overridden by each widget separately.  \\nNote that `start-time` is **inclusive** and `end-time` is **exclusive**.  \\nThis means that `start-time = 2017-09-14 10:00:00` includes data points that occurred exactly at `10:00:00` and later whereas `end-time = 2017-09-14 11:00:00` includes data points that occurred up to `10:59:59`, excluding points that occurred at `11:00:00`.  \\nThe setting supports [calendar](https://axibase.com/docs/atsd/shared/calendar.html) keywords.  \\n  \\n## endworkingminutes  \\n  \\n## entities  \\n  \\nDefine multiple entities with one setting.  \\nIf both `entity` and `entities` are specified, the former takes precedence.  \\nSupport `?` and `*` [wildcards](https://axibase.com/docs/charts/syntax/wildcards.html)|  \\n  \\n## entity  \\n  \\nDefine the Entity.  \\nSupports `?` and `*` [wildcards](https://axibase.com/docs/charts/syntax/wildcards.html)  \\n  \\n## entityexpression  \\n  \\nApply server-side filter to all series based on entity names, tags, and fields.  \\n  \\n## entitygroup  \\n  \\nDefine an Entity Group.  \\n  \\n## entitylabel  \\n  \\nOverride grouped series legend when `group=entity`.  \\n  \\n## errorrefreshinterval  \\n  \\nDefine the wait period after ATSD handles a server processing error before refreshing data.  \\n  \\n## exactmatch  \\n  \\nIgnore series with tags, other than those specified in the series configuration.  \\n  \\n## expand  \\n  \\nExpand all segments or an individual segment.  \\nDouble-click modifies `expand` setting interactively.  \\n  \\n## expandpanels  \\n  \\nDisplay control panels in the top left or right corners in Time chart.  \\n  \\n## expandtags  \\n  \\nShow response tags as columns.  \\nUseful when exact tags are not known in advance.  \\n  \\n## expiretimespan  \\n  \\n## fillvalue  \\n  \\nInterpolates a missing value for the given timestamp when merging multiple series with different timestamps.\\nPossible values: `false`, `true`.  \\n  \\n## filterrange  \\n  \\n## fitsvg  \\n  \\n## fontscale  \\n  \\nRatio of font height to row height when `auto-height = true`.  \\nMinimum row height is `10px`, maximum row height is `64px`.  \\n  \\n## fontsize  \\n  \\nFont size settings as a whole number.  \\n  \\n## forecastarimaauto  \\n  \\nGenerate an ARIMA forecast using optimal settings.\\nIf `true`, ARIMA parameters `p` and `d` are selected automatically based on scoring.\\nIf set to `false`, parameters `p`, `d` are required.\\n  \\n## forecastarimaautoregressioninterval  \\n  \\nAlternative parameter for `p` where `p` is calculated as `auto-regression-interval / interval`.\\nSpecified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\\nFormat: `count time_unit`.  \\n  \\n## forecastarimad  \\n  \\nIntegration parameter `d`, a number of `0` or `1`.  \\n  \\n## forecastarimap  \\n  \\nAuto-regression parameter `p`.  \\n  \\n## forecasthorizoninterval  \\n  \\nGenerate a forecast for the specified interval into the future starting with last sample of the loaded series.\\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).  \\n  \\n## forecasthorizonlength  \\n  \\nGenerate a forecast for the specified number of samples into the future.  \\n  \\n## forecasthorizonendtime  \\n  \\nGenerate a forecast starting with last sample of the loaded series and until the specified date in the future.  \\n  \\n## forecasthorizonstarttime  \\n  \\nGenerate a forecast for the specified interval into the future starting with specified date instead of the last sample of the loaded series.  \\n  \\n## forecasthwauto  \\n  \\nGenerate a Holt-Winters forecast using optimal settings.\\nIf `true` Holt-Winters parameters `alpha`, `beta`, `gamma` are selected automatically based on scoring.\\nIf set to `false`, parameters `alpha`, `beta`, `gamma` are required.  \\n  \\n## forecasthwalpha  \\n  \\nHolt-Winters `alpha` (data) parameter.\\nPossible values: `[0, 1]`.  \\n  \\n## forecasthwbeta  \\n  \\nHolt-Winters `beta` (trend) parameter.\\nPossible values: `[0, 1]`.  \\n  \\n## forecasthwgamma  \\n  \\nHolt-Winters `gamma` (seasonality) parameter.\\nPossible values: `[0, 1]`.  \\n  \\n## forecasthwperiod  \\n  \\nSeries period (seasonality) parameter.\\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\\nFormat: `count time_unit`.\\n  \\n## forecastinclude  \\n  \\nInclude input series, forecast or reconstructed series into response.  \\n  \\n## forecastname  \\n  \\n[Forecast name](https://axibase.com/docs/atsd/api/data/series/query.html#forecast-filter) when `data-type` setting is set to  `forecast`, `forecast_deviation`, `lower_confidence`, `upper_confidence`.\\nIf no forecast name is specified, the [default series forecast](https://axibase.com/docs/atsd/forecasting/#persistence-settings) is loaded.  \\n\\n## forecastscoreinterval  \\n  \\nInterval for scoring the produced forecasts ending with the last sample of the input series.\\nThe interval is specified as the number of [time units](https://axibase.com/docs/atsd/api/data/series/time-unit.html).\\nFormat: `count time_unit`.\\nFor SSA, the default value is the minimum of `forecast-horizon-interval` and `1/3` of the loaded series duration.\\nFor ARIMA and Holt-Winters the default value is `1/4` of the loaded series duration.  \\n  \\n## forecastssa  \\n  \\nGenerate an SSA (singular spectrum analysis) forecast.  \\n  \\n## forecastssadecomposeeigentriplelimit  \\n  \\nMaximum number of eigenvectors extracted from the trajectory matrix during the singular value decomposition (SVD).\\nPossible values: between `0` and `500`.\\nIf set to `0`, the count is determined automatically.  \\n  \\n## forecastssadecomposemethod  \\n  \\nThe algorithm applied in singular value decomposition (SVD) of the trajectory matrix to extract eigenvectors.\\nPossible values: `FULL`, `TRUNCATED`, `AUTO`.  \\n  \\n## forecastssadecomposesingularvaluethreshold  \\n  \\nThreshold, specified in percent, to discard small eigenvectors. Eigenvector with eigenvalue λ is discarded if √λ is less than the specified % of √ sum of all eigenvalues.\\nDiscard if `√λ ÷ √ (∑ λi) < threshold ÷ 100`.\\nIf threshold is `0`, no vectors are discarded.\\nPossible values: `[0, 100)`.  \\n  \\n## forecastssadecomposewindowlength  \\n  \\nHeight (row count) of the trajectory matrix, specified as the % of the sample count in the input series.\\nPossible values: `(0, 50]`.  \\n  \\n## forecastssaforecastbase  \\n  \\nInput series to which the recurrent formula is applied when calculating the forecast.\\nPossible values: `RECONSTRUCTED`, `ORIGINAL`.  \\n  \\n## forecastssaforecastmethod  \\n  \\nForecast calculation method.\\nPossible values: `RECURRENT`, `VECTOR`.  \\n  \\n## forecastssagroupautocount  \\n  \\nMaximum number of eigenvector groups. The eigenvectors are placed into groups by the clustering method in Auto mode, or using by enumerating eigenvector indexes in Manual mode. The groups are sorted by maximum eigenvalue in descending order and are named with letters `A`, `B`, `C` etc.\\nIf set to `0`, only one group is returned.  \\n  \\n## forecastssagroupautoclusteringmethod  \\n  \\nAlgorithm used to place eigenvectors into groups.\\nPossible values: `HIERARCHICAL`, `XMEANS`, or `NOVOSIBIRSK`.  \\n  \\n## forecastssagroupautoclusteringparams  \\n  \\nDictionary (map) of parameters required by given clustering method.  \\n  \\n## forecastssagroupautostack  \\n  \\nBuild groups recursively, starting with the group `A` with maximum eigenvalue, to view the cumulative result of incrementally added eigenvectors. In enabled, group `A` contains its own eigenvectors. Group `B` contains its own eigenvectors as well as eigenvectors from group `A`. Group `C` includes its own eigenvectors as well as eigenvectors from group `A` and `B`, and etc.  \\n  \\n## forecastssagroupautounion  \\n  \\nJoin eigenvectors from automatically created groups into custom groups. Multiple custom groups are separated using comma. Groups within the custom group are enumerated using semi-colon as a separator or hyphen for range. For example, custom group `A;B;D` contains eigenvectors from automatic groups `A`, `B` and `D`. Custom group `A;C-E` contains eigenvectors from automatic groups `A`,`C`,`D`,`E`.  \\n  \\n## forecastssagroupmanualgroups  \\n  \\nJoin eigenvectors using their index into custom groups. Multiple custom groups are separated using comma. Eigenvectors within the same group are enumerated using semi-colon as a separator or hyphen for range. For example, custom group `1;3-6` contains eigenvectors with indexes `1`, `3`, `4`, `5` and `6`.  \\n  \\n## forecastssareconstructaveragingfunction  \\n  \\nAveraging function to calculate anti-diagonal elements of the reconstructed matrix.\\nPossible values: `AVG`, `MEDIAN`.  \\n  \\n## forecastssareconstructfourier  \\n  \\nUse Fourier transform in the reconstruction stage and in SVD (singular value decomposition).  \\n  \\n## forecaststyle  \\n  \\nCSS styles applied to forecasts in `column` and `column-stack` modes.  \\n  \\n## format  \\n  \\nDisplay series with the appropriate unit of measurement.  \\nSee [Format Settings](https://axibase.com/docs/charts/syntax/format-settings.html) for complete syntax.  \\n  \\n## formataxis  \\n  \\nValue axis format.  \\n  \\n## formatcounter  \\n  \\nCounter format.  \\n  \\n## formatheaders  \\n  \\nDisable column name formatting.  \\n  \\n## parsenumbers  \\n  \\nIf `true`, column values are processed as numbers.\\n  \\n## formatsize  \\n  \\nFormat size setting values.  \\n  \\n## formattip  \\n  \\nLast value format.  \\n  \\n## frequency  \\n  \\n## gradientcount  \\n  \\nSpecify the number of gradient colors between each color in Color Range.  \\n  \\n## gradientintensity  \\n  \\nColor intensity of the first and the last sector in each range.  \\n  \\n## groupfirst  \\n  \\nControl the sequence of aggregation and grouping. If set to `true`, grouping is performed before aggregation.  \\n  \\n## groupinterpolate  \\n  \\nInterpolate grouped values.  \\n  \\n## groupinterpolateextend  \\n  \\nFill missing leading and trailing periods with `NEXT` and `PREVIOUS` values.  \\n  \\n## groupkeys  \\n  \\nCount messages by period with a comma-separated list of keys including `entity`, `type`, `source`, and custom tags.  \\nSupported in server aggregation mode only: `server-aggregate = true`.  \\n  \\n## grouplabel  \\n  \\n## groupperiod  \\n  \\nAssign a group period to a series for computing [group](https://axibase.com/docs/atsd/api/data/series/group.html#group-processor) statistics.  \\n  \\n## groupstatistic  \\n  \\nAssign a group statistic function to the series.  \\nSee [Aggregators](https://axibase.com/docs/charts/configuration/aggregators.html) for more information.  \\n  \\n## headerstyle  \\n  \\nCustomize widget header style.  \\nGroup diverse portals visually.  \\n`background-color`: Replace color, retain pattern.  \\n`background`: Replace both color and pattern.  \\n`display: none`: Hide header.  \\n`header-style = return 'background: white;';`: Remove all styles.  \\n  \\n## heightunits  \\n  \\nFunctionality depends on section:\\n\\n* `[configuration]` - number of rows in the portal. Default value: 4.\\n\\n* `[widget]` - number of rows the widget occupies. Default value: 1.  \\n  \\n## hidden  \\n  \\n## hidecolumn  \\n  \\nExpression based setting.  \\nHide particular columns if all cell values in a column satisfy the condition or if column name matches the pattern.  \\n  \\n## hideemptycolumns  \\n  \\nShow or hide columns with no data.  \\n  \\n## hideemptyseries  \\n  \\nHide series for which no data exists or data whose validity is expired.  \\n  \\n## hideifempty  \\n  \\n## horizontal  \\n  \\nDisplay bars horizontally.  \\n  \\n## horizontalgrid  \\n  \\nHide horizontal grid.  \\n  \\n## hourformat  \\n  \\n## icon  \\n  \\nName of the icon displayed in the cell.  \\n  \\n## iconalertexpression  \\n  \\nApply alert rules to the icon.  \\n  \\n## iconalertstyle  \\n  \\nAlert styles applied to the icon when the `alert-expression` is satisfied.  \\n  \\n## iconcolor  \\n  \\nColor of the icon.  \\n  \\n## iconposition  \\n  \\nPosition of the icon relative to the series value.  \\n  \\n## iconsize  \\n  \\nAutomatically resize icons to occupy all available space except the area used by the value and label.  \\nIf `icon-size` is not set, icon is scaled proportionally to the font height which can be controlled using the `min-font-size` and `max-font-size` settings.  \\n  \\n## id  \\n  \\nUnique name of the vertex.  \\n  \\n## interpolate  \\n  \\nInterpolate missing aggregation periods.  \\n  \\n## interpolateboundary  \\n  \\nDefine [interpolation behavior](https://axibase.com/docs/atsd/api/data/series/interpolate.html#boundary) for leading and trailing values.  \\n  \\n## interpolateextend  \\n  \\nInterpolate leading and trailing periods with `NEXT` or `PREVIOUS` values, respectively.  \\n  \\n## interpolatefill  \\n  \\nInterpolate values outside of the selection interval.  \\n  \\n## interpolatefunction  \\n  \\nDefine interpolation function for entire series, instead of only missing values.  \\n  \\n## interpolateperiod  \\n  \\nDefine the period for interpolated values.  \\n  \\n## intervalformat  \\n  \\n## join  \\n  \\nPerforms join by `entity` and `type`.  \\n`join = entity` performs join by `entity` only.  \\n  \\n## key  \\n  \\nKey name.  \\nIf set configuration of column can be sorted by name.  \\nIf the name of the key is the property received from the server object, the value of the cell by default is the value of the property.  \\n  \\n## keytagexpression  \\n  \\nExpression for matching properties with specified keys and tags.  \\nKeys are accessed with `keys.{key-name}` and tags with `tags.{tag-name}`.  \\n  \\n## label  \\n  \\nText on label.  \\n`element-id` by default.  \\n  \\n## labelformat  \\n  \\nLabel series using text and placeholders.  \\nSee [Label Formating](https://axibase.com/docs/charts/syntax/label-formatting.html#label-formatting).  \\n  \\n## last  \\n  \\nReturn only records with the update time equal to the maximum update time of matched records.  \\n  \\n## lastmarker  \\n  \\nHide most recent series value marker.  \\n  \\n## lastvaluelabel  \\n  \\n## layout  \\n  \\nForm of the widget in `non-hierarchy` mode.  \\n  \\n## leftaxis  \\n  \\nValues displayed on the left-axis.  \\n`density`: Scales the height of the bars such that the sum of their areas equals `1`.  \\n`fractions`: Scales the height of the bars such that the sum of their heights equals `1`.  \\n`frequency`: Scales the height of the bars such that each bar height is equal to the number of observations in the series. Thus, the sum of the heights is equal to the total number of observations  \\n  \\n## leftunits  \\n  \\nSet absolute offset from the left, in units.  \\n  \\n## legendlastvalue  \\n  \\n## legendposition  \\n  \\nModify legend locations for widgets which contain a legend.  \\nBy default, legend position is `hidden` in Time Chart.  \\nLegend position is set to `top` on Dialog Chart.  \\nCombine values to define corners: `legend-position = bottomright`  \\n  \\n## legendticks  \\n  \\n## legendvalue  \\n  \\n## limit  \\n  \\nMaximum number of returned records.  \\n  \\n## linearzoom  \\n  \\n## linkalertexpression  \\n  \\n## linkalertstyle  \\n  \\nStyle of edges in the event of an `alert-expression` being triggered and tied to the time series.  \\n  \\n## linkanimate  \\n  \\nAnimation of directed vertices.  \\n  \\n## linkcolorrange  \\n  \\nColor scheme for `link-threshold`.  \\n  \\n## linkcolors  \\n  \\nColor to indicate the threshold of time series.  \\nAttached to the edges and separated by commas.  \\n  \\n## linkdata  \\n  \\nSeries last value next to the `link-label`.  \\n  \\n## linklabels  \\n  \\nDisplay edge labels.  \\n  \\n## linklabelzoomthreshold  \\n  \\nParameter value is a value of scale when labels appear based on edge threshold.  \\n`value < 1`: Labels disappear on zoom out.  \\n`value > 1`: Labels appear on zoom in.  \\n  \\n## links  \\n  \\nList of edges associated with this series is defined by an ID or edge ID of the corresponding vertices with a hyphen.  \\nWhen edge ID contains a hyphen, it must be shielded with `\\\"\\\"` double quotes.  \\n  \\n## linkthresholds  \\n  \\nThreshold for time series attached to the edges.  \\nSupports both JavaScript and `percentile` functions.  \\n  \\n## linkvalue  \\n  \\n## linkwidthorder  \\n  \\nSort links according to their width.  \\n  \\n## linkwidths  \\n  \\nWidth to indicate the thresholds of the time series tied to the edges and separated by commas or spaces.  \\n  \\n## loadfuturedata  \\n  \\nLoad future series values.  \\nImport forecasts generated by third-party tools such as R language.  \\n  \\n## markerformat  \\n  \\n## markers  \\n  \\nHide series marker values.  \\n  \\n## maxfontsize  \\n  \\nMaximum caption font size.  \\nFont size cannot scale above set size.  \\n  \\n## maximum  \\n  \\n## maxrange  \\n  \\nDefine maximum range displayed on the left axis.  \\nActual range can differ based on loaded data samples.  \\n  \\n## maxrangeforce  \\n  \\nApply a forced range to the left axis, regardless of loaded data.  \\n  \\n## maxrangeright  \\n  \\nDefine maximum range displayed on the right axis.  \\nActual range can differ based on loaded data samples.  \\n  \\n## maxrangerightforce  \\n  \\nApply a forced range to the right axis, regardless of loaded data.  \\n  \\n## maxringwidth  \\n  \\nThe maximum allowed width of the vertex ring from the current minimal value of the ring width.  \\n  \\n## maxthreshold  \\n  \\n## menu  \\n  \\n## mergecolumns  \\n  \\nKey by which columns are grouped into rows.  \\n  \\n## mergefields  \\n  \\nCombine series into series grouped based on field. Applies only in `multiple-series` mode. Series which use [wildcard](https://axibase.com/docs/charts/syntax/wildcards.html), `entities`, `entityGroup` settings or comma-separated tag values are treated as multiple series by default.  \\nPossible values:  \\n`entity`: All series with the same entity are combined.  \\n`{tag-name}`: All series with the same value of tag `{tag-name}` are combined.  \\n  \\n## methodpath  \\n  \\nData API method path. Default value is specific for each data type: `/series/query`, `/properties/query`, `/messages/query`, `/alerts/query`.  \\n  \\n## metric  \\n  \\nDefine the Metric.  \\n  \\n## metriclabel  \\n  \\nOverride grouped series legend when `group=metric`.  \\n  \\n## mincaptionsize  \\n  \\n## minfontsize  \\n  \\nMinimum caption font size.  \\nFont size cannot scale below set size.  \\n  \\n## minimum  \\n  \\n## minorticks  \\n  \\nNumber of minor ticks between major ticks.  \\n  \\n## minrange  \\n  \\nDefine minimum range displayed on the left axis.  \\nActual range can differ based on loaded data samples.  \\n  \\n## minrangeforce  \\n  \\nDefine strict minimum value of the left or right axis. If the value of a series does not fall within the set boundaries set by these value gaps, the series is not displayed.  \\n  \\n## minrangeright  \\n  \\nDefine minimum range displayed on the right axis.  \\nActual range can differ based on loaded data samples.  \\n  \\n## minrangerightforce  \\n  \\nApply a forced range to the right axis, regardless of loaded data.  \\n  \\n## minringwidth  \\n  \\nThe minimum allowed width of the vertex ring.  \\nThe value is from `0` to a maximum permissible value of the ring width.  \\n  \\n## minseverity  \\n  \\n## minthreshold  \\n  \\n## mode  \\n  \\nApply mode setting to both or either `[widget]` and `[series]` settings.  \\n  \\n## movingaverage  \\n  \\nEnable moving average to set aggregation period based on a sliding window ending with the current time.  \\nDisable moving average to set aggregation period based on calendar.  \\n  \\n## multiplecolumn  \\n  \\nApplies to [wildcard](https://axibase.com/docs/charts/syntax/wildcards.html#wildcards) series.  \\nDefault value: `false`.  \\nIf `true`, series with the same entity and tags are grouped in the same column.  \\nThis applies to derived series which are placed in the same column alongside the underlying series.  \\n  \\n## multipleseries  \\n  \\n## negativestyle  \\n  \\nApply CSS styles to negative values of a series in `column` or `column-stack` mode.  \\n  \\n## nodealertexpression  \\n  \\n## nodealertstyle  \\n  \\nStyle of vertices, in the event of an `alert-expression` being triggered tied to the time series.  \\n  \\n## nodecollapse  \\n  \\nCollapse vertex sectors when clicked.  \\n  \\n## nodecolors  \\n  \\nColor to indicate the threshold of time series that are bound to vertices and separated by commas.  \\n  \\n## nodeconnect  \\n  \\nConnect vertices on the perimeter.  \\n  \\n## nodedata  \\n  \\n## nodelabels  \\n  \\nDisplay vertex labels.  \\n  \\n## nodelabelzoomthreshold  \\n  \\nParameter value is a value of scale when labels appear based on vertex threshold  \\n`value < 1`: Labels disappear on zoom out.  \\n`value > 1`: Labels appear on zoom in.  \\n  \\n## noderadius  \\n  \\nRadius of the vertex in pixels.  \\nNot valid in `hierarchy` mode.  \\n  \\n## noderadiuses  \\n  \\nRadii of the lighting for the display of the time series `thresholds` linked to the vertices and separated by commas or spaces.  \\n  \\n## nodes  \\n  \\nList of vertices associated with this series.  \\nWhen the vertex id contains a hyphen, it must be shielded with `\\\"\\\"` double quotes.  \\n  \\n## nodethresholds  \\n  \\nThreshold for time series tied to vertices.  \\nSupports JavaScript, `percentile` functions, or can be set as an array.  \\n  \\n## nodevalue  \\n  \\n## offset  \\n  \\nDifference, in milliseconds, between maximum update time of matched records and update time of the current record.  \\nIf the difference exceeds `offset`, the record is excluded from results.  \\n  \\n## offsetbottom  \\n  \\n## offsetleft  \\n  \\n## offsetright  \\n  \\n## offsettop  \\n  \\n## onchange  \\n  \\nIf specified, field is evaluated instead of default `onchange` behavior. Either `onchange`, or `change-field` is required for any drop-down list.  \\n  \\n## onclick  \\n  \\nSet interaction behavior for user click.  \\nFilter the tables based on the clicked values of a specific column.  \\n  \\n## onseriesclick  \\n  \\nSpecifies an action to be performed when the user selects a series. For a Calendar widget, it is a row of summarization periods.  \\n  \\n## onseriesdoubleclick  \\n  \\nDisable [double click functionality](https://axibase.com/docs/charts/widgets/pie-chart/#on-series-double-click) in the widget.  \\n  \\n## options  \\n  \\nComma-separated list of option values.  \\n  \\n## padding  \\n  \\nOffset from the edge of the container in pixels.  \\n  \\n## paletteticks  \\n  \\nDisplay legend labels.  \\n  \\n## parent  \\n  \\nID of parent vertex.  \\n  \\n## path  \\n  \\n## percentilemarkers  \\n  \\nPercentiles marker position.  \\n  \\n## percentiles  \\n  \\nPercentiles displayed when `top-axis = percentiles`.  \\nMultiple percentiles must be separated with commas.  \\n  \\n## period  \\n  \\nDefine period for [aggregator](https://axibase.com/docs/atsd/api/data/series/aggregate.html#aggregate-processor) functions which require one.  \\n  \\n## periods  \\n  \\n## pinradius  \\n  \\nRadius of the inner circle holding the arrow, measured as `%` of radius.  \\n  \\n## pointerposition  \\n  \\nDefine the location of the final value pointer.  \\n  \\n## position  \\n  \\nPosition of the column relative to other columns in the table.  \\n  \\n## primarykey  \\n  \\n## principal  \\n  \\n## rangemerge  \\n  \\nIf threshold is not defined, different set of ranges is computed for each series based on observed min and max values within the loaded timespan.  \\n`range-merge` computes a single set of ranges for all series in the widget by using `min` and `max` for all loaded series.  \\n  \\n## rangeoffset  \\n  \\nAdds an offset to the left and right of the dataset, set in pixels.  \\nInactive by default.  \\n  \\n## rangeselectend  \\n  \\n## rangeselectstart  \\n  \\n## rate  \\n  \\nCompute the difference between consecutive sample per unit of time, or [rate period](https://axibase.com/docs/atsd/api/data/series/rate.html#rate-period).  \\nCompute the underlying rate of change when a metric measures a continuously incrementing counter.  \\n  \\n## ratecounter  \\n  \\nCompute the difference between consecutive samples per unit of time.  \\n  \\n## ratio  \\n  \\n## refreshinterval  \\n  \\nDefine the period in seconds that ATSD waits before refreshing data with new samples.  \\n  \\n## replaceunderscore  \\n  \\nReplace underscores with whitespace in column names.  \\n  \\n## replacevalue  \\n  \\nModify or filter series values.  \\nThe example expression filters all values less than `50` from the series.  \\nAggregators are not supported.  \\n  \\n## responsive  \\n  \\nAdjust font size based on widget dimensions.  \\nFont size is reduced proportionally to widget size.  \\n  \\n## retaintimespan  \\n  \\n## retryrefreshinterval  \\n  \\nDefine the wait period after ATSD receives an empty sample to retry data refresh.  \\n  \\n## rightaxis  \\n  \\nValues displayed on the right-axis.  \\n  \\n## ringwidth  \\n  \\nWidth of the colored ring area, measured as `%` of radius.  \\n  \\n## rotatelegendticks  \\n  \\n## rotatepaletteticks  \\n  \\nRotate legend labels.  \\n  \\n## rotateticks  \\n  \\nRotate `x` axis labels.  \\nSet in degrees.  \\n`true` rotates by `90` degrees.  \\n  \\n## rowalertstyle  \\n  \\nStyles assigned to the whole row.  \\nCan be specified as JavaScript code.  \\n  \\n## rowstyle  \\n  \\nStyle assigned to the entire row specified as JavaScript code.  \\nIn the syntax example all alerts with severity less than `7` are hidden.  \\nFilter data prior display in the widget.  \\n  \\n## rule  \\n  \\nName of rule for which alerts are filtered.  \\n  \\n## scale  \\n  \\nScales the width and height of the target page.  \\nValue is the factor by which the page scales.  \\n  \\n## scalex  \\n  \\nScale a widget or axis.  \\nNot supported in all browsers.  \\n  \\n## scaley  \\n  \\n## script  \\n  \\n## selectormode  \\n  \\nControls how pie segments react to click interaction. Possible Settings: highlight, expand. Highlight – double click highlights the selected pie segment, other segments are greyed out. Expand – double click expands the selected pie segment.  \\n\\n## series\\n  \\n## serieslabels  \\n  \\nDisplay values for each pie slice (series) as a tick.  \\nSet to an expression that changes the label type depending on series value.  \\n  \\n## serieslimit  \\n  \\nDefine the maximum number of series retrieved from the database, to prevent the client or server from processing excessive series.  \\n  \\n## seriestype  \\n  \\nUse this setting in `stack` mode as a grouping parameter.  \\nSeries of like types are grouped together or summed.  \\nSet a unique series type to achieve fill effect without applying `stack` mode.  \\n  \\n## seriesvalue  \\n  \\n## serveraggregate  \\n  \\n## severity  \\n  \\nSeverity rating of alerts displayed in the console:  \\nUndefined: `0`  \\nUnknown: `1`  \\nNormal: `2`  \\nWarning: `3`  \\nMinor: `4`  \\nCritical: `6`  \\nFatal: `7`.  \\n  \\n## severitystyle  \\n  \\nControl alert behavior. Highlight a single column or entire row.  \\n  \\n## showtagnames  \\n  \\nDisplay all entity tags.  \\nOnly valid for tables with `tag` column.  \\n  \\n## size  \\n  \\nThe relative size of the series rectangle.  \\n`1` by default.  \\nSet to a series value by referring to `alias`.  \\nSet to the current value of the series using `value`.  \\n  \\n## sizename  \\n  \\nTitle for for `display-total`.  \\nDisplayed after `Total`.  \\nFor example: `Total sum`.  \\n  \\n## smooth  \\n  \\nWeighted [averaging](https://axibase.com/docs/atsd/api/data/series/smooth.html) function applied to window samples.  \\n  \\n## smoothcount  \\n  \\nNumber of samples in the window.  \\n  \\n## smoothfactor  \\n  \\nWeighting parameter used by `EMA` function. If specified, must be `>0 and <1`.  \\n  \\n## smoothincompletevalue  \\n  \\nSample value returned if the window is not full.  \\n  \\n## smoothinterval  \\n  \\nWindow duration interval.  \\n  \\n## smoothminimumcount  \\n  \\nMinimum number of samples in the window.  \\n  \\n## smoothrange  \\n  \\nWeighting parameter used by `EMA` function.  \\n  \\n## sort  \\n  \\nSort console based on one or more columns.  \\nAdditional ascending `ASC` or descending `DESC` parameter is accepted.  \\n  \\n## source  \\n  \\nSpecify the source of records.  \\n  \\n## stack  \\n  \\nDisable series grouping to display each series in a separate column.  \\n  \\n## starttime  \\n  \\nSpecifies the date and time in local or [ISO format](https://axibase.com/docs/atsd/shared/date-format.html) from which the values for the series are loaded.  \\nThe setting can be overridden by each widget separately.  \\nNote that `start-time` is **inclusive** and `end-time` is **exclusive**.  \\nThis means that `start-time = 2017-09-14 10:00:00` includes data points that occurred exactly at `10:00:00` and later whereas `end-time = 2017-09-14 11:00:00` includes data points that occurred up to `10:59:59`, excluding points that occurred at `11:00:00`.  \\nThe setting supports [calendar](https://axibase.com/docs/atsd/shared/calendar.html) keywords.  \\n  \\n## startworkingminutes  \\n  \\n## statistic  \\n  \\nApply aggregation statistical functions.  \\nSee [Aggregators](https://axibase.com/docs/charts/configuration/aggregators.html) for more information.  \\n  \\n## statistics  \\n  \\n## stepline  \\n  \\nConnect neighboring samples using a step line instead of one which is linearly interpolated.  \\nToggle step line mode by changing `y` axis controls displayed on mouseover.  \\n  \\n## style  \\n  \\nRender forecast as a solid line instead of dashed line.  \\n  \\n## summarizeperiod  \\n  \\nPeriod by which loaded time series data is split.  \\n  \\n## summarizestatistic  \\n  \\nStatistical function applied to values within each period.  \\n  \\n## table  \\n  \\nUse as an alternative to `metric` setting.  \\nIf both `table` and `attribute` are defined, `metric = table,attribute`.  \\n  \\n## tableheaderstyle  \\n  \\nCustom CSS style applied to table header, including a style to hide the header.  \\n  \\n## tagexpression  \\n  \\nApply server-side filtering based on [series tags](https://axibase.com/docs/atsd/api/meta/metric/series-tags.html).  \\n  \\n## tagoffset  \\n  \\nDifference, in milliseconds, between update time of the current record and update time of the tag field.  \\nIf the difference exceeds `tag-offset`, the tag field is excluded from tags object.  \\n  \\n## tagsdropdowns  \\n  \\n## tagsdropdownsstyle  \\n  \\n## tension  \\n  \\nThe degree curvature of edges.  \\nCorresponds to the parameter `C` in the formula for the cardinal spline.  \\nVaries from `0` to `1`, `0` corresponds to straight edges.  \\n  \\n## thresholds  \\n  \\nDefines the threshold values.  \\nBy default the mean value all metrics for the whole time-span is chosen as the threshold.  \\nSet to the rate of change (`delta`) of series contained in the widget by referring to `alias`.  \\n  \\n## ticks  \\n  \\nNumber of major ticks on gauge axis.  \\n  \\n## ticksright  \\n  \\nControl the number of tick marks on the right axis.  \\n  \\n## tickstime  \\n  \\nControl the number of tick marks on the time (`x`) axis.  \\n  \\n## timeoffset  \\n  \\nOffset time series day into either the past or future based on sign.  \\nCompare day from today to the same data from some ago.  \\n`time-offset > 0`: Offset into the past.  \\n`time-offset < 0`: Offset into the future.  \\nUse on either `[widget]` or `[series]` level settings.  \\n  \\n## timespan  \\n  \\nDefine data load interval.  \\n  \\n## timezone  \\n  \\nSet the time zone for the data being loaded into the portal. Only the `UTC` option is supported.  \\nIf `UTC` is not set, the portal displays dates in the local time zone.  \\nIf `UTC` is set, `start-time` and `end-time` settings specified in local format are evaluated based on the UTC time zone.  \\n  \\n## title  \\n  \\n## tooltip  \\n  \\nTooltip for the `[other]` section displayed upon mouseover.  \\n  \\n## topaxis  \\n  \\nValues displayed on the top axis.  \\n  \\n## topunits  \\n  \\nSet absolute offset from the top, in units.  \\n  \\n## totalsize  \\n  \\nMaximum size of all rectangles combined  \\n  \\n## totalvalue  \\n  \\nDefine the total value explicitly, otherwise it is computed as the sum of all series values.  \\n`total-value` can be calculated by referencing other series similar to computed series.  \\n  \\n## transformationorder  \\n  \\n[`transformation-order`](https://axibase.com/docs/atsd/api/data/series/query.html#transformations) controls the sequence of data modification procedures.\\nDefault sequence: `interpolate`, `group`, `rate`, `aggregate`, `smooth`, `downsample`, `forecast`, `none`.\\nIf set to `none`, the default sequence is used.\\nIf specified, the `server-aggregate` setting is set to `true` by default.  \\n  \\n## transpose  \\n  \\nTranspose rows and columns for a layout optimized for columnar presentation.  \\n  \\n## type  \\n  \\nDefine widget type.  \\n  \\n## unscale  \\n  \\n`CSS Selector` to determine unscaled elements in a user-loaded `svg` file.  \\n  \\n## updateinterval  \\n  \\nPolling interval at which new incremental data is requested from the server by widgets on the portal.  \\nFor example `update-interval = 5 minute`.  \\nThe default value is 1 minute.  \\nThe setting can be overridden by each widget separately.  \\nChart updates are disabled if the `endtime` parameter for the portal or the widget is set to a fixed date, for example: `endtime = 2016-06-27T00:00:00Z`.  \\n  \\n## url  \\n  \\nURL of the ATSD server. The setting is necessary if the data is loaded from an ATSD server running on a different host.  \\n  \\n## urlparameters  \\n  \\nOptional request parameters included in data API requests.  \\nParameter names and values must be URL-encoded if necessary and separated by ampersand. `?` at the start of the query string is optional.  \\n  \\n## value  \\n  \\nDefine series value.  \\nRetrieve the value of the underlying series identified by alias.  \\n  \\n## verticalgrid  \\n  \\nDisplay a vertical line corresponding to each percentile on the top axis.  \\n  \\n## widgetsperrow  \\n  \\nUse the `widgets-per-row` setting under `[group]` level to control the number of widgets displayed on each row.  \\n  \\n## width  \\n  \\nMaximum and minimum allowed width of the vertex ring is the percent from the radius of the circle.  \\nBy default, minimum `30%`, maximum `50%`.  \\n  \\n## widthunits  \\n  \\nFunctionality depends on section:\\n\\n* `[configuration]` - number of columns in the portal. Default value: 6.\\n\\n* `[widget]` - number of columns the widget occupies. Default value: 1.  \\n  \\n## zoomsvg  \\n  \\nZoom the user-loaded `svg` file.  \\n\");\n\n//# sourceURL=webpack:///../server/descriptions.md?");

/***/ }),

/***/ "../server/dictionary.json":
/*!*********************************!*\
  !*** ../server/dictionary.json ***!
  \*********************************/
/*! exports provided: $schema, settings, default */
/***/ (function(module) {

eval("module.exports = {\"$schema\":\"./dictionary.schema.json\",\"settings\":[{\"displayName\":\"add-meta\",\"type\":\"boolean\",\"section\":\"series\",\"example\":true,\"defaultValue\":false},{\"displayName\":\"ahead-time-span\",\"type\":\"string\",\"section\":\"widget\",\"widget\":\"chart\",\"example\":\"80%\"},{\"displayName\":\"alert-expression\",\"type\":\"string\",\"section\":[\"column\",\"widget\"],\"example\":\"value > 5\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"alert-row-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"background-color: red\"},{\"displayName\":\"alert-style\",\"multiLine\":true,\"type\":\"string\",\"section\":\"series\",\"example\":\"stroke: red; stroke-width: 2\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}]}},{\"displayName\":\"alias\",\"type\":\"string\",\"section\":\"series\",\"example\":\"s1\"},{\"displayName\":\"align\",\"type\":\"enum\",\"section\":\"widget\",\"example\":\"END_TIME\",\"defaultValue\":\"CALENDAR\",\"enum\":[\"END_TIME\",\"START_TIME\",\"CALENDAR\",\"FIRST_VALUE_TIME\"]},{\"displayName\":\"arcs\",\"type\":\"boolean\",\"section\":\"widget\",\"widget\":\"graph\",\"defaultValue\":true,\"example\":false},{\"displayName\":\"arrow-length\",\"type\":\"number\",\"section\":\"widget\",\"widget\":\"gauge\",\"example\":\"0.3, 30%\",\"maxValue\":1,\"minValue\":0},{\"displayName\":\"arrows\",\"type\":\"boolean\",\"section\":\"widget\",\"widget\":\"graph\",\"defaultValue\":false,\"example\":true},{\"displayName\":\"attribute\",\"section\":\"series\",\"type\":\"string\",\"example\":\"my_attribute\",\"excludes\":[\"metric\"]},{\"displayName\":\"audio-alert\",\"type\":\"string\",\"section\":\"series\",\"example\":\"(alert > 0.5) ? '/portal/resource/alarm.ogg' : '/portal/resource/klaxon.ogg'\",\"script\":{\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}],\"returnValue\":\"string\"}},{\"displayName\":\"audio-onload\",\"type\":\"boolean\",\"section\":\"widget\",\"defaultValue\":false,\"example\":true},{\"displayName\":\"author\",\"type\":\"string\",\"example\":\"my_name\"},{\"displayName\":\"auto-height\",\"type\":\"boolean\",\"section\":\"widget\",\"defaultValue\":false,\"example\":true},{\"displayName\":\"auto-padding\",\"type\":\"boolean\",\"section\":\"widget\",\"widget\":\"graph\",\"defaultValue\":true,\"example\":false},{\"displayName\":\"auto-period\",\"type\":\"boolean\",\"section\":\"widget\",\"widget\":\"chart\",\"defaultValue\":true,\"example\":false},{\"displayName\":\"auto-scale\",\"type\":\"boolean\",\"section\":\"widget\",\"widget\":\"chart\",\"defaultValue\":false,\"example\":true},{\"displayName\":\"axis\",\"type\":\"enum\",\"defaultValue\":\"left\",\"section\":\"series\",\"example\":\"right\",\"enum\":[\"right\",\"left\"]},{\"displayName\":\"axis-title\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"CPU Utilization in %\"},{\"displayName\":\"axis-title-left\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"CPU Utilization in %\"},{\"displayName\":\"axis-title-right\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"CPU Utilization in %\"},{\"displayName\":\"bar-count\",\"type\":\"integer\",\"section\":\"widget\",\"widget\":\"histogram\",\"example\":20},{\"displayName\":\"batch-size\",\"type\":\"integer\",\"section\":\"widget\",\"example\":1,\"defaultValue\":8},{\"displayName\":\"batch-update\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\",\"defaultValue\":false},{\"displayName\":\"border-width\",\"type\":\"number\",\"example\":0.3,\"section\":\"widget\",\"widget\":\"gauge\"},{\"displayName\":\"bottom-axis\",\"type\":\"enum\",\"defaultValue\":\"values\",\"section\":\"widget\",\"widget\":\"histogram\",\"example\":\"none\",\"enum\":[\"none\",\"percentiles\",\"values\"]},{\"displayName\":\"bundle\",\"section\":\"widget\",\"widget\":\"graph\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"bundled\",\"section\":\"widget\",\"widget\":\"graph\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"buttons\",\"type\":\"enum\",\"section\":\"widget\",\"example\":\"menu\",\"enum\":[\"menu\",\"update\"]},{\"displayName\":\"cache\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\"},{\"displayName\":\"capitalize\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\"},{\"displayName\":\"caption\",\"type\":\"string\",\"example\":\"KPI\",\"section\":\"widget\"},{\"displayName\":\"caption-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"color: silver\",\"section\":\"widget\"},{\"displayName\":\"case\",\"type\":\"enum\",\"enum\":[\"upper\",\"lower\"],\"example\":\"upper\",\"section\":\"widget\",\"widget\":\"property\"},{\"displayName\":\"centralize-columns\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\"},{\"displayName\":\"centralize-ticks\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\"},{\"displayName\":\"change-field\",\"type\":\"string\",\"example\":\"series.entity\",\"section\":\"dropdown\"},{\"displayName\":\"circle\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\",\"widget\":\"text\"},{\"displayName\":\"class\",\"type\":\"enum\",\"example\":\"terminal\",\"enum\":[\"terminal\",\"metro\"],\"section\":\"widget\",\"override\":{\"[widget == 'console' || widget == 'property']\":{\"enum\":[\"terminal\"]},\"[widget == 'box']\":{\"enum\":[\"metro\"]}}},{\"displayName\":\"collapsible\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\"},{\"displayName\":\"color\",\"type\":\"string\",\"example\":\"orange\",\"section\":\"series\",\"excludes\":[\"colors\",\"color-range\"]},{\"displayName\":\"color-range\",\"type\":\"string\",\"example\":\"black, blue\",\"excludes\":[\"colors\",\"color\"],\"possibleValues\":[{\"value\":\"blue\"},{\"value\":\"red\"},{\"value\":\"black\"},{\"value\":\"green\"},{\"value\":\"yellow\"},{\"value\":\"silver\"}]},{\"displayName\":\"colors\",\"type\":\"string\",\"example\":\"green\",\"section\":\"widget\",\"excludes\":[\"color-range\",\"color\"]},{\"displayName\":\"column-alert-expression\",\"type\":\"string\",\"example\":\"value > 10\",\"section\":\"column\"},{\"displayName\":\"column-alert-style\",\"type\":\"string\",\"example\":\"fill: red; stroke: red\",\"section\":\"column\"},{\"displayName\":\"column-entity\",\"type\":\"string\",\"example\":\"Entity\",\"section\":\"widget\"},{\"displayName\":\"column-metric\",\"type\":\"string\",\"example\":\"Temperature\",\"section\":\"widget\"},{\"displayName\":\"column-time\",\"type\":\"string\",\"example\":\"Time in seconds\",\"section\":\"widget\"},{\"displayName\":\"column-value\",\"type\":\"string\",\"example\":\"CPU Usage\",\"section\":\"widget\"},{\"displayName\":\"column-label-format\",\"type\":\"string\",\"example\":\"tags.mount_point\",\"section\":\"column\",\"defaultValue\":\"entity: metric: tagName=tagValue: statistics - period\",\"possibleValues\":[{\"value\":\"entity\"},{\"value\":\"metric\"},{\"value\":\"tagName\"},{\"value\":\"tagValue\"},{\"value\":\"tags.{tag-name}\"},{\"value\":\"statistics\"},{\"value\":\"period\"}]},{\"displayName\":\"context-height\",\"type\":\"integer\",\"example\":50,\"defaultValue\":0},{\"displayName\":\"context-path\",\"type\":\"string\",\"example\":\"/hbs\",\"defaultValue\":\"/api/v1\",\"section\":\"configuration\"},{\"displayName\":\"counter\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"series\"},{\"displayName\":\"counter-position\",\"type\":\"enum\",\"example\":\"none\",\"section\":\"widget\",\"widget\":\"gauge\",\"enum\":[\"none\",\"top\",\"bottom\"]},{\"displayName\":\"current-period-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"fill-opacity: 0; stroke-width: 2; stroke-dasharray: 5, 2, 1, 2\",\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"data\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\",\"widget\":\"graph\"},{\"displayName\":\"data-labels\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\",\"widget\":\"calendar\"},{\"displayName\":\"data-type\",\"type\":\"enum\",\"example\":\"forecast\",\"enum\":[\"history\",\"forecast\",\"forecast_deviation\",\"lower_confidence\",\"upper_confidence\"],\"section\":\"series\"},{\"displayName\":\"day-format\",\"type\":\"string\",\"example\":\"%y/%m/%d\",\"possibleValues\":[{\"value\":\"%a\",\"detail\":\"Three-letter abbreviated day name, for example: Sun, Mon, Tue, Wed, Thu, Fri, Sat.\"},{\"value\":\"%aa\",\"detail\":\"Two-letter abbreviated day name, for example: Su, Mo, Tu, We, Th, Fr, Sa.\"},{\"value\":\"%A\",\"detail\":\"Full day name.\"},{\"value\":\"%b\",\"detail\":\"Abbreviated month name.\"},{\"value\":\"%B\",\"detail\":\"Full month name.\"},{\"value\":\"%d\",\"detail\":\"Zero-padded day of the month as a decimal number [01,31].\"},{\"value\":\"%e\",\"detail\":\"Space-padded day of the month as a decimal number [ 1,31]. Equivalent to %_d.\"},{\"value\":\"%j\",\"detail\":\"Day of the year as a decimal number [001,366].\"},{\"value\":\"%m\",\"detail\":\"Month as a decimal number [01,12].\"},{\"value\":\"%U\",\"detail\":\"Week number of the year as a decimal number [00,53]. Sunday is the first day of the week.\"},{\"value\":\"%w\",\"detail\":\"Weekday as a decimal number [0(Sunday),6].\"},{\"value\":\"%W\",\"detail\":\"Week number of the year as a decimal number [00,53]. Monday is the first day of the week.\"},{\"value\":\"%x\",\"detail\":\"Date, as %m/%d/%Y.\"},{\"value\":\"%y\",\"detail\":\"Year without century as a decimal number [00,99].\"},{\"value\":\"%Y\",\"detail\":\"Year with century as a decimal number.\"}],\"section\":\"widget\"},{\"displayName\":\"default-color\",\"type\":\"string\",\"example\":\"magenta\",\"section\":\"series\"},{\"displayName\":\"default-size\",\"type\":\"number\",\"example\":2,\"defaultValue\":1,\"section\":\"widget\",\"widget\":\"treemap\"},{\"displayName\":\"depth\",\"type\":\"integer\",\"example\":3,\"section\":\"widget\",\"widget\":\"graph\"},{\"displayName\":\"description\",\"type\":\"string\",\"example\":\"My configuration\"},{\"displayName\":\"dialog-maximize\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\"},{\"displayName\":\"disable-alert\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\",\"widget\":\"page\"},{\"displayName\":\"disconnect-count\",\"type\":\"integer\",\"example\":50,\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"disconnected-node-display\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\",\"widget\":\"graph\"},{\"displayName\":\"disconnect-interval\",\"type\":\"interval\",\"example\":\"1 minute\",\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"disconnect-value\",\"type\":\"integer\",\"example\":0,\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"display\",\"type\":\"string\",\"example\":\"value > top(3)\",\"section\":\"series\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"display-date\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"display-in-legend\",\"type\":\"boolean\",\"example\":false,\"section\":\"series\"},{\"displayName\":\"display-labels\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\",\"widget\":\"treemap\"},{\"displayName\":\"display-other\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\",\"widget\":\"pie\"},{\"displayName\":\"display-panels\",\"type\":\"enum\",\"example\":\"true\",\"defaultValue\":\"hover\",\"section\":\"widget\",\"enum\":[\"true\",\"false\",\"hover\"]},{\"displayName\":\"display-tags\",\"type\":\"string\",\"example\":\"mount_point\",\"defaultValue\":false,\"section\":\"widget\"},{\"displayName\":\"display-ticks\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"gauge\",\"section\":\"widget\"},{\"displayName\":\"display-tip\",\"type\":\"boolean\",\"example\":true,\"widget\":\"gauge\",\"section\":\"widget\"},{\"displayName\":\"display-total\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"treemap\",\"section\":\"widget\"},{\"displayName\":\"display-values\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"widget\",\"widget\":\"bar\"},{\"displayName\":\"downsample\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"widget\"},{\"displayName\":\"downsample-algorithm\",\"type\":\"enum\",\"example\":\"DETAIL\",\"section\":\"widget\",\"enum\":[\"DETAIL\",\"INTERPOLATE\"]},{\"displayName\":\"downsample-difference\",\"type\":\"number\",\"example\":4,\"minValue\":0,\"section\":\"widget\",\"excludes\":[\"downsample-ratio\"]},{\"displayName\":\"downsample-ratio\",\"type\":\"number\",\"example\":2,\"minValue\":1,\"section\":\"widget\",\"excludes\":[\"downsample-difference\"]},{\"displayName\":\"downsample-gap\",\"type\":\"interval\",\"example\":\"10 minute\",\"section\":\"widget\"},{\"displayName\":\"downsample-order\",\"type\":\"integer\",\"example\":5,\"minValue\":0,\"section\":\"widget\"},{\"displayName\":\"duration\",\"type\":\"integer\",\"example\":2000,\"defaultValue\":1000,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"effects\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"empty-refresh-interval\",\"type\":\"interval\",\"example\":\"5 minute\",\"section\":\"series\"},{\"displayName\":\"empty-threshold\",\"type\":\"interval\",\"example\":\"5 minute\",\"section\":\"series\"},{\"displayName\":\"enabled\",\"type\":\"string\",\"example\":false,\"section\":\"series\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"end-time\",\"type\":\"date\",\"example\":\"previous_working_day\",\"section\":\"widget\"},{\"displayName\":\"end-working-minutes\",\"type\":\"integer\",\"example\":60,\"defaultValue\":1440,\"section\":\"series\",\"minValue\":0},{\"displayName\":\"entities\",\"type\":\"string\",\"example\":\"nurswgvml111, nurswgvml00*\",\"section\":\"series\",\"excludes\":[\"entity\",\"entity-expression\",\"entity-group\",\"entity-label\"]},{\"displayName\":\"entity\",\"type\":\"string\",\"example\":\"nurswgvml*\",\"section\":\"series\",\"excludes\":[\"entities\",\"entity-expression\",\"entity-group\"]},{\"displayName\":\"entity-expression\",\"type\":\"string\",\"example\":\"tags.app = 'ATSD'\",\"section\":\"series\",\"excludes\":[\"entities\",\"entity\",\"entity-group\"]},{\"displayName\":\"entity-group\",\"type\":\"string\",\"example\":\"nmob-sub-group\",\"section\":\"series\",\"excludes\":[\"entities\",\"entity\",\"entity-expression\"]},{\"displayName\":\"entity-label\",\"type\":\"string\",\"example\":\"srv007\",\"section\":\"widget\"},{\"displayName\":\"error-refresh-interval\",\"type\":\"interval\",\"example\":\"30 minute\",\"section\":\"series\"},{\"displayName\":\"exact-match\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\"},{\"displayName\":\"expand\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\",\"widget\":\"pie\"},{\"displayName\":\"expand-panels\",\"type\":\"enum\",\"example\":\"all\",\"defaultValue\":\"compact\",\"enum\":[],\"section\":\"widget\",\"override\":{\"[widget == 'chart']\":{\"enum\":[\"true\",\"all\",\"default\",\"auto\",\"compact\",\"false\",\"none\"]},\"[section == 'configuration']\":{\"enum\":[\"true\",\"all\",\"default\",\"auto\",\"compact\",\"false\",\"none\"]}}},{\"displayName\":\"expand-tags\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\",\"widget\":\"property\"},{\"displayName\":\"expire-time-span\",\"type\":\"interval\",\"example\":\"10 day\",\"section\":\"widget\",\"widget\":\"table\"},{\"displayName\":\"fill-value\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"filter\",\"type\":\"string\",\"example\":\"value > 1\",\"section\":\"series\"},{\"displayName\":\"filter-range\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"series\"},{\"displayName\":\"fit-svg\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\",\"widget\":\"page\"},{\"displayName\":\"font-scale\",\"type\":\"number\",\"example\":0.7,\"defaultValue\":0.5,\"minValue\":0,\"maxValue\":1,\"section\":\"widget\"},{\"displayName\":\"font-size\",\"type\":\"integer\",\"example\":42,\"section\":\"widget\",\"widget\":\"treemap\"},{\"displayName\":\"forecast-arima-auto\",\"type\":\"boolean\",\"example\":\"true\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-arima-auto-regression-interval\",\"type\":\"interval\",\"example\":\"1 week\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-arima-p\"]},{\"displayName\":\"forecast-arima-d\",\"type\":\"number\",\"example\":\"5\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-arima-p\",\"type\":\"enum\",\"example\":\"1\",\"section\":\"series\",\"widget\":\"chart\",\"enum\":[\"0\",\"1\"],\"excludes\":[\"forecast-arima-auto-regression-interval\"]},{\"displayName\":\"forecast-horizon-interval\",\"type\":\"interval\",\"example\":\"3 day\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-horizon-length\",\"forecast-horizon-end-time\"]},{\"displayName\":\"forecast-horizon-length\",\"type\":\"integer\",\"example\":\"100\",\"section\":\"series\",\"widget\":\"chart\",\"minValue\":0,\"excludes\":[\"forecast-horizon-interval\",\"forecast-horizon-end-time\"]},{\"displayName\":\"forecast-horizon-start-time\",\"type\":\"date\",\"example\":\"2019-02-05T00:00:00Z\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-horizon-end-time\",\"type\":\"date\",\"example\":\"2019-02-06T00:00:00Z\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-horizon-interval\",\"forecast-horizon-length\"]},{\"displayName\":\"forecast-hw-auto\",\"type\":\"boolean\",\"example\":\"true\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-hw-period\",\"type\":\"interval\",\"example\":\"1 year\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-hw-alpha\",\"type\":\"number\",\"example\":\"0.6\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-hw-beta\",\"type\":\"number\",\"example\":\"0.1\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-hw-gamma\",\"type\":\"number\",\"example\":\"0.1\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-include\",\"type\":\"string\",\"example\":\"HISTORY, FORECAST\",\"section\":\"series\",\"defaultValue\":\"FORECAST\",\"enum\":[\"FORECAST\",\"HISTORY\",\"RECONSTRUCTED\"],\"widget\":\"chart\"},{\"displayName\":\"forecast-name\",\"type\":\"string\",\"example\":\"hw5\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-score-interval\",\"type\":\"interval\",\"example\":\"1 day\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-ssa\",\"type\":\"boolean\",\"example\":\"true\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-ssa-decompose-eigentriple-limit\",\"type\":\"number\",\"example\":0,\"section\":\"series\",\"widget\":\"chart\",\"defaultValue\":0,\"minValue\":0},{\"displayName\":\"forecast-ssa-decompose-method\",\"type\":\"enum\",\"example\":\"TRUNCATED\",\"section\":\"series\",\"widget\":\"chart\",\"defaultValue\":\"AUTO\",\"enum\":[\"FULL\",\"TRUNCATED\",\"AUTO\"]},{\"displayName\":\"forecast-ssa-decompose-singular-value-threshold\",\"type\":\"integer\",\"example\":1,\"section\":\"series\",\"widget\":\"chart\",\"minValue\":0,\"maxValue\":{\"value\":100,\"excluded\":true}},{\"displayName\":\"forecast-ssa-decompose-window-length\",\"type\":\"number\",\"example\":\"50\",\"section\":\"series\",\"widget\":\"chart\",\"minValue\":{\"value\":0,\"excluded\":true},\"maxValue\":50},{\"displayName\":\"forecast-ssa-forecast-base\",\"type\":\"enum\",\"example\":\"RECONSTRUCTED\",\"section\":\"series\",\"widget\":\"chart\",\"enum\":[\"RECONSTRUCTED\",\"ORIGINAL\"]},{\"displayName\":\"forecast-ssa-forecast-method\",\"type\":\"enum\",\"example\":\"RECURRENT\",\"section\":\"series\",\"widget\":\"chart\",\"defaultValue\":\"RECURRENT\",\"enum\":[\"RECURRENT\",\"VECTOR\"]},{\"displayName\":\"forecast-ssa-group-auto-count\",\"type\":\"integer\",\"example\":\"5\",\"section\":\"series\",\"widget\":\"chart\",\"minValue\":0},{\"displayName\":\"forecast-ssa-group-auto-clustering-method\",\"type\":\"enum\",\"example\":\"NOVOSIBIRSK\",\"section\":\"series\",\"defaultValue\":\"HIERARCHICAL\",\"widget\":\"chart\",\"enum\":[\"HIERARCHICAL\",\"XMEANS\",\"NOVOSIBIRSK\"],\"excludes\":[\"forecast-ssa-group-manual-groups\"]},{\"displayName\":\"forecast-ssa-group-auto-clustering-params\",\"type\":\"object\",\"example\":\"{ \\\"v\\\": 0.5, \\\"c\\\": 0.45 }\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-ssa-group-manual-groups\"]},{\"displayName\":\"forecast-ssa-group-auto-stack\",\"type\":\"boolean\",\"example\":\"true\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-ssa-group-manual-groups\",\"forecast-ssa-group-auto-union\"]},{\"displayName\":\"forecast-ssa-group-auto-union\",\"type\":\"string\",\"example\":\"A;C-E , B;F-\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-ssa-group-manual-groups\",\"forecast-ssa-group-auto-stack\"]},{\"displayName\":\"forecast-ssa-group-manual-groups\",\"type\":\"string\",\"example\":\"1;3-6 , 2;7-\",\"section\":\"series\",\"widget\":\"chart\",\"excludes\":[\"forecast-ssa-group-auto-clustering-method\",\"forecast-ssa-group-auto-clustering-params\",\"forecast-ssa-group-auto-stack\",\"forecast-ssa-group-auto-union\"]},{\"displayName\":\"forecast-ssa-reconstruct-averaging-function\",\"type\":\"enum\",\"example\":\"AVG\",\"defaultValue\":\"MEDIAN\",\"section\":\"series\",\"widget\":\"chart\",\"enum\":[\"AVG\",\"MEDIAN\"]},{\"displayName\":\"forecast-ssa-reconstruct-fourier\",\"type\":\"boolean\",\"example\":\"true\",\"section\":\"series\",\"widget\":\"chart\"},{\"displayName\":\"forecast-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"stroke: magenta;\",\"section\":\"widget\",\"widget\":\"chart\"},{\"displayName\":\"format\",\"type\":\"string\",\"example\":\"kilobytes\",\"possibleValues\":[{\"value\":\"bytes\"},{\"value\":\"kilobytes\"},{\"value\":\"megawatt\"},{\"value\":\"kilowatthour\"},{\"value\":\"hertz\"},{\"value\":\"kilojoule\"},{\"value\":\"million watt\"},{\"value\":\"thousands\"}],\"section\":\"series\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"numeric\",\"type\":\"function\"},{\"name\":\"decimal\",\"type\":\"function\"},{\"name\":\"round\",\"type\":\"function\"},{\"name\":\"fixed\",\"type\":\"function\"},{\"name\":\"binary\",\"type\":\"function\"},{\"name\":\"currency\",\"type\":\"function\"},{\"name\":\"percent\",\"type\":\"function\"},{\"name\":\"fraction\",\"type\":\"function\"},{\"name\":\"iso\",\"type\":\"function\"},{\"name\":\"json\",\"type\":\"function\"},{\"name\":\"precise\",\"type\":\"function\",\"args\":[{\"name\":\"n\",\"type\":\"number\"}]}]}},{\"displayName\":\"format-axis\",\"type\":\"string\",\"example\":\"Math.round(value * 10)/10 + \\\"%\\\"\",\"section\":\"widget\",\"widget\":\"gauge\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"numeric\",\"type\":\"function\"},{\"name\":\"decimal\",\"type\":\"function\"},{\"name\":\"round\",\"type\":\"function\"},{\"name\":\"fixed\",\"type\":\"function\"},{\"name\":\"binary\",\"type\":\"function\"},{\"name\":\"currency\",\"type\":\"function\"},{\"name\":\"percent\",\"type\":\"function\"},{\"name\":\"fraction\",\"type\":\"function\"},{\"name\":\"iso\",\"type\":\"function\"},{\"name\":\"json\",\"type\":\"function\"}]}},{\"displayName\":\"format-counter\",\"type\":\"string\",\"example\":\"d3.format(\\\"0.3f\\\")\",\"section\":\"widget\",\"widget\":\"gauge\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"numeric\",\"type\":\"function\"},{\"name\":\"decimal\",\"type\":\"function\"},{\"name\":\"round\",\"type\":\"function\"},{\"name\":\"fixed\",\"type\":\"function\"},{\"name\":\"binary\",\"type\":\"function\"},{\"name\":\"currency\",\"type\":\"function\"},{\"name\":\"percent\",\"type\":\"function\"},{\"name\":\"fraction\",\"type\":\"function\"},{\"name\":\"iso\",\"type\":\"function\"},{\"name\":\"json\",\"type\":\"function\"}]}},{\"displayName\":\"format-headers\",\"type\":\"boolean\",\"example\":true,\"section\":\"column\",\"widget\":\"property\"},{\"displayName\":\"format-size\",\"type\":\"string\",\"example\":\"kilobytes\",\"section\":\"widget\",\"widget\":\"treemap\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"numeric\",\"type\":\"function\"},{\"name\":\"decimal\",\"type\":\"function\"},{\"name\":\"round\",\"type\":\"function\"},{\"name\":\"fixed\",\"type\":\"function\"},{\"name\":\"binary\",\"type\":\"function\"},{\"name\":\"currency\",\"type\":\"function\"},{\"name\":\"percent\",\"type\":\"function\"},{\"name\":\"fraction\",\"type\":\"function\"},{\"name\":\"iso\",\"type\":\"function\"},{\"name\":\"json\",\"type\":\"function\"}]}},{\"displayName\":\"format-tip\",\"type\":\"string\",\"example\":\"d3.format(\\\"0.1f\\\")\",\"section\":\"widget\",\"widget\":\"gauge\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"numeric\",\"type\":\"function\"},{\"name\":\"decimal\",\"type\":\"function\"},{\"name\":\"round\",\"type\":\"function\"},{\"name\":\"fixed\",\"type\":\"function\"},{\"name\":\"binary\",\"type\":\"function\"},{\"name\":\"currency\",\"type\":\"function\"},{\"name\":\"percent\",\"type\":\"function\"},{\"name\":\"fraction\",\"type\":\"function\"},{\"name\":\"iso\",\"type\":\"function\"},{\"name\":\"json\",\"type\":\"function\"}]}},{\"displayName\":\"frequency\",\"type\":\"interval\",\"example\":\"30 minute\",\"section\":\"series\"},{\"displayName\":\"gradient-count\",\"type\":\"string\",\"example\":\"5\",\"minValue\":1,\"section\":\"widget\",\"widget\":[\"gauge\",\"treemap\",\"calendar\"]},{\"displayName\":\"gradient-intensity\",\"type\":\"string\",\"example\":\"-25%/75%\",\"section\":\"widget\",\"widget\":\"gauge\"},{\"displayName\":\"group\",\"section\":\"widget\",\"widget\":\"bar\",\"type\":\"string\",\"example\":\"region\",\"defaultValue\":\"metric\"},{\"displayName\":\"group-first\",\"type\":\"boolean\",\"example\":false,\"section\":\"series\"},{\"displayName\":\"group-interpolate\",\"type\":\"enum\",\"section\":\"series\",\"example\":\"LINEAR\",\"defaultValue\":\"NONE\",\"enum\":[\"LINEAR\",\"PREVIOUS\",\"NONE\",\"NEXT\",\"VALUE\\\\(\\\\d+\\\\)\"]},{\"displayName\":\"group-interpolate-extend\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\"},{\"displayName\":\"group-keys\",\"type\":\"string\",\"example\":\"entity, type\",\"section\":\"series\"},{\"displayName\":\"group-label\",\"type\":\"string\",\"example\":\"Tables\",\"widget\":\"bar\",\"section\":\"series\"},{\"displayName\":\"group-period\",\"type\":\"interval\",\"section\":\"series\",\"example\":\"1 month\",\"enum\":[\"auto\"]},{\"displayName\":\"group-statistic\",\"type\":\"enum\",\"example\":\"sum\",\"section\":\"series\",\"enum\":[\"count\",\"min\",\"max\",\"sum\",\"avg\",\"percentile\\\\((\\\\d{1,2}(\\\\.\\\\d)?|100)\\\\)\",\"median\",\"standard_deviation\",\"first\",\"last\",\"delta\",\"counter\",\"wtavg\",\"wavg\",\"min_value_time\",\"max_value_time\",\"threshold_count\",\"threshold_duration\",\"threshold_percent\"]},{\"displayName\":\"header-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"background-color: steelblue\",\"section\":\"widget\"},{\"displayName\":\"height-units\",\"type\":\"number\",\"minValue\":0,\"example\":2,\"section\":\"widget\"},{\"displayName\":\"hidden\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\",\"defaultValue\":false},{\"displayName\":\"hide-column\",\"type\":\"string\",\"example\":\"value <= 0 \\\\| column.key.indexOf('paging') == 0\",\"multiLine\":true,\"section\":\"column\",\"widget\":\"property\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"value\",\"type\":\"number\"},{\"name\":\"alert\",\"type\":\"number\"},{\"name\":\"row\",\"type\":\"object\"},{\"name\":\"column\",\"type\":\"object\"},{\"name\":\"widget\",\"type\":\"object\"},{\"name\":\"el\",\"type\":\"array\"},{\"name\":\"rowEl\",\"type\":\"array\"},{\"name\":\"td\",\"type\":\"boolean\"},{\"name\":\"filter\",\"type\":\"function\",\"args\":[{\"name\":\"filter\",\"type\":\"function\"}]},{\"name\":\"dialog\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]},{\"name\":\"series\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]}]}},{\"displayName\":\"hide-empty-columns\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"widget\":\"bar\",\"section\":\"widget\"},{\"displayName\":\"hide-empty-series\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"table\",\"section\":\"widget\"},{\"displayName\":\"hide-if-empty\",\"type\":\"boolean\",\"example\":true,\"widget\":\"table\",\"section\":\"series\"},{\"displayName\":\"horizontal\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"widget\":\"bar\",\"section\":\"widget\"},{\"displayName\":\"horizontal-grid\",\"type\":\"enum\",\"example\":false,\"enum\":[],\"section\":\"widget\",\"override\":{\"[widget == 'chart']\":{\"enum\":[\"true\",\"false\"]},\"[widget == 'histogram']\":{\"enum\":[\"none\",\"density\",\"fractions\",\"frequency\",\"false\"]}}},{\"displayName\":\"hour-format\",\"type\":\"string\",\"example\":\"%I %p\"},{\"displayName\":\"icon\",\"type\":\"string\",\"example\":\"value > 1 ? 'exclamation-sign' : 'ok'\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"number\"}]}},{\"displayName\":\"icon-alert-expression\",\"type\":\"string\",\"example\":\"value('s1') > 10\",\"widget\":\"pie\",\"section\":\"series\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"required\":true,\"type\":\"string\"}]}]}},{\"displayName\":\"icon-alert-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"return alert > 12000 ? 'fill: red' : 'fill:green';\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}]}},{\"displayName\":\"icon-color\",\"type\":\"string\",\"example\":\"green\",\"section\":\"series\",\"widget\":\"text\"},{\"displayName\":\"icon-position\",\"type\":\"enum\",\"example\":\"bottom\",\"section\":\"widget\",\"widget\":\"text\",\"enum\":[\"bottom\",\"right\",\"left\",\"top\"]},{\"displayName\":\"icon-size\",\"type\":\"enum\",\"example\":\"auto\",\"section\":\"widget\",\"widget\":\"text\",\"enum\":[\"auto\"]},{\"displayName\":\"id\",\"type\":\"string\",\"example\":\"queue_1\",\"widget\":\"graph\"},{\"displayName\":\"interpolate\",\"type\":\"enum\",\"example\":\"LINEAR\",\"defaultValue\":\"NONE\",\"section\":\"series\",\"enum\":[\"LINEAR\",\"PREVIOUS\",\"NONE\",\"NEXT\",\"VALUE\\\\(\\\\d+\\\\)\"]},{\"displayName\":\"interpolate-boundary\",\"type\":\"enum\",\"section\":\"series\",\"example\":\"INNER\",\"enum\":[\"INNER\",\"OUTER\"]},{\"displayName\":\"interpolate-extend\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\"},{\"displayName\":\"interpolate-fill\",\"type\":\"enum\",\"example\":\"true\",\"section\":\"series\",\"enum\":[\"true\",\"false\",\"\\\\d+\"]},{\"displayName\":\"interpolate-function\",\"type\":\"enum\",\"example\":\"LINEAR\",\"section\":\"series\",\"enum\":[\"LINEAR\",\"AUTO\",\"PREVIOS\"]},{\"displayName\":\"interpolate-period\",\"type\":\"interval\",\"example\":\"1 minute\",\"section\":\"series\"},{\"displayName\":\"interval-format\",\"type\":\"string\",\"example\":\"%H:%M\"},{\"displayName\":\"join\",\"type\":\"string\",\"section\":\"widget\",\"widget\":\"property\",\"example\":\"true\"},{\"displayName\":\"key\",\"type\":\"string\",\"example\":\"%cpu\",\"section\":\"column\"},{\"displayName\":\"key-tag-expression\",\"type\":\"string\",\"example\":\"tags.docker-host = 'nurswghbs001'\",\"section\":\"property\",\"widget\":\"property\"},{\"displayName\":\"label\",\"type\":\"string\",\"multiLine\":true,\"example\":\"CPU Busy - nurswgvml007\",\"section\":\"series\"},{\"displayName\":\"label-format\",\"type\":\"string\",\"example\":\"tagName\",\"section\":\"series\"},{\"displayName\":\"last\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"section\":\"property\",\"widget\":\"property\"},{\"displayName\":\"last-marker\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"chart\",\"section\":\"widget\"},{\"displayName\":\"last-value-label\",\"type\":\"string\",\"example\":\"none\",\"defaultValue\":\"right\",\"widget\":\"chart\",\"section\":\"widget\"},{\"displayName\":\"layout\",\"type\":\"enum\",\"example\":\"rectangle\",\"section\":\"widget\",\"widget\":\"graph\",\"defaultValue\":\"circle\",\"enum\":[\"rectangle\",\"circle\"]},{\"displayName\":\"left-axis\",\"type\":\"enum\",\"example\":\"fraction\",\"defaultValue\":\"frequency\",\"widget\":\"histogram\",\"section\":\"widget\",\"enum\":[\"none\",\"density\",\"fraction\",\"frequency\"]},{\"displayName\":\"left-units\",\"type\":\"number\",\"example\":1,\"section\":\"widget\",\"minValue\":0},{\"displayName\":\"legend-last-value\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"widget\":\"chart\",\"section\":\"widget\"},{\"displayName\":\"legend-position\",\"type\":\"string\",\"example\":\"left\",\"section\":\"widget\"},{\"displayName\":\"legend-ticks\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\"},{\"displayName\":\"legend-value\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\"},{\"displayName\":\"limit\",\"type\":\"integer\",\"example\":1000,\"section\":\"widget\"},{\"displayName\":\"linear-zoom\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"link-alert-expression\",\"widget\":\"graph\",\"type\":\"string\",\"section\":\"series\",\"example\":\"value('s1') > 10\",\"script\":{\"returnValue\":\"boolean\",\"fields\":[{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"required\":true,\"type\":\"string\"}]}]}},{\"displayName\":\"link-alert-style\",\"multiLine\":true,\"section\":\"series\",\"type\":\"string\",\"widget\":\"graph\",\"example\":\"if (alert > 99) return 'stroke-width:3px';\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}]}},{\"displayName\":\"link-animate\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"link-color-range\",\"type\":\"string\",\"example\":\"silver, steelblue, orange\",\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"link-colors\",\"type\":\"string\",\"example\":\"blue, green, orange, red\",\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"link-data\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"link-labels\",\"type\":\"boolean\",\"example\":true,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"link-label-zoom-threshold\",\"type\":\"number\",\"example\":1,\"defaultValue\":0,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"links\",\"widget\":\"graph\",\"section\":\"series\",\"type\":\"string\",\"example\":\"alpha.queue - beta.queue\"},{\"displayName\":\"link-thresholds\",\"type\":\"string\",\"example\":\"Math.max(0.1, percentile(50)), percentile(95)\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"percentile\",\"type\":\"function\"},{\"name\":\"max\",\"type\":\"function\"},{\"name\":\"min\",\"type\":\"function\"},{\"name\":\"avg\",\"type\":\"function\"},{\"name\":\"sum\",\"type\":\"function\"}]}},{\"displayName\":\"link-value\",\"widget\":\"graph\",\"section\":\"series\",\"type\":\"string\",\"example\":\"Math.max(0, value('alias'))\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"link-width-order\",\"type\":\"enum\",\"example\":\"top\",\"widget\":\"graph\",\"section\":\"widget\",\"defaultValue\":\"undefined\",\"enum\":[\"top\",\"bottom\",\"undefined\"]},{\"displayName\":\"link-widths\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"1, 1, 2, 3\"},{\"displayName\":\"load-future-data\",\"type\":\"boolean\",\"example\":true,\"widget\":\"chart\",\"section\":\"series\"},{\"displayName\":\"marker-format\",\"type\":\"string\",\"example\":\"metric:entity\",\"widget\":\"pie\",\"section\":\"series\"},{\"displayName\":\"markers\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true,\"section\":\"series\"},{\"displayName\":\"max-font-size\",\"type\":\"integer\",\"example\":14,\"defaultValue\":100},{\"displayName\":\"maximum\",\"type\":\"number\",\"example\":42,\"section\":\"series\"},{\"displayName\":\"max-range\",\"type\":\"number\",\"example\":40,\"section\":\"widget\"},{\"displayName\":\"max-range-force\",\"type\":\"number\",\"example\":100,\"section\":\"widget\"},{\"displayName\":\"max-range-right\",\"type\":\"number\",\"example\":500000,\"section\":\"widget\"},{\"displayName\":\"max-range-right-force\",\"type\":\"number\",\"example\":100,\"section\":\"widget\"},{\"displayName\":\"max-ring-width\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"number\",\"defaultValue\":0.5,\"example\":0.6},{\"displayName\":\"max-threshold\",\"section\":\"series\",\"type\":\"number\",\"example\":60},{\"displayName\":\"menu\",\"type\":\"enum\",\"example\":\"update\",\"section\":\"widget\",\"enum\":[\"update\"]},{\"displayName\":\"merge-columns\",\"type\":\"string\",\"example\":\"entity, tags\",\"section\":\"widget\"},{\"displayName\":\"merge-fields\",\"section\":\"series\",\"type\":\"string\",\"example\":\"mount_point\"},{\"displayName\":\"method-path\",\"section\":\"configuration\",\"type\":\"enum\",\"example\":\"/messages/query\",\"defaultValue\":\"/series/query\",\"enum\":[\"/alerts/query\",\"/series/query\",\"/messages/query\",\"/properties/query\"]},{\"displayName\":\"metric\",\"type\":\"string\",\"example\":\"cpu_busy\",\"section\":\"series\",\"excludes\":[\"attribute\",\"table\"]},{\"displayName\":\"metric-label\",\"widget\":\"bar\",\"section\":\"series\",\"type\":\"string\",\"example\":\"CPU Busy, %\"},{\"displayName\":\"min-caption-size\",\"widget\":\"pie\",\"section\":\"widget\",\"type\":\"integer\",\"example\":42},{\"displayName\":\"min-font-size\",\"type\":\"integer\",\"example\":10},{\"displayName\":\"minimum\",\"section\":\"series\",\"defaultValue\":0,\"type\":\"number\",\"example\":42},{\"displayName\":\"minor-ticks\",\"type\":\"integer\",\"example\":4,\"widget\":\"gauge\",\"section\":\"widget\"},{\"displayName\":\"min-range\",\"section\":\"widget\",\"type\":\"number\",\"example\":10},{\"displayName\":\"min-range-force\",\"section\":\"widget\",\"type\":\"number\",\"example\":0},{\"displayName\":\"min-range-right\",\"section\":\"widget\",\"type\":\"number\",\"example\":250000},{\"displayName\":\"min-range-right-force\",\"section\":\"widget\",\"type\":\"number\",\"example\":0},{\"displayName\":\"min-ring-width\",\"minValue\":0,\"defaultValue\":0.3,\"type\":\"number\",\"example\":0.4,\"widget\":\"graph\",\"section\":\"widget\"},{\"displayName\":\"min-severity\",\"type\":\"string\",\"widget\":\"console\",\"section\":\"widget\",\"example\":\"3\"},{\"displayName\":\"min-threshold\",\"defaultValue\":0,\"type\":\"number\",\"section\":\"series\",\"example\":10},{\"displayName\":\"mode\",\"type\":\"enum\",\"example\":\"column\",\"section\":[\"widget\",\"series\"],\"enum\":[\"non-hierarchy\",\"hierarchy\",\"column\",\"range\",\"stack\",\"column-stack\",\"sleek\",\"half\",\"default\",\"row\",\"pie\",\"ring\",\"auto\",\"line\"],\"override\":{\"[widget == 'chart']\":{\"enum\":[\"line\",\"stack\",\"column\",\"range\",\"column-stack\"]},\"[widget == 'gauge']\":{\"enum\":[\"sleek\",\"half\",\"default\"]},\"[widget == 'pie']\":{\"enum\":[\"pie\",\"ring\"]},\"[widget == 'histogram']\":{\"enum\":[\"stack\"]},\"[widget == 'treemap']\":{\"enum\":[\"row\",\"column\",\"auto\"]},\"[widget == 'graph']\":{\"enum\":[\"hierarchy\",\"non-hierarchy\"]}}},{\"displayName\":\"moving-average\",\"type\":\"boolean\",\"widget\":\"chart\",\"section\":\"widget\",\"example\":true},{\"displayName\":\"multiple-column\",\"type\":\"boolean\",\"defaultValue\":false,\"widget\":\"bar\",\"section\":\"column\",\"example\":true},{\"displayName\":\"multiple-series\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"negative-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"fill: red\",\"widget\":\"chart\",\"section\":\"widget\"},{\"displayName\":\"node-alert-expression\",\"type\":\"string\",\"example\":\"value > 5\",\"script\":{\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}],\"returnValue\":\"boolean\"}},{\"displayName\":\"node-alert-style\",\"multiLine\":true,\"widget\":\"graph\",\"type\":\"string\",\"example\":\"if (alert > 99) return 'fill:red';\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}]}},{\"displayName\":\"node-collapse\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"node-colors\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"red, orange, whitesmoke, limegreen, green\"},{\"displayName\":\"node-connect\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"node-data\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"node-labels\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"node-label-zoom-threshold\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"number\",\"example\":2},{\"displayName\":\"node-radius\",\"type\":\"integer\",\"defaultValue\":5,\"widget\":\"graph\",\"section\":\"widget\",\"example\":20},{\"displayName\":\"node-radiuses\",\"type\":\"string\",\"widget\":\"graph\",\"section\":\"widget\",\"example\":\"10, 20, 30, 40\"},{\"displayName\":\"nodes\",\"widget\":\"graph\",\"type\":\"string\",\"example\":\"queue_1-queue_2\"},{\"displayName\":\"node-thresholds\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"min(), 0, max()\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"percentile\",\"type\":\"function\"},{\"name\":\"max\",\"type\":\"function\"},{\"name\":\"min\",\"type\":\"function\"},{\"name\":\"avg\",\"type\":\"function\"},{\"name\":\"sum\",\"type\":\"function\"}]}},{\"displayName\":\"node-value\",\"widget\":\"graph\",\"section\":\"series\",\"type\":\"string\",\"example\":\"Math.max(0, value('alias'))\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"offset\",\"type\":\"integer\",\"widget\":\"property\",\"section\":\"property\",\"example\":5000},{\"displayName\":\"offset-bottom\",\"section\":\"configuration\",\"type\":\"integer\",\"example\":50},{\"displayName\":\"offset-left\",\"section\":\"configuration\",\"type\":\"integer\",\"example\":50},{\"displayName\":\"offset-right\",\"section\":\"configuration\",\"type\":\"integer\",\"example\":50},{\"displayName\":\"offset-top\",\"section\":\"configuration\",\"type\":\"integer\",\"example\":50},{\"displayName\":\"on-change\",\"section\":\"dropdown\",\"type\":\"string\",\"multiLine\":false,\"example\":\"widget.post.queries[0].type = this.value; widget.reload();\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"widget\",\"type\":\"object\"}]}},{\"displayName\":\"on-click\",\"section\":\"column\",\"type\":\"string\",\"example\":\"dialog({ series: [s], disconnectValue: 0 })\",\"multiLine\":true,\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"value\",\"type\":\"number\"},{\"name\":\"alert\",\"type\":\"number\"},{\"name\":\"row\",\"type\":\"object\"},{\"name\":\"column\",\"type\":\"object\"},{\"name\":\"widget\",\"type\":\"object\"},{\"name\":\"el\",\"type\":\"array\"},{\"name\":\"rowEl\",\"type\":\"array\"},{\"name\":\"td\",\"type\":\"boolean\"},{\"name\":\"filter\",\"type\":\"function\",\"args\":[{\"name\":\"filter\",\"type\":\"function\"}]},{\"name\":\"dialog\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]},{\"name\":\"series\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]}]}},{\"displayName\":\"on-series-click\",\"type\":\"string\",\"multiLine\":true,\"example\":\"callDialog({ type: 'page', url: 'http://www.axibase.com/' })\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"series\",\"type\":\"object\"},{\"name\":\"widget\"},{\"name\":\"config\",\"type\":\"object\"},{\"name\":\"interval\",\"type\":\"object\"}]}},{\"displayName\":\"on-series-double-click\",\"multiLine\":true,\"type\":\"string\",\"example\":\"''\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"series\",\"type\":\"object\"},{\"name\":\"widget\"},{\"name\":\"config\",\"type\":\"object\"},{\"name\":\"interval\",\"type\":\"object\"}]}},{\"displayName\":\"options\",\"multiLine\":true,\"section\":\"dropdown\",\"type\":\"string\",\"example\":\"javascript: requestMetricsSeriesValues(\\\"entity\\\")\"},{\"displayName\":\"padding\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"1px\"},{\"displayName\":\"palette-ticks\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false},{\"displayName\":\"parent\",\"widget\":\"graph\",\"section\":\"node\",\"type\":\"string\",\"example\":\"manager_1\"},{\"displayName\":\"parse-numbers\",\"type\":\"boolean\",\"example\":true,\"section\":\"column\",\"widget\":\"property\",\"defaultValue\":false},{\"displayName\":\"path\",\"section\":\"configuration\",\"type\":\"string\",\"example\":\"/messages/query\"},{\"displayName\":\"percentile-markers\",\"defaultValue\":\"none\",\"type\":\"enum\",\"example\":\"all\",\"widget\":\"box\",\"section\":\"widget\",\"enum\":[\"all\",\"none\",\"top\",\"bottom\"]},{\"displayName\":\"percentiles\",\"type\":\"string\",\"example\":\"10%/90%\"},{\"displayName\":\"period\",\"type\":\"interval\",\"example\":\"15 minute\",\"section\":\"series\",\"enum\":[\"auto\"]},{\"displayName\":\"periods\",\"section\":\"configuration\",\"type\":\"string\",\"example\":\"20 minute, 4 hour\"},{\"displayName\":\"pin-radius\",\"widget\":\"gauge\",\"section\":\"widget\",\"type\":\"number\",\"example\":0.2,\"minValue\":0,\"maxValue\":1},{\"displayName\":\"pointer-position\",\"widget\":\"chart\",\"section\":\"series\",\"type\":\"string\",\"example\":\"right\",\"defaultValue\":\"false\"},{\"displayName\":\"position\",\"section\":\"column\",\"type\":\"string\",\"example\":\"first\"},{\"displayName\":\"primary-key\",\"widget\":\"console\",\"section\":\"widget\",\"type\":\"string\",\"defaultValue\":\"id\",\"example\":\"id\"},{\"displayName\":\"principal\",\"type\":\"string\",\"example\":\"username\"},{\"displayName\":\"range-merge\",\"type\":\"boolean\",\"section\":\"widget\",\"example\":true,\"defaultValue\":false},{\"displayName\":\"range-offset\",\"widget\":\"histogram\",\"section\":\"widget\",\"type\":\"number\",\"example\":50},{\"displayName\":\"range-select-end\",\"widget\":\"histogram\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"alert(min + ',' + max)\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"min\",\"type\":\"number\"},{\"name\":\"max\",\"type\":\"number\"}]}},{\"displayName\":\"range-select-start\",\"widget\":\"histogram\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"alert(min + ',' + max)\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"min\",\"type\":\"number\"},{\"name\":\"max\",\"type\":\"number\"}]}},{\"displayName\":\"rate\",\"type\":\"interval\",\"example\":\"15 second\",\"section\":\"series\"},{\"displayName\":\"rate-counter\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\"},{\"displayName\":\"ratio\",\"type\":\"number\",\"example\":0.2,\"widget\":\"treemap\",\"section\":\"widget\"},{\"displayName\":\"refresh-interval\",\"type\":\"interval\",\"example\":\"5 second\",\"section\":\"series\"},{\"displayName\":\"reload\",\"section\":\"dropdown\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"replace-underscore\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false,\"widget\":\"table\"},{\"displayName\":\"replace-value\",\"type\":\"string\",\"example\":\"value < 50 ? null : value\",\"section\":\"series\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"value\",\"type\":\"number\"},{\"name\":\"time\",\"type\":\"integer\"},{\"name\":\"previousValue\",\"type\":\"number\"},{\"name\":\"previousTime\",\"type\":\"integer\"}]}},{\"displayName\":\"responsive\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true,\"defaultValue\":false},{\"displayName\":\"retain-time-span\",\"widget\":\"chart\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"retry-refresh-interval\",\"type\":\"interval\",\"example\":\"5 minute\",\"section\":\"series\"},{\"displayName\":\"right-axis\",\"type\":\"enum\",\"example\":\"density\",\"defaultValue\":\"none\",\"widget\":\"histogram\",\"section\":\"widget\",\"enum\":[\"density\",\"none\",\"fraction\",\"frequency\"]},{\"displayName\":\"ring-width\",\"widget\":\"gauge\",\"type\":\"number\",\"minValue\":0,\"maxValue\":1,\"section\":\"widget\",\"example\":0.2},{\"displayName\":\"rotate-legend-ticks\",\"section\":\"widget\",\"type\":\"boolean\",\"defaultValue\":false,\"example\":true},{\"displayName\":\"rotate-palette-ticks\",\"type\":\"boolean\",\"section\":\"widget\",\"example\":false,\"defaultValue\":true},{\"displayName\":\"rotate-ticks\",\"type\":\"string\",\"example\":\"45\",\"section\":\"widget\",\"defaultValue\":\"90\"},{\"displayName\":\"row-alert-style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"background-color: orange\",\"section\":\"column\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"alert\",\"type\":\"number\"}]}},{\"displayName\":\"row-style\",\"multiLine\":true,\"type\":\"string\",\"section\":\"column\",\"example\":\"value > 1 ? 'background: orange' : null\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"value\",\"type\":\"number\"},{\"name\":\"alert\",\"type\":\"number\"},{\"name\":\"row\",\"type\":\"object\"},{\"name\":\"column\",\"type\":\"object\"},{\"name\":\"widget\",\"type\":\"object\"},{\"name\":\"el\",\"type\":\"array\"},{\"name\":\"rowEl\",\"type\":\"array\"},{\"name\":\"td\",\"type\":\"boolean\"},{\"name\":\"filter\",\"type\":\"function\",\"args\":[{\"name\":\"filter\",\"type\":\"function\"}]},{\"name\":\"dialog\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]},{\"name\":\"series\",\"type\":\"function\",\"args\":[{\"name\":\"request\",\"type\":\"object\"}]}]}},{\"displayName\":\"rule\",\"type\":\"string\",\"example\":\"cpu_busy_prod\",\"widget\":\"console\",\"section\":\"widget\"},{\"displayName\":\"scale\",\"type\":\"number\",\"example\":1.5,\"section\":\"widget\"},{\"displayName\":\"scale-x\",\"type\":\"number\",\"example\":0.7,\"section\":\"widget\"},{\"displayName\":\"scale-y\",\"type\":\"number\",\"example\":0.7,\"section\":\"widget\"},{\"displayName\":\"script\",\"type\":\"string\",\"example\":\"console.log(widget.config)\",\"script\":{\"returnValue\":\"void\",\"fields\":[{\"name\":\"widget\",\"type\":\"object\"},{\"name\":\"config\",\"type\":\"object\"}]}},{\"displayName\":\"selector-mode\",\"section\":\"widget\",\"widget\":\"pie\",\"type\":\"enum\",\"example\":\"highlight\",\"enum\":[\"highlight\",\"expand\"]},{\"displayName\":\"series\",\"widget\":\"graph\",\"section\":[\"node\",\"link\"],\"type\":\"string\",\"example\":\"series-1\"},{\"displayName\":\"series-labels\",\"widget\":\"pie\",\"section\":\"series\",\"type\":\"string\",\"example\":\"inside\",\"defaultValue\":\"none\",\"script\":{\"returnValue\":\"string\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"series-limit\",\"type\":\"integer\",\"section\":\"series\",\"example\":10},{\"displayName\":\"series-type\",\"widget\":\"chart\",\"type\":\"string\",\"section\":\"series\",\"example\":\"s3\"},{\"displayName\":\"series-value\",\"type\":\"string\",\"example\":\"avg()\",\"section\":\"column\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"server-aggregate\",\"type\":\"boolean\",\"example\":true,\"section\":\"series\"},{\"displayName\":\"severity\",\"type\":\"integer\",\"widget\":\"console\",\"section\":\"widget\",\"example\":6,\"minValue\":0,\"maxValue\":7},{\"displayName\":\"severity-style\",\"multiLine\":true,\"type\":\"enum\",\"example\":\"row\",\"widget\":\"console\",\"section\":\"widget\",\"enum\":[\"row\",\"column\"]},{\"displayName\":\"show-tag-names\",\"type\":\"boolean\",\"example\":true,\"section\":\"widget\",\"defaultValue\":false},{\"displayName\":\"size\",\"type\":\"string\",\"defaultValue\":\"1\",\"example\":\"3\",\"widget\":\"treemap\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"size-name\",\"type\":\"string\",\"example\":\"sum\",\"widget\":\"treemap\",\"section\":\"widget\"},{\"displayName\":\"smooth\",\"type\":\"enum\",\"section\":\"series\",\"example\":\"AVG\",\"enum\":[\"AVG\",\"EMA\",\"WAVG\",\"WTAVG\"]},{\"displayName\":\"smooth-count\",\"type\":\"integer\",\"example\":50,\"minValue\":0,\"section\":\"series\"},{\"displayName\":\"smooth-factor\",\"type\":\"number\",\"section\":\"series\",\"example\":0.5,\"minValue\":0,\"maxValue\":1},{\"displayName\":\"smooth-incomplete-value\",\"type\":\"string\",\"defaultValue\":\"null\",\"example\":\"NaN\"},{\"displayName\":\"smooth-interval\",\"type\":\"interval\",\"example\":\"15 minute\",\"section\":\"series\"},{\"displayName\":\"smooth-minimum-count\",\"type\":\"integer\",\"section\":\"series\",\"example\":10},{\"displayName\":\"smooth-range\",\"type\":\"integer\",\"section\":\"series\",\"example\":60000},{\"displayName\":\"sort\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"metric, value desc\"},{\"displayName\":\"source\",\"widget\":\"console\",\"section\":\"widget\",\"type\":\"enum\",\"defaultValue\":\"alert\",\"example\":\"message\",\"enum\":[\"message\",\"alert\"]},{\"displayName\":\"sql\",\"section\":\"widget\",\"example\":\"SELECT time, entity, value FROM cpu_busy WHERE time > now - 5 * minute\",\"multiLine\":true,\"type\":\"string\"},{\"displayName\":\"stack\",\"widget\":\"bar\",\"type\":\"boolean\",\"section\":\"widget\",\"example\":false,\"defaultValue\":true,\"override\":{\"[widget == 'chart']\":{\"deprecated\":\"This setting is deprecated in timechart. Use `mode = stack` instead\"}}},{\"displayName\":\"start-time\",\"type\":\"date\",\"example\":\"2017-04-01T10:15:00Z\",\"section\":\"widget\"},{\"displayName\":\"start-working-minutes\",\"section\":\"series\",\"type\":\"integer\",\"defaultValue\":0,\"minValue\":0,\"example\":10},{\"displayName\":\"statistic\",\"type\":\"enum\",\"example\":\"avg\",\"section\":\"series\",\"enum\":[\"count\",\"detail\",\"min\",\"max\",\"sum\",\"avg\",\"percentile\\\\((\\\\d{1,2}(\\\\.\\\\d)?|100)\\\\)\",\"median\",\"standard_deviation\",\"first\",\"last\",\"delta\",\"counter\",\"wtavg\",\"wavg\",\"min_value_time\",\"max_value_time\",\"threshold_count\",\"threshold_duration\",\"threshold_percent\"]},{\"displayName\":\"statistics\",\"type\":\"enum\",\"example\":\"last\",\"section\":\"series\",\"enum\":[\"count\",\"min\",\"max\",\"sum\",\"avg\",\"percentile\\\\((\\\\d{1,2}(\\\\.\\\\d)?|100)\\\\)\",\"median\",\"standard_deviation\",\"first\",\"last\",\"delta\",\"counter\",\"wtavg\",\"wavg\",\"min_value_time\",\"max_value_time\",\"threshold_count\",\"threshold_duration\",\"threshold_percent\"]},{\"displayName\":\"step-line\",\"widget\":\"chart\",\"section\":\"series\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"style\",\"multiLine\":true,\"type\":\"string\",\"example\":\"stroke-width: 4; color: green\"},{\"displayName\":\"summarize-period\",\"type\":\"interval\",\"example\":\"1 hour\",\"enum\":[\"auto\"]},{\"displayName\":\"summarize-statistic\",\"type\":\"enum\",\"example\":\"percentile(75)\",\"enum\":[\"avg\",\"max\",\"min\",\"sum\",\"count\",\"last\",\"percentile\\\\((\\\\d{1,2}(\\\\.\\\\d)?|100)\\\\)\",\"median\"]},{\"displayName\":\"table\",\"type\":\"string\",\"example\":\"klz_disk\",\"section\":\"series\",\"excludes\":[\"metric\"]},{\"displayName\":\"table-header-style\",\"multiLine\":true,\"section\":\"widget\",\"type\":\"string\",\"example\":\"display: none\"},{\"displayName\":\"tag\",\"type\":\"string\",\"section\":\"column\",\"example\":\"file_system\"},{\"displayName\":\"tag-expression\",\"type\":\"string\",\"section\":\"series\",\"example\":\"tags.file_system NOT LIKE '/m*'\"},{\"displayName\":\"tag-offset\",\"type\":\"integer\",\"widget\":\"property\",\"section\":\"property\",\"example\":15000},{\"displayName\":\"tags-dropdowns\",\"section\":\"widget\",\"type\":\"boolean\",\"example\":true},{\"displayName\":\"tags-dropdowns-style\",\"multiLine\":true,\"type\":\"string\",\"section\":\"widget\",\"example\":\"max-width: 150px\"},{\"displayName\":\"tension\",\"widget\":\"graph\",\"type\":\"number\",\"minValue\":0,\"maxValue\":1,\"defaultValue\":0.9,\"example\":0.8},{\"displayName\":\"text\",\"type\":\"string\",\"example\":\"Option 3\"},{\"displayName\":\"thresholds\",\"type\":\"string\",\"example\":\"0, 50, 90, 100\",\"section\":\"series\",\"widget\":[\"gauge\",\"treemap\",\"calendar\"],\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"ticks\",\"type\":\"integer\",\"section\":\"widget\",\"example\":10,\"defaultValue\":5},{\"displayName\":\"ticks-right\",\"type\":\"integer\",\"section\":\"widget\",\"example\":10,\"defaultValue\":5},{\"displayName\":\"ticks-time\",\"type\":\"integer\",\"section\":\"widget\",\"example\":20,\"defaultValue\":10},{\"displayName\":\"time-offset\",\"type\":\"interval\",\"example\":\"-200 day\",\"widget\":\"chart\",\"section\":\"series\"},{\"displayName\":\"timespan\",\"section\":\"widget\",\"type\":\"interval\",\"defaultValue\":\"1 hour\",\"example\":\"5 minute\"},{\"displayName\":\"time-zone\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"UTC\"},{\"displayName\":\"title\",\"type\":\"string\",\"example\":\"My portal\"},{\"displayName\":\"tooltip\",\"type\":\"string\",\"multiLine\":true,\"example\":\"NURSWGVML007\"},{\"displayName\":\"top-axis\",\"widget\":\"histogram\",\"section\":\"widget\",\"type\":\"enum\",\"example\":\"percentiles\",\"defaultValue\":\"none\",\"enum\":[\"percentiles\",\"none\",\"values\"]},{\"displayName\":\"top-units\",\"type\":\"number\",\"section\":\"widget\",\"example\":1,\"minValue\":0},{\"displayName\":\"total-size\",\"widget\":\"treemap\",\"section\":\"widget\",\"type\":\"integer\",\"example\":70},{\"displayName\":\"total-value\",\"widget\":\"pie\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"value('007-root') + value('006-root')\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"transformation-order\",\"type\":\"string\",\"defaultValue\":\"none\",\"section\":\"series\",\"example\":\"aggregate, interpolate\",\"enum\":[\"none\",\"interpolate\",\"group\",\"rate\",\"aggregate\",\"smooth\",\"downsample\",\"forecast\"]},{\"displayName\":\"transpose\",\"type\":\"boolean\",\"section\":\"widget\",\"example\":true,\"defaultValue\":false},{\"displayName\":\"type\",\"type\":\"enum\",\"example\":\"chart\",\"enum\":[\"chart\",\"gauge\",\"treemap\",\"bar\",\"calendar\",\"histogram\",\"box\",\"pie\",\"graph\",\"text\",\"page\",\"console\",\"table\",\"property\"],\"override\":{\"[section == 'property' || section == 'properties']\":{\"enum\":[\".*\"]}}},{\"displayName\":\"unscale\",\"defaultValue\":\".event\",\"type\":\"string\",\"section\":\"widget\",\"widget\":\"page\",\"example\":\".event, .location\"},{\"displayName\":\"update-interval\",\"section\":\"widget\",\"type\":\"interval\",\"defaultValue\":\"1 minute\",\"example\":\"5 minute\"},{\"displayName\":\"url\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"http://atsd_hostname:port\"},{\"displayName\":\"url-parameters\",\"type\":\"string\",\"section\":\"widget\",\"example\":\"db=12&adapter=7\"},{\"displayName\":\"value\",\"type\":\"string\",\"example\":\"Math.max(0, value('alias'))\",\"multiLine\":true,\"section\":\"option\",\"script\":{\"returnValue\":\"number\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":\"object\"},{\"name\":\"value\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"previous\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"movavg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"count\",\"type\":\"number\",\"required\":true},{\"name\":\"minCount\",\"type\":\"number\"}]},{\"name\":\"detail\",\"type\":\"function\"},{\"name\":\"forecast\",\"type\":\"function\"},{\"name\":\"forecast_deviation\",\"type\":\"function\"},{\"name\":\"lower_confidence\",\"type\":\"function\"},{\"name\":\"upper_confidence\",\"type\":\"function\"},{\"name\":\"percentile\",\"type\":\"function\",\"args\":[{\"name\":\"percentage\",\"type\":\"number\",\"required\":true},{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"period\",\"type\":\"interval\",\"required\":false}]},{\"name\":\"max\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"maximum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"min\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"minimum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"number\"}]},{\"name\":\"avg\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"average\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"sum\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"delta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"counter\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"last\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"first\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"min_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"max_value_time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"count\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"threshold_count\",\"type\":\"function\"},{\"name\":\"threshold_percent\",\"type\":\"function\"},{\"name\":\"threshold_duration\",\"type\":\"function\"},{\"name\":\"time\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"bottom\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"top\",\"type\":\"function\",\"args\":[{\"name\":\"rank\",\"type\":\"integer\",\"required\":true},{\"name\":\"getValue\",\"type\":\"function\"}]},{\"name\":\"meta\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"}]},{\"name\":\"entityTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"metricTag\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\",\"required\":true},{\"name\":\"tagName\",\"type\":\"string\",\"required\":true}]},{\"name\":\"median\",\"type\":\"function\",\"args\":[{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"interval\"}]},{\"name\":\"series\",\"type\":\"array\"}]}},{\"displayName\":\"vertical-grid\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"none\"},{\"displayName\":\"widgets-per-row\",\"type\":\"integer\",\"section\":\"group\",\"example\":3},{\"displayName\":\"width\",\"widget\":\"graph\",\"section\":\"widget\",\"type\":\"string\",\"example\":\"40%\"},{\"displayName\":\"width-units\",\"type\":\"number\",\"example\":2,\"minValue\":0,\"section\":\"widget\"},{\"displayName\":\"zoom-svg\",\"widget\":\"page\",\"section\":\"widget\",\"type\":\"number\",\"minValue\":0,\"example\":1.2}]};\n\n//# sourceURL=webpack:///../server/dictionary.json?");

/***/ }),

/***/ "../server/node_modules/browser-or-node/lib/index.js":
/*!***********************************************************!*\
  !*** ../server/node_modules/browser-or-node/lib/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* global window self */\n\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n/* eslint-disable no-restricted-globals */\nvar isWebWorker = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';\n/* eslint-enable no-restricted-globals */\n\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n\nexports.isBrowser = isBrowser;\nexports.isWebWorker = isWebWorker;\nexports.isNode = isNode;\n\n//# sourceURL=webpack:///../server/node_modules/browser-or-node/lib/index.js?");

/***/ }),

/***/ "../server/node_modules/vscode-languageserver-types/lib/esm/main.js":
/*!**************************************************************************!*\
  !*** ../server/node_modules/vscode-languageserver-types/lib/esm/main.js ***!
  \**************************************************************************/
/*! exports provided: Position, Range, Location, LocationLink, Color, ColorInformation, ColorPresentation, FoldingRangeKind, FoldingRange, DiagnosticRelatedInformation, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, CreateFile, RenameFile, DeleteFile, WorkspaceEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, MarkupContent, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, Hover, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, DocumentSymbol, CodeActionKind, CodeActionContext, CodeAction, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Position\", function() { return Position; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Location\", function() { return Location; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LocationLink\", function() { return LocationLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorInformation\", function() { return ColorInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorPresentation\", function() { return ColorPresentation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FoldingRangeKind\", function() { return FoldingRangeKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FoldingRange\", function() { return FoldingRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DiagnosticRelatedInformation\", function() { return DiagnosticRelatedInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DiagnosticSeverity\", function() { return DiagnosticSeverity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Diagnostic\", function() { return Diagnostic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Command\", function() { return Command; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextEdit\", function() { return TextEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentEdit\", function() { return TextDocumentEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateFile\", function() { return CreateFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenameFile\", function() { return RenameFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeleteFile\", function() { return DeleteFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkspaceEdit\", function() { return WorkspaceEdit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkspaceChange\", function() { return WorkspaceChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentIdentifier\", function() { return TextDocumentIdentifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VersionedTextDocumentIdentifier\", function() { return VersionedTextDocumentIdentifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentItem\", function() { return TextDocumentItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkupKind\", function() { return MarkupKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkupContent\", function() { return MarkupContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionItemKind\", function() { return CompletionItemKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InsertTextFormat\", function() { return InsertTextFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionItem\", function() { return CompletionItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompletionList\", function() { return CompletionList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MarkedString\", function() { return MarkedString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hover\", function() { return Hover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParameterInformation\", function() { return ParameterInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SignatureInformation\", function() { return SignatureInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentHighlightKind\", function() { return DocumentHighlightKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentHighlight\", function() { return DocumentHighlight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolKind\", function() { return SymbolKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolInformation\", function() { return SymbolInformation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentSymbol\", function() { return DocumentSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeActionKind\", function() { return CodeActionKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeActionContext\", function() { return CodeActionContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeAction\", function() { return CodeAction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CodeLens\", function() { return CodeLens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormattingOptions\", function() { return FormattingOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DocumentLink\", function() { return DocumentLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EOL\", function() { return EOL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocument\", function() { return TextDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextDocumentSaveReason\", function() { return TextDocumentSaveReason; });\n/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nvar Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nvar Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nvar Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The LocationLink namespace provides helper functions to work with\r\n * [LocationLink](#LocationLink) literals.\r\n */\r\nvar LocationLink;\r\n(function (LocationLink) {\r\n    /**\r\n     * Creates a LocationLink literal.\r\n     * @param targetUri The definition's uri.\r\n     * @param targetRange The full range of the definition.\r\n     * @param targetSelectionRange The span of the symbol definition at the target.\r\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\r\n     */\r\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\r\n        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };\r\n    }\r\n    LocationLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\r\n            && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))\r\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\r\n    }\r\n    LocationLink.is = is;\r\n})(LocationLink || (LocationLink = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nvar Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nvar ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nvar ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nvar FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nvar FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nvar DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nvar DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nvar Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nvar Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nvar TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nvar TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nvar CreateFile;\r\n(function (CreateFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'create',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    CreateFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    CreateFile.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nvar RenameFile;\r\n(function (RenameFile) {\r\n    function create(oldUri, newUri, options) {\r\n        var result = {\r\n            kind: 'rename',\r\n            oldUri: oldUri,\r\n            newUri: newUri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    RenameFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    RenameFile.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nvar DeleteFile;\r\n(function (DeleteFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'delete',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    DeleteFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));\r\n    }\r\n    DeleteFile.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nvar WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\r\n                if (Is.string(change.kind)) {\r\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n                }\r\n                else {\r\n                    return TextDocumentEdit.is(change);\r\n                }\r\n            }));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (change) {\r\n                    if (TextDocumentEdit.is(change)) {\r\n                        var textEditChange = new TextEditChangeImpl(change.edits);\r\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\r\n                    }\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    WorkspaceChange.prototype.createFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\r\n    };\r\n    WorkspaceChange.prototype.deleteFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.checkDocumentChanges = function () {\r\n        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\r\n            throw new Error('Workspace edit is not configured for document changes.');\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\n\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nvar TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nvar VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nvar TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nvar MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nvar MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nvar CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nvar InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nvar CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nvar CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nvar MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nvar Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nvar ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nvar SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nvar DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nvar DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nvar SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nvar SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\n\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nvar CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nvar CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nvar CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nvar CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nvar FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\n\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nvar EOL = ['\\n', '\\r\\n', '\\r'];\r\nvar TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Overlapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nvar TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n\n\n//# sourceURL=webpack:///../server/node_modules/vscode-languageserver-types/lib/esm/main.js?");

/***/ }),

/***/ "../server/src/completionProvider.ts":
/*!*******************************************!*\
  !*** ../server/src/completionProvider.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst resources_1 = __webpack_require__(/*! ./resources */ \"../server/src/resources.ts\");\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\nexports.snippets = __webpack_require__(/*! ../../snippets/snippets.json */ \"../snippets/snippets.json\");\n/**\n * Provides dynamic completion items.\n */\nclass CompletionProvider {\n    constructor(textDocument, position) {\n        const text = textDocument.getText().substr(0, textDocument.offsetAt(position));\n        this.text = util_1.deleteScripts(util_1.deleteComments(text));\n        let textList = this.text.split(\"\\n\");\n        this.currentLine = textList[textList.length - 1];\n    }\n    /**\n     * Creates completion items\n     */\n    getCompletionItems() {\n        let match = /^\\s*(\\S+)\\s*=\\s*/.exec(this.currentLine);\n        if (match) {\n            // completion requested at assign stage, i. e. type = <Ctrl + space>\n            return this.completeSettingValue(match[1]);\n        }\n        else {\n            // completion requested at start of line (supposed that line is empty)\n            return this.completeSnippets().concat(this.completeIf(), this.completeFor(), this.completeSettingName());\n        }\n    }\n    /**\n     * Creates a completion item containing `for` loop.\n     * `in` statement is generated based on previously declared lists and vars if any.\n     * Variable name is generated based on `in` statement.\n     * @returns completion item\n     */\n    completeFor() {\n        const regexp = /^[ \\t]*(?:list|var)[ \\t]+(\\S+)[ \\t]*=/mg;\n        let match = regexp.exec(this.text);\n        let lastMatch;\n        while (match) {\n            lastMatch = match;\n            match = regexp.exec(this.text);\n        }\n        let collection = \"collection\";\n        let item = \"item\";\n        if (lastMatch) {\n            collection = lastMatch[1];\n            if (collection.endsWith(\"s\")) {\n                item = collection.substr(0, collection.lastIndexOf(\"s\"));\n            }\n        }\n        const completion = vscode_languageserver_types_1.CompletionItem.create(\"for\");\n        completion.insertText = `\nfor \\${1:${item}} in \\${2:${collection}}\n  \\${3:entity = @{\\${1:${item}}}}\n  \\${0}\nendfor`;\n        completion.detail = \"For loop\";\n        completion.kind = vscode_languageserver_types_1.CompletionItemKind.Keyword;\n        completion.insertTextFormat = vscode_languageserver_types_1.InsertTextFormat.Snippet;\n        return completion;\n    }\n    /**\n     * Creates an array of completion items containing `if` statement.\n     * Conditions are generated based on previously declared `for` loops.\n     * @returns array containing variants of `if` statement\n     */\n    completeIf() {\n        const regexp = /^[ \\t]*for[ \\t]+(\\w+)[ \\t]+in/img;\n        const endFor = /^[ \\t]*endfor/img;\n        let match = regexp.exec(this.text);\n        let lastMatch;\n        while (match) {\n            const end = endFor.exec(this.text);\n            if (!end || end.index < match.index) {\n                lastMatch = match;\n            }\n            match = regexp.exec(this.text);\n        }\n        let item = \"item\";\n        if (lastMatch) {\n            item = lastMatch[1];\n        }\n        const ifString = vscode_languageserver_types_1.CompletionItem.create(\"if string\");\n        ifString.detail = \"if item equals text\";\n        ifString.insertText = `\nif @{\\${1:${item}}} \\${2:==} \\${3:\"item1\"}\n  \\${4:entity} = \\${5:\"item2\"}\nelse\n  \\${4:entity} = \\${6:\"item3\"}\nendif\n\\${0}`;\n        const ifNumber = vscode_languageserver_types_1.CompletionItem.create(\"if number\");\n        ifNumber.insertText = `\nif @{\\${1:${item}}} \\${2:==} \\${3:5}\n  \\${4:entity} = \\${5:\"item1\"}\nelse\n  \\${4:entity} = \\${6:\"item2\"}\nendif\n\\${0}`;\n        ifNumber.detail = \"if item equals number\";\n        const ifElseIf = vscode_languageserver_types_1.CompletionItem.create(\"if else if\");\n        ifElseIf.detail = \"if item equals number else if\";\n        ifElseIf.insertText = `\nif @{\\${1:${item}}} \\${2:==} \\${3:5}\n  \\${4:entity} = \\${5:\"item1\"}\nelseif @{\\${1:${item}}} \\${6:==} \\${7:6}\n  \\${4:entity} = \\${8:\"item2\"}\nelse\n  \\${4:entity} = \\${9:\"item3\"}\nendif\n\\${0}`;\n        return [ifString, ifNumber, ifElseIf].map((completion) => {\n            completion.insertTextFormat = vscode_languageserver_types_1.InsertTextFormat.Snippet;\n            completion.kind = vscode_languageserver_types_1.CompletionItemKind.Snippet;\n            return completion;\n        });\n    }\n    /**\n     * Creates an array of completion items containing setting names.\n     * @returns array containing snippets\n     */\n    completeSettingName() {\n        const items = [];\n        for (let [, value] of resources_1.settingsMap) {\n            items.push(this.fillCompletionItem({\n                detail: `${value.description ? value.description + \"\\n\" : \"\"}Example: ${value.example}`,\n                insertText: `${value.displayName} = `,\n                kind: vscode_languageserver_types_1.CompletionItemKind.Field,\n                name: value.displayName\n            }));\n        }\n        return items;\n    }\n    /**\n     * Creates an array of completion items containing possible values for settings.\n     * @param settingName name of the setting, for example \"colors\"\n     * @returns array containing completions\n     */\n    completeSettingValue(settingName) {\n        const setting = util_1.getSetting(settingName);\n        if (!setting) {\n            return [];\n        }\n        switch (setting.type) {\n            case \"string\": {\n                return this.completeStringSettingValue(setting);\n            }\n            case \"number\":\n            case \"integer\":\n                if (setting.example) {\n                    return [this.fillCompletionItem({ insertText: setting.example.toString() })];\n                }\n                break;\n            case \"boolean\": {\n                return this.getItemsArray([\"true\", \"false\"]);\n            }\n            case \"enum\": {\n                return this.getItemsArray(setting.enum.map(el => el.replace(/percentile\\\\.+/, \"percentile(n)\")));\n            }\n            case \"interval\": {\n                return this.getItemsArray(setting_1.intervalUnits, ...setting.enum);\n            }\n            case \"date\": {\n                return this.getItemsArray(setting_1.calendarKeywords, new Date().toISOString());\n            }\n            default: {\n                return [];\n            }\n        }\n        return [];\n    }\n    /**\n     * Creates an array of completion items containing snippets.\n     * @returns array containing snippets\n     */\n    completeSnippets() {\n        const items = Object.keys(exports.snippets).map((key) => {\n            const insertText = (typeof exports.snippets[key].body === \"string\") ? exports.snippets[key].body : exports.snippets[key].body.join(\"\\n\");\n            return this.fillCompletionItem({\n                insertText, detail: exports.snippets[key].description,\n                name: key, insertTextFormat: vscode_languageserver_types_1.InsertTextFormat.Snippet, kind: vscode_languageserver_types_1.CompletionItemKind.Keyword\n            });\n        });\n        return items;\n    }\n    /**\n     * Creates an array of completion items containing possible values for settings with type = \"string\".\n     * @param setting the setting\n     * @returns array containing completions\n     */\n    completeStringSettingValue(setting) {\n        let valueItems = [];\n        let scriptItems = [];\n        if (setting.possibleValues) {\n            valueItems = setting.possibleValues.map(v => this.fillCompletionItem({ insertText: v.value, detail: v.detail }));\n        }\n        if (setting.script) {\n            setting.script.fields.forEach((field) => {\n                if (field.type === \"function\") {\n                    let itemFields = { insertText: \"\", kind: vscode_languageserver_types_1.CompletionItemKind.Function };\n                    if (field.args) {\n                        let requiredArgs = field.args.filter(a => a.required);\n                        let optionalArgs = field.args.filter(a => !a.required);\n                        let requiredArgsString = `${requiredArgs.map(field => field.name).join(\", \")}`;\n                        itemFields.insertText = `${field.name}${requiredArgsString !== \"\" ?\n                            \"(\" + requiredArgsString + \")\" : \"\"}`;\n                        scriptItems.push(this.fillCompletionItem(itemFields));\n                        let args = \"\";\n                        for (let arg of optionalArgs) {\n                            args = `${args !== \"\" ? args + \", \" : \"\"}${arg.name}`;\n                            itemFields.insertText = `${field.name}(${requiredArgsString !== \"\" ?\n                                requiredArgsString + \", \" : \"\"}${args})`;\n                            scriptItems.push(this.fillCompletionItem(itemFields));\n                        }\n                    }\n                    else {\n                        itemFields.insertText = field.name;\n                        scriptItems.push(this.fillCompletionItem(itemFields));\n                    }\n                }\n                else {\n                    scriptItems.push(this.fillCompletionItem({\n                        insertText: field.name,\n                        detail: `Type: ${field.type}`\n                    }));\n                }\n            });\n        }\n        if (!setting.possibleValues && setting.example !== \"\") {\n            valueItems = [this.fillCompletionItem({\n                    insertText: setting.example.toString(),\n                    kind: vscode_languageserver_types_1.CompletionItemKind.Field\n                })];\n        }\n        return valueItems.concat(scriptItems);\n    }\n    /**\n     * Set fields for CompletionItem\n     * @param insertText text to be inserted with completion request\n     * @returns completion\n     */\n    fillCompletionItem(itemFields) {\n        let item = vscode_languageserver_types_1.CompletionItem.create(itemFields.name || itemFields.insertText);\n        item.insertTextFormat = itemFields.insertTextFormat || vscode_languageserver_types_1.InsertTextFormat.PlainText;\n        item.kind = itemFields.kind || vscode_languageserver_types_1.CompletionItemKind.Value;\n        item.insertText = itemFields.insertText;\n        item.detail = itemFields.detail || itemFields.insertText;\n        item.sortText = item.kind.toString();\n        return item;\n    }\n    /**\n     * Сonverts the source array to array of completions\n     * @param processedArray the source array\n     * @param additionalStrings the strings to be processed and added to completions\n     * @returns completions\n     */\n    getItemsArray(processedArray, ...additionalStrings) {\n        let items = processedArray.map(el => this.fillCompletionItem({ insertText: el }));\n        for (let s of additionalStrings) {\n            items.push(this.fillCompletionItem({ insertText: s }));\n        }\n        return items;\n    }\n}\nexports.CompletionProvider = CompletionProvider;\n\n\n//# sourceURL=webpack:///../server/src/completionProvider.ts?");

/***/ }),

/***/ "../server/src/config.ts":
/*!*******************************!*\
  !*** ../server/src/config.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\n/**\n * Stores config lines as array, removes comments.\n */\nclass Config {\n    constructor(text) {\n        this.currentLineNumber = -1;\n        this.lines = util_1.deleteComments(text)\n            .toLowerCase()\n            .split(\"\\n\");\n    }\n    getCurrentLine() {\n        return this.currentLine;\n    }\n    /**\n     * Returns lowercased config line with specified index.\n     *\n     * @param line - Index of line to be returned\n     * @returns Lowercased line of config with index equal to `line`\n     */\n    getLine(line) {\n        return (line < this.lines.length && line >= 0) ? this.lines[line] : null;\n    }\n    *[Symbol.iterator]() {\n        for (let line of this.lines) {\n            this.currentLine = line;\n            this.currentLineNumber++;\n            yield line;\n        }\n    }\n}\nexports.Config = Config;\n\n\n//# sourceURL=webpack:///../server/src/config.ts?");

/***/ }),

/***/ "../server/src/configTree/configTree.ts":
/*!**********************************************!*\
  !*** ../server/src/configTree/configTree.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst resources_1 = __webpack_require__(/*! ../resources */ \"../server/src/resources.ts\");\nconst section_1 = __webpack_require__(/*! ./section */ \"../server/src/configTree/section.ts\");\n/**\n * Stores sections with corresponding settings in tree order.\n */\nclass ConfigTree {\n    get getRoot() {\n        return this.root;\n    }\n    /**\n     * Creates Section object based on `range` and `settings`, applies scope to it and adds to tree.\n     * Doesn't alert if the section is out of order, this check is performed by SectionStack.\n     *\n     * @param range - The text (name of section) and the position of the text\n     * @param settings - Section settings\n     */\n    addSection(range, settings) {\n        const section = new section_1.Section(range, settings);\n        const depth = resources_1.sectionDepthMap[range.text];\n        if (depth > 0 && !this.root) {\n            return;\n        }\n        switch (depth) {\n            case 0: { // [configuration]\n                this.root = section;\n                this.lastAddedParent = section;\n                break;\n            }\n            case 1: { // [group]\n                section.parent = this.root;\n                this.lastAddedParent = section;\n                break;\n            }\n            case 2: { // [widget]\n                const group = this.root.children[this.root.children.length - 1];\n                if (!group) {\n                    return;\n                }\n                section.parent = group;\n                this.lastAddedParent = section;\n                break;\n            }\n            case 3: { // [series], [dropdown], [column], ...\n                if (this.lastAddedParent && this.lastAddedParent.name === \"column\" && range.text === \"series\") {\n                    section.parent = this.lastAddedParent;\n                }\n                else {\n                    const group = this.root.children[this.root.children.length - 1];\n                    if (!group) {\n                        return;\n                    }\n                    const widget = group.children[group.children.length - 1];\n                    if (!widget) {\n                        return;\n                    }\n                    section.parent = widget;\n                    this.lastAddedParent = section;\n                }\n                break;\n            }\n            case 4: { // [option], [properties], [tags]\n                if (resources_1.isNestedToPrevious(range.text, this.previous.name)) {\n                    section.parent = this.previous;\n                }\n                else {\n                    section.parent = this.lastAddedParent;\n                }\n                if (!section.parent) {\n                    return;\n                }\n                break;\n            }\n        }\n        if (section.parent) {\n            // We are not in [configuration]\n            section.parent.children.push(section);\n        }\n        this.previous = section;\n        section.applyScope();\n    }\n}\nexports.ConfigTree = ConfigTree;\n\n\n//# sourceURL=webpack:///../server/src/configTree/configTree.ts?");

/***/ }),

/***/ "../server/src/configTree/configTreeValidator.ts":
/*!*******************************************************!*\
  !*** ../server/src/configTree/configTreeValidator.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst relatedSettingsRules_1 = __webpack_require__(/*! ../relatedSettingsRules */ \"../server/src/relatedSettingsRules/index.ts\");\nclass ConfigTreeValidator {\n    /**\n     * Goes through validationRules and performs checks on corresponding sections.\n     *\n     * @param сonfigTree - Configuration tree\n     * @returns Diagnosics about problems in sections\n     */\n    static validate(сonfigTree) {\n        const walker = new ConfigTreeWalker(сonfigTree);\n        const diagnostics = [];\n        relatedSettingsRules_1.default.forEach((rulesForSection, sectionName) => {\n            const sectionsToCheck = walker.getSectionsByName(sectionName);\n            if (sectionsToCheck.length > 0) {\n                sectionsToCheck.forEach(section => {\n                    rulesForSection.forEach(rule => {\n                        const diag = rule.check(section);\n                        if (diag) {\n                            if (Array.isArray(diag)) {\n                                diagnostics.push(...diag);\n                            }\n                            else {\n                                diagnostics.push(diag);\n                            }\n                        }\n                    });\n                });\n            }\n        });\n        return diagnostics;\n    }\n}\nexports.ConfigTreeValidator = ConfigTreeValidator;\n// tslint:disable-next-line:max-classes-per-file\nclass ConfigTreeWalker {\n    constructor(сonfigTree) {\n        this.requestedSections = [];\n        this.tree = сonfigTree;\n    }\n    /**\n     * Triggers bypass of ConfigTree and returns array with specified sections.\n     *\n     * @param sectionName - Name of sections to be returned\n     * @returns Array of sections with name `sectionName`\n     */\n    getSectionsByName(sectionName) {\n        if (this.tree.getRoot) {\n            this.walk(sectionName, this.tree.getRoot);\n        }\n        return this.requestedSections;\n    }\n    /**\n     * Recursively bypasses the ConfigTree starting from `startsection` and\n     * adds every section with name `targetSection` to the `requestedSections` array.\n     *\n     * @param targetSection - Name of sections to be added to `requestedSections` array\n     * @param startSection - Section, from which the walk must begin\n     */\n    walk(targetSection, startSection) {\n        for (let section of startSection.children) {\n            if (section.name === targetSection) {\n                this.requestedSections.push(section);\n            }\n            else {\n                this.walk(targetSection, section);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///../server/src/configTree/configTreeValidator.ts?");

/***/ }),

/***/ "../server/src/configTree/section.ts":
/*!*******************************************!*\
  !*** ../server/src/configTree/section.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst setting_1 = __webpack_require__(/*! ../setting */ \"../server/src/setting.ts\");\n/**\n * ConfigTree node.\n */\nclass Section {\n    /**\n     * @param range - The text (name of section) and the position of the text\n     * @param settings - Section settings\n     */\n    constructor(range, settings) {\n        this.children = [];\n        this.scope = {};\n        this.range = range;\n        this.name = range.text;\n        this.settings = settings;\n    }\n    applyScope() {\n        if (this.parent !== undefined) {\n            /**\n             * We are not at [configuration].\n             */\n            this.scope = Object.create(this.parent.scope);\n        }\n        for (const setting of this.settings) {\n            if (setting.name === \"type\") {\n                this.scope.widgetType = setting.value;\n            }\n            else if (setting.name === \"mode\") {\n                this.scope.mode = setting.value;\n            }\n        }\n    }\n    /**\n     * Returns setting from this section by it's displayName.\n     *\n     * @param name - Setting.displayName\n     * @returns Setting with displayname equal to `settingName`\n     */\n    getSetting(name) {\n        const cleared = setting_1.Setting.clearSetting(name);\n        return this.settings.find(s => s.name === cleared);\n    }\n    /**\n     * Searches setting in the tree by it's displayName,\n     * starting from the current section and ending root, returns the closest one.\n     *\n     * @param settingName - Setting.displayName\n     * @returns Setting with displayname equal to `settingName`\n     */\n    getSettingFromTree(settingName) {\n        let currentSection = this;\n        while (currentSection) {\n            const value = currentSection.getSetting(settingName);\n            if (value !== void 0) {\n                return value;\n            }\n            currentSection = currentSection.parent;\n        }\n        return undefined;\n    }\n    getScopeValue(settingName) {\n        return settingName === \"type\" ? this.scope.widgetType : this.scope.mode;\n    }\n    /**\n     * Returns true if section passes all of conditions, otherwise returns false.\n     *\n     * @param conditions - Array of conditions, for which section must be checked\n     * @returns Result of `conditions` checks.\n     */\n    matchesConditions(conditions) {\n        const section = this;\n        if (conditions === undefined) {\n            return true;\n        }\n        for (const condition of conditions) {\n            const currCondition = condition(section);\n            if (!currCondition) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.Section = Section;\n\n\n//# sourceURL=webpack:///../server/src/configTree/section.ts?");

/***/ }),

/***/ "../server/src/defaultSetting.ts":
/*!***************************************!*\
  !*** ../server/src/defaultSetting.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\n/**\n * Holds the description of a setting and corresponding methods.\n */\nclass DefaultSetting {\n    constructor(setting) {\n        /**\n         * A brief description for the setting\n         */\n        this.description = \"\";\n        /**\n         * User-friendly setting name like 'refresh-interval'\n         */\n        this.displayName = \"\";\n        /**\n         * Array containing all possible values. RegExp is supported\n         */\n        this.enum = [];\n        /**\n         * Example value for the setting. Should not equal to the default value\n         */\n        this.example = \"\";\n        /**\n         * The settings in this array must not be declared simultaneously with the current\n         */\n        this.excludes = [];\n        /**\n         * The maximum allowed value for the setting\n         */\n        this.maxValue = Infinity;\n        /**\n         * The minimum allowed value for the setting\n         */\n        this.minValue = -Infinity;\n        /**\n         * Is the setting allowed to be repeated\n         */\n        this.multiLine = false;\n        /**\n         * Inner setting name. Lower-cased, without any symbols except alphabetical.\n         * For example, \"refreshinterval\"\n         */\n        this.name = \"\";\n        /**\n         * The type of the setting.\n         * Possible values: string, number, integer, boolean, enum, interval, date\n         */\n        this.type = \"\";\n        /**\n         * Type of the widget were setting is applicable, for example,\n         * gradient-count is applicable for gauge, treemap and calendar.\n         */\n        this.widget = [];\n        this.overrideCache = [];\n        Object.assign(this, setting);\n        this.enum = this.enum.map((v) => v.toLowerCase());\n        this.name = DefaultSetting.clearSetting(this.displayName);\n        if (this.override) {\n            for (const scope in this.override) {\n                if (this.override.hasOwnProperty(scope)) {\n                    this.overrideCache.push({\n                        setting: this.override[scope],\n                        test: this.getOverrideTest(scope),\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Create an instance of setting with matching overrides applied.\n     * If no override can be applied returns this instanse.\n     * @param scope Configuration scope where setting exist\n     */\n    applyScope(scope) {\n        if (this.override == null) {\n            return this;\n        }\n        let matchingOverrides = this.overrideCache\n            .filter((override) => override.test(scope))\n            .map((override) => override.setting);\n        if (matchingOverrides.length > 0) {\n            let copy = Object.create(setting_1.Setting.prototype);\n            return Object.assign(copy, this, ...matchingOverrides);\n        }\n        else {\n            return this;\n        }\n    }\n    /**\n     * Generates a string containing fully available information about the setting\n     */\n    toString() {\n        // TODO: describe a script which is allowed as the setting value\n        if (this.description == null) {\n            return \"\";\n        }\n        let result = `${this.description}  \\n\\n`;\n        if (this.example != null && this.example !== \"\") {\n            result += `Example: ${this.displayName} = ${this.example}  \\n`;\n        }\n        if (this.type != null && this.type !== \"\") {\n            result += `Type: ${this.type}  \\n`;\n        }\n        if (this.defaultValue != null && this.defaultValue !== \"\") {\n            result += `Default value: ${this.defaultValue}  \\n`;\n        }\n        if (this.enum == null && this.enum.length === 0) {\n            result += `Possible values: ${this.enum.join()}  \\n`;\n        }\n        if (this.excludes != null && this.excludes.length !== 0) {\n            result += `Can not be specified with: ${this.excludes.join()}  \\n`;\n        }\n        if (this.maxValue != null && this.maxValue !== Infinity) {\n            result += `Maximum: ${this.maxValue}  \\n`;\n        }\n        if (this.minValue != null && this.minValue !== -Infinity) {\n            result += `Minimum: ${this.minValue}  \\n`;\n        }\n        if (this.section != null && this.section.length !== 0) {\n            result += `Allowed in section: ${this.section}  \\n`;\n        }\n        let widgets = \"all\";\n        if (typeof this.widget !== \"string\" && this.widget.length > 0) {\n            widgets = this.widget.join(\", \");\n        }\n        else if (this.widget.length > 0) {\n            widgets = this.widget;\n        }\n        result += `Allowed in widgets: ${widgets}  \\n`;\n        return result;\n    }\n    getOverrideTest(scopeSrc) {\n        let scopeKeys = [\"widget\", \"section\"];\n        let scopeSrcExtracted = /^\\[(.*)\\]$/.exec(scopeSrc);\n        if (scopeSrcExtracted == null) {\n            throw new Error(\"Wrong override scope format\");\n        }\n        let source = `return !!(${scopeSrcExtracted[1]});`;\n        let compiledScope = new Function(scopeKeys.join(), source);\n        return (scope) => {\n            try {\n                let values = scopeKeys.map((key) => scope[key]);\n                return compiledScope.apply(void 0, values);\n            }\n            catch (error) {\n                console.error(`In '${scopeSrc}' :: ${error}`);\n            }\n        };\n    }\n}\n/**\n * Lowercases the string and deletes non-alphabetic characters\n * @param str string to be cleared\n * @returns cleared string\n */\nDefaultSetting.clearSetting = (str) => str.toLowerCase().replace(/[^a-z]/g, \"\");\n/**\n * Lowercases the value of setting\n * @param str string to be cleared\n * @returns cleared string\n */\nDefaultSetting.clearValue = (str) => str.toLowerCase();\nexports.DefaultSetting = DefaultSetting;\n\n\n//# sourceURL=webpack:///../server/src/defaultSetting.ts?");

/***/ }),

/***/ "../server/src/keywordHandler.ts":
/*!***************************************!*\
  !*** ../server/src/keywordHandler.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messageUtil_1 = __webpack_require__(/*! ./messageUtil */ \"../server/src/messageUtil.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\n/**\n * Regular expressions to match SQL.\n */\nconst ONE_LINE_SQL = /^\\s*sql\\s*=.*$/m;\nconst BLOCK_SQL_START_WITHOUT_LF = /(^\\s*)sql\\s*\\S/;\nexports.BLOCK_SQL_START = /sql(?!([\\s\\S]*=))/;\nexports.BLOCK_SQL_END = /^\\s*endsql\\s*$/;\n/**\n * Regular expressions to match script.\n */\nconst ONE_LINE_SCRIPT = /^\\s*script\\s*=.*$/m;\nconst BLOCK_SCRIPT_START_WITHOUT_LF = /(^\\s*)script\\s*\\S/;\nexports.BLOCK_SCRIPT_START = /script(?!([\\s\\S]*=))/;\nexports.BLOCK_SCRIPT_END = /^\\s*endscript\\s*$/;\nclass KeywordHandler {\n    constructor(keywordsStack) {\n        this.diagnostics = [];\n        this.keywordsStack = keywordsStack;\n    }\n    handleSql(line, foundKeyword) {\n        if (ONE_LINE_SQL.test(line)) {\n            return;\n        }\n        this.keywordsStack.push(foundKeyword);\n        const match = BLOCK_SQL_START_WITHOUT_LF.exec(line);\n        if (match !== null) {\n            this.diagnostics.push(util_1.createDiagnostic(util_1.createRange(match[1].length, \"sql\".length, foundKeyword.range.start.line), messageUtil_1.lineFeedRequired(\"sql\")));\n        }\n    }\n    handleScript(line, foundKeyword) {\n        if (ONE_LINE_SCRIPT.test(line)) {\n            return;\n        }\n        this.keywordsStack.push(foundKeyword);\n        const match = BLOCK_SCRIPT_START_WITHOUT_LF.exec(line);\n        if (match !== null) {\n            this.diagnostics.push(util_1.createDiagnostic(util_1.createRange(match[1].length, \"script\".length, foundKeyword.range.start.line), messageUtil_1.lineFeedRequired(\"script\")));\n        }\n    }\n}\nexports.KeywordHandler = KeywordHandler;\n\n\n//# sourceURL=webpack:///../server/src/keywordHandler.ts?");

/***/ }),

/***/ "../server/src/messageUtil.ts":
/*!************************************!*\
  !*** ../server/src/messageUtil.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates a error message for unknown setting or value.\n * @param found the variant found in the user's text\n * @returns message with or without a suggestion\n */\nexports.unknownToken = (found) => `${found} is unknown.`;\nexports.deprecatedTagSection = `Replace [tag] sections with [tags].\nEnclose the tag name in double quotes in case it contains special characters.\n\n[tag]\n  name = k\n  value = v\n[tag]\n  name = my column\n  value = my value\n\n[tags]\n  k = v\n  \"my column\" = my value\n`;\nexports.settingsWithWhitespaces = (found) => `The setting \"${found}\" contains whitespaces.\\nReplace spaces with hyphens.`;\nexports.tagNameWithWhitespaces = (found) => `The tag name ${found} contains whitespaces. Wrap it in double quotes.`;\nexports.settingNameInTags = (found) => `${found} is interpreted as a series tag and is sent to the\\nserver. ` +\n    `Move the setting outside of the [tags] section or\\n` +\n    \"enclose in double-quotes to send it to the server without\\na warning.\";\nexports.uselessScope = (found, msg) => `${found} setting is appplied only if ${msg}.`;\nexports.incorrectColors = (found, msg) => `Number of colors (if specified) must be equal to\\nnumber of thresholds minus 1.\nCurrent: ${found}, expected: ${msg}`;\nexports.illegalSetting = (found) => `${found} setting is not allowed here.`;\n/**\n * RegExp for: 'csv from <url>'\n */\nconst CSV_FROM_URL_MISSING_NAME_PATTERN = /(^[ \\t]*csv[ \\t]+)[ \\t]*(from)/;\n/**\n * If SCV pattern didn't match any known RegExp, compose error message\n * @param line line of code instruction\n * @returns csv error message\n */\nexports.getCsvErrorMessage = (line) => {\n    return (CSV_FROM_URL_MISSING_NAME_PATTERN.test(line)) ? `<name> in 'csv <name> from <url>' is missing` :\n        `The line should contain a '=' or 'from' keyword`;\n};\nexports.noRequiredSetting = (dependent, required) => `${required} is required if ${dependent} is specified`;\nexports.noRequiredSettings = (dependent, required) => `${dependent} has effect only with one of the following:\n * ${required.join(\"\\n * \")}`;\nexports.noMatching = (dependent, required) => `${dependent} has no matching ${required}`;\nexports.lineFeedRequired = (dependent) => `A linefeed character after '${dependent}' keyword is required`;\n\n\n//# sourceURL=webpack:///../server/src/messageUtil.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/index.ts":
/*!***************************************************!*\
  !*** ../server/src/relatedSettingsRules/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = __webpack_require__(/*! ./presenceValidation/noUselessSettings/index */ \"../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/index.ts\");\nconst requiredSettings_1 = __webpack_require__(/*! ./presenceValidation/requiredSettings */ \"../server/src/relatedSettingsRules/presenceValidation/requiredSettings.ts\");\nconst colorsThresholds_1 = __webpack_require__(/*! ./valueValidation/colorsThresholds */ \"../server/src/relatedSettingsRules/valueValidation/colorsThresholds.ts\");\nconst forecastAutoCountAndEigentripleLimit_1 = __webpack_require__(/*! ./valueValidation/forecastAutoCountAndEigentripleLimit */ \"../server/src/relatedSettingsRules/valueValidation/forecastAutoCountAndEigentripleLimit.ts\");\nconst forecastEndTime_1 = __webpack_require__(/*! ./valueValidation/forecastEndTime */ \"../server/src/relatedSettingsRules/valueValidation/forecastEndTime.ts\");\nconst startEndTime_1 = __webpack_require__(/*! ./valueValidation/startEndTime */ \"../server/src/relatedSettingsRules/valueValidation/startEndTime.ts\");\nconst rulesBySection = new Map([\n    [\n        \"series\", [\n            colorsThresholds_1.default,\n            forecastEndTime_1.default,\n            forecastAutoCountAndEigentripleLimit_1.default,\n            requiredSettings_1.default,\n            index_1.noUselessSettingsForSeries\n        ]\n    ],\n    [\n        \"widget\", [\n            startEndTime_1.default,\n            index_1.noUselessSettingsForWidget\n        ]\n    ]\n]);\nexports.default = rulesBySection;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/index.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forSeries.ts":
/*!********************************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forSeries.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst condition_1 = __webpack_require__(/*! ../../utils/condition */ \"../server/src/relatedSettingsRules/utils/condition.ts\");\n/**\n * If key is declared in the section and the section doesn't match any of conditions, then key is useless.\n */\nconst checks = new Map([\n    [\n        \"forecast-arima-auto-regression-interval\", [\n            /**\n             * If \"type!=chart\" OR \"forecast-arima-auto=true\",\n             * setting \"forecast-arima-auto-regression-interval\" is useless.\n             */\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-arima-auto\", [\"false\"])\n        ]\n    ],\n    [\n        \"forecast-arima-d\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-arima-auto\", [\"false\"])\n        ]\n    ],\n    [\n        \"forecast-arima-p\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-arima-auto\", [\"false\"])\n        ]\n    ],\n    [\n        \"forecast-hw-alpha\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-hw-auto\", [\"false\"])\n        ]\n    ],\n    [\n        \"forecast-hw-beta\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-hw-auto\", [\"false\"])\n        ]\n    ],\n    [\n        \"forecast-hw-gamma\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"forecast-hw-auto\", [\"false\"])\n        ]\n    ]\n]);\nexports.default = checks;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forSeries.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forWidget.ts":
/*!********************************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forWidget.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst condition_1 = __webpack_require__(/*! ../../utils/condition */ \"../server/src/relatedSettingsRules/utils/condition.ts\");\n/**\n * If key is declared in the section and the section doesn't match any of conditions, then key is useless.\n */\nconst checks = new Map([\n    [\n        \"negative-style\",\n        /**\n         * If \"type!=chart\" OR \"mode\" is NOT \"column-stack\" or \"column\",\n         * settings \"negative-style\" and \"current-period-style\" are useless.\n         */\n        [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"mode\", [\"column-stack\", \"column\"])\n        ]\n    ],\n    [\n        \"current-period-style\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"mode\", [\"column-stack\", \"column\"])\n        ]\n    ],\n    [\n        \"moving-average\", [\n            condition_1.isNotUselessIf(\"type\", [\"chart\"]),\n            condition_1.isNotUselessIf(\"server-aggregate\", [\"false\"])\n        ]\n    ],\n    [\n        \"ticks\", [\n            condition_1.isNotUselessIf(\"type\", [\"calendar\", \"treemap\", \"gauge\"]),\n            condition_1.isNotUselessIf(\"mode\", [\"half\", \"default\"])\n        ]\n    ],\n    [\n        \"color-range\", [\n            condition_1.isNotUselessIf(\"type\", [\"calendar\", \"treemap\", \"gauge\"]),\n            condition_1.isNotUselessIf(\"mode\", [\"half\", \"default\"])\n        ]\n    ],\n    [\n        \"gradient-count\", [\n            condition_1.isNotUselessIf(\"type\", [\"calendar\", \"treemap\", \"gauge\"]),\n            condition_1.isNotUselessIf(\"mode\", [\"half\", \"default\"])\n        ]\n    ]\n]);\nexports.default = checks;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forWidget.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/index.ts":
/*!****************************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/index.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst messageUtil_1 = __webpack_require__(/*! ../../../messageUtil */ \"../server/src/messageUtil.ts\");\nconst util_1 = __webpack_require__(/*! ../../../util */ \"../server/src/util.ts\");\nconst forSeries_1 = __webpack_require__(/*! ./forSeries */ \"../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forSeries.ts\");\nconst forWidget_1 = __webpack_require__(/*! ./forWidget */ \"../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/forWidget.ts\");\nfunction getRule(checksMap) {\n    return (section) => {\n        const diagnostics = [];\n        checksMap.forEach((conditions, dependent) => {\n            const dependentSetting = section.getSettingFromTree(dependent);\n            if (dependentSetting === undefined) {\n                return;\n            }\n            const msg = conditions.map(condition => condition(section)).filter(m => m);\n            if (msg.length > 0) {\n                diagnostics.push(util_1.createDiagnostic(dependentSetting.textRange, messageUtil_1.uselessScope(dependentSetting.displayName, `${msg.join(\", \")}`), vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n            }\n        });\n        return diagnostics;\n    };\n}\nexports.noUselessSettingsForWidget = {\n    check: getRule(forWidget_1.default),\n    name: \"Checks absence of useless settings in [widget]\"\n};\nexports.noUselessSettingsForSeries = {\n    check: getRule(forSeries_1.default),\n    name: \"Checks absence of useless settings in [series]\"\n};\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/presenceValidation/noUselessSettings/index.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/presenceValidation/requiredSettings.ts":
/*!*********************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/presenceValidation/requiredSettings.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messageUtil_1 = __webpack_require__(/*! ../../messageUtil */ \"../server/src/messageUtil.ts\");\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\nconst condition_1 = __webpack_require__(/*! ../utils/condition */ \"../server/src/relatedSettingsRules/utils/condition.ts\");\n/**\n * If key (dependent) is declared in the section and the section matches all of conditions, then:\n *   a) setting, specified in `requiredSetting` is required for this section;\n *      or\n *   b) required at least one setting from `requiredSetting` array.\n * If `conditions` are null, suppose the section matches conditions.\n */\nconst checks = new Map([\n    [\n        \"colors\", {\n            /**\n             * If \"colors\" is specified:\n             *  1) check that:\n             *      1) \"type\" is \"calendar\", \"treemap \" or \"gauge\";\n             *      2) \"mode\" is \"half\" or \"default\";\n             *  2) require \"thresholds\" (try to search in tree and create Diagnostic if neccessary).\n             */\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"calendar\", \"treemap\", \"gauge\"]),\n                condition_1.requiredCondition(\"mode\", [\"half\", \"default\"])\n            ],\n            requiredSetting: \"thresholds\"\n        }\n    ],\n    [\n        \"forecast-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"chart\"]),\n                condition_1.requiredCondition(\"mode\", [\"column\", \"column-stack\"])\n            ],\n            requiredSetting: \"data-type\"\n        }\n    ],\n    [\n        \"forecast-horizon-start-time\", {\n            /**\n             * If \"forecast-horizon-start-time\" is specified:\n             *  1) check that \"type\" is \"chart\";\n             *  2) require any of \"forecast-horizon-end-time\", \"forecast-horizon-interval\", \"forecast-horizon-length\".\n             */\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"chart\"])\n            ],\n            requiredSetting: [\"forecast-horizon-end-time\", \"forecast-horizon-interval\", \"forecast-horizon-length\"]\n        }\n    ],\n    [\n        \"table\", {\n            /**\n             * If \"table\" is specified, require \"attribute\".\n             */\n            requiredSetting: \"attribute\"\n        }\n    ],\n    [\n        \"attribute\", {\n            requiredSetting: \"table\"\n        }\n    ],\n    [\n        \"column-alert-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"bar\"])\n            ],\n            requiredSetting: \"column-alert-expression\"\n        }\n    ],\n    [\n        \"alert-style\", {\n            requiredSetting: \"alert-expression\"\n        }\n    ],\n    [\n        \"link-alert-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"graph\"])\n            ],\n            requiredSetting: \"alert-expression\"\n        }\n    ],\n    [\n        \"node-alert-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"graph\"])\n            ],\n            requiredSetting: \"alert-expression\"\n        }\n    ],\n    [\n        \"icon-alert-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"pie\", \"text\"])\n            ],\n            requiredSetting: \"icon-alert-expression\"\n        }\n    ],\n    [\n        \"icon-alert-expression\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"pie\"])\n            ],\n            requiredSetting: \"icon\"\n        }\n    ],\n    [\n        \"icon-color\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"text\"])\n            ],\n            requiredSetting: \"icon\"\n        }\n    ],\n    [\n        \"icon-position\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"text\"])\n            ],\n            requiredSetting: \"icon\"\n        }\n    ],\n    [\n        \"icon-size\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"text\"])\n            ],\n            requiredSetting: \"icon\"\n        }\n    ],\n    [\n        \"caption-style\", {\n            conditions: [\n                condition_1.requiredCondition(\"type\", [\"pie\", \"gauge\"])\n            ],\n            requiredSetting: \"caption\"\n        }\n    ]\n]);\nconst rule = {\n    name: \"Checks presence of required setting if dependent is specified\",\n    check(section) {\n        const diagnostics = [];\n        checks.forEach((requirement, dependent) => {\n            if (!section.matchesConditions(requirement.conditions)) {\n                return;\n            }\n            const dependentSetting = section.getSettingFromTree(dependent);\n            if (dependentSetting === undefined) {\n                return;\n            }\n            const reqNames = requirement.requiredSetting;\n            let required;\n            let msg;\n            if (Array.isArray(reqNames)) {\n                for (const displayName of reqNames) {\n                    required = section.getSettingFromTree(displayName);\n                    if (required) {\n                        break;\n                    }\n                }\n                msg = messageUtil_1.noRequiredSettings(dependent, reqNames);\n            }\n            else {\n                required = section.getSettingFromTree(reqNames);\n                msg = messageUtil_1.noRequiredSetting(dependent, reqNames);\n            }\n            if (required === undefined) {\n                diagnostics.push(util_1.createDiagnostic(section.range.range, msg));\n            }\n        });\n        return diagnostics;\n    }\n};\nexports.default = rule;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/presenceValidation/requiredSettings.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/utils/condition.ts":
/*!*************************************************************!*\
  !*** ../server/src/relatedSettingsRules/utils/condition.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\n/**\n * Settings, that are frequently used in conditions checks,\n * see requiredSettings.ts and uselessSettings.ts.\n */\nconst frequentlyUsed = [\"mode\", \"type\"];\n/**\n * Returns value of setting with specified displayName:\n *  a) if setting is frequently used, tries to get it from section's scope;\n *  b) otherwise searches setting in tree\n *  c) if there is no setting in tree, returns default value.\n *\n * @param settingName - Name of setting, which value is requisted\n * @param section - Start section, from which setting must be searched\n * @returns Value of Setting with name `settingName`.\n */\nfunction getValueOfCheckedSetting(settingName, section) {\n    let value;\n    if (frequentlyUsed.includes(settingName)) {\n        value = section.getScopeValue(settingName);\n    }\n    else {\n        let setting = section.getSettingFromTree(settingName);\n        if (setting === undefined) {\n            /**\n             * Setting is not declared, thus loooking for default value.\n             */\n            setting = util_1.getSetting(settingName);\n            if (setting !== undefined) {\n                value = setting.defaultValue;\n            }\n        }\n        else {\n            value = setting.value;\n        }\n    }\n    return value;\n}\n/**\n * Returns function, which validates value of specified setting.\n *\n * @param settingName - Name of the setting\n * @param possibleValues  - Values that can be assigned to the setting\n * @returns The function, which checks that value of setting with name `settingName` is any of `possibleValues`\n */\nfunction requiredCondition(settingName, possibleValues) {\n    return (section) => {\n        const value = getValueOfCheckedSetting(settingName, section);\n        return value ? new RegExp(possibleValues.join(\"|\")).test(value.toString()) : true;\n    };\n}\nexports.requiredCondition = requiredCondition;\n/**\n * Returns function, which validates value of specified setting and generates string\n * with allowed values if check is not passed.\n *\n * @param settingName - Name of the setting\n * @param possibleValues - Values that can be assigned to the setting\n * @returns The function, which checks that value of setting with name `settingName` is any of `possibleValues`\n *          and generates info string if check is not passed\n */\nfunction isNotUselessIf(settingName, possibleValues) {\n    return (section) => {\n        const value = getValueOfCheckedSetting(settingName, section);\n        const valueIsOk = value ? new RegExp(possibleValues.join(\"|\")).test(value.toString()) : true;\n        if (!valueIsOk) {\n            if (possibleValues.length > 1) {\n                return `${settingName} is one of ${possibleValues.join(\", \")}`;\n            }\n            else {\n                return `${settingName} is ${possibleValues[0]}`;\n            }\n        }\n        return null;\n    };\n}\nexports.isNotUselessIf = isNotUselessIf;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/utils/condition.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/valueValidation/colorsThresholds.ts":
/*!******************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/valueValidation/colorsThresholds.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messageUtil_1 = __webpack_require__(/*! ../../messageUtil */ \"../server/src/messageUtil.ts\");\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\nconst condition_1 = __webpack_require__(/*! ../utils/condition */ \"../server/src/relatedSettingsRules/utils/condition.ts\");\nconst rule = {\n    name: \"Checks colors is less than thresholds by 1\",\n    check(section) {\n        let colorsValues;\n        let thresholdsValues;\n        if (!section.matchesConditions([\n            condition_1.requiredCondition(\"type\", [\"calendar\", \"treemap\", \"gauge\"]),\n            condition_1.requiredCondition(\"mode\", [\"half\", \"default\"])\n        ])) {\n            return;\n        }\n        const colorsSetting = section.getSettingFromTree(\"colors\");\n        if (colorsSetting === undefined) {\n            return;\n        }\n        const thresholdsSetting = section.getSettingFromTree(\"thresholds\");\n        if (thresholdsSetting === undefined) {\n            return util_1.createDiagnostic(section.range.range, `thresholds is required if colors is specified`);\n        }\n        if (colorsSetting.values.length > 0) {\n            colorsSetting.values.push(colorsSetting.value);\n            colorsValues = colorsSetting.values;\n        }\n        else {\n            /**\n             * Converts 1) -> 2):\n             * 1) colors = rgb(247,251,255), rgb(222,235,247), rgb(198,219,239)\n             * 2) colors = rgb, rgb, rgb\n             */\n            colorsValues = colorsSetting.value.replace(/(\\s*\\d{3}\\s*,?)/g, \"\");\n            colorsValues = colorsValues.split(\",\").filter(s => s.trim() !== \"\");\n        }\n        if (thresholdsSetting.values.length > 0) {\n            thresholdsSetting.values.push(thresholdsSetting.value);\n            thresholdsValues = thresholdsSetting.values;\n        }\n        else {\n            thresholdsValues = thresholdsSetting.value.split(\",\").filter(s => s.trim() !== \"\");\n        }\n        const expected = thresholdsValues.length - 1;\n        if (colorsValues.length !== expected) {\n            return util_1.createDiagnostic(colorsSetting.textRange, messageUtil_1.incorrectColors(`${colorsValues.length}`, `${expected}`));\n        }\n    }\n};\nexports.default = rule;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/valueValidation/colorsThresholds.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/valueValidation/forecastAutoCountAndEigentripleLimit.ts":
/*!**************************************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/valueValidation/forecastAutoCountAndEigentripleLimit.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\nconst rule = {\n    name: \"Checks forecast-ssa-group-auto-count is greater than forecast-ssa-decompose-eigentriple-limit\",\n    check(section) {\n        const groupAutoCount = section.getSettingFromTree(\"forecast-ssa-group-auto-count\");\n        if (groupAutoCount === undefined) {\n            return;\n        }\n        const forecastLimit = section.getSettingFromTree(\"forecast-ssa-decompose-eigentriple-limit\");\n        const eigentripleLimitValue = forecastLimit ?\n            forecastLimit.value : util_1.getSetting(\"forecast-ssa-decompose-eigentriple-limit\").defaultValue;\n        if (eigentripleLimitValue <= groupAutoCount.value) {\n            return util_1.createDiagnostic(groupAutoCount.textRange, `forecast-ssa-group-auto-count ` +\n                `must be less than forecast-ssa-decompose-eigentriple-limit (default 0)`);\n        }\n    }\n};\nexports.default = rule;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/valueValidation/forecastAutoCountAndEigentripleLimit.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/valueValidation/forecastEndTime.ts":
/*!*****************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/valueValidation/forecastEndTime.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\nconst rule = {\n    name: \"Checks forecast-horizon-end-time is greater than end-time\",\n    check(section) {\n        let forecast = section.getSettingFromTree(\"forecast-horizon-end-time\");\n        if (forecast === undefined) {\n            return;\n        }\n        let end = section.getSettingFromTree(\"end-time\");\n        if (end === undefined) {\n            return;\n        }\n        if (end.value >= forecast.value) {\n            return util_1.createDiagnostic(end.textRange, `${forecast.displayName} must be greater than ${end.displayName}`, vscode_languageserver_types_1.DiagnosticSeverity.Error);\n        }\n    }\n};\nexports.default = rule;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/valueValidation/forecastEndTime.ts?");

/***/ }),

/***/ "../server/src/relatedSettingsRules/valueValidation/startEndTime.ts":
/*!**************************************************************************!*\
  !*** ../server/src/relatedSettingsRules/valueValidation/startEndTime.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst util_1 = __webpack_require__(/*! ../../util */ \"../server/src/util.ts\");\nconst rule = {\n    name: \"Checks start-time is greater than end-time\",\n    check(section) {\n        const end = section.getSettingFromTree(\"end-time\");\n        const start = section.getSettingFromTree(\"start-time\");\n        if (end === undefined || start === undefined) {\n            return;\n        }\n        if (start.value >= end.value) {\n            return util_1.createDiagnostic(end.textRange, `${end.displayName} must be greater than ${start.displayName}`, vscode_languageserver_types_1.DiagnosticSeverity.Error);\n        }\n    }\n};\nexports.default = rule;\n\n\n//# sourceURL=webpack:///../server/src/relatedSettingsRules/valueValidation/startEndTime.ts?");

/***/ }),

/***/ "../server/src/resources.ts":
/*!**********************************!*\
  !*** ../server/src/resources.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__dirname) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst browser_or_node_1 = __webpack_require__(/*! browser-or-node */ \"../server/node_modules/browser-or-node/lib/index.js\");\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\n/**\n * Reads dictionary from \"dictionary.json\" file\n * @returns array of settings from the file\n */\nfunction readSettings() {\n    let dictionary;\n    if (browser_or_node_1.isNode) {\n        const path = __webpack_require__(/*! path */ \"path\");\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const dictionaryFilePath = path.join(__dirname, \"..\", \"dictionary.json\");\n        const jsonContent = fs.readFileSync(dictionaryFilePath, \"UTF-8\");\n        dictionary = JSON.parse(jsonContent);\n    }\n    else {\n        const jsonContent = __webpack_require__(/*! ../dictionary.json */ \"../server/dictionary.json\");\n        dictionary = jsonContent;\n    }\n    return dictionary.settings;\n}\n/**\n * Reads descriptions from \"descriptions.md\" file\n * @returns map of settings names and descriptions\n */\nfunction readDescriptions() {\n    let content = \"\";\n    if (browser_or_node_1.isNode) {\n        const path = __webpack_require__(/*! path */ \"path\");\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const descriptionsPath = path.join(__dirname, \"..\", \"descriptions.md\");\n        content = fs.readFileSync(descriptionsPath, \"UTF-8\");\n    }\n    else {\n        content = __webpack_require__(/*! ../descriptions.md */ \"../server/descriptions.md\").default;\n    }\n    const map = new Map();\n    // ## settingname\\n\\nsetting description[url](hello#html)\\n\n    const regExp = /\\#\\# ([a-z]+?)  \\n  \\n([^\\s#][\\S\\s]+?)  (?=\\n  (?:\\n(?=\\#)|$))/g;\n    let match = regExp.exec(content);\n    while (match !== null) {\n        const [, name, description] = match;\n        map.set(name, description);\n        match = regExp.exec(content);\n    }\n    return map;\n}\n/**\n * Tests if the provided setting complete or not\n * @param setting the setting to test\n * @returns true, if setting is complete, false otherwise\n */\nfunction isCompleteSetting(setting) {\n    return setting !== undefined &&\n        setting.displayName !== undefined &&\n        setting.type !== undefined &&\n        setting.example !== undefined;\n}\n/**\n * @returns map of settings, key is the setting name, value is instance of Setting\n */\nfunction createSettingsMap() {\n    const descriptions = readDescriptions();\n    const settings = readSettings();\n    const map = new Map();\n    for (const setting of settings) {\n        if (isCompleteSetting(setting)) {\n            const name = setting_1.Setting.clearSetting(setting.displayName);\n            Object.assign(setting, { name, description: descriptions.get(name) });\n            const completeSetting = new setting_1.Setting(setting);\n            map.set(completeSetting.name, completeSetting);\n        }\n    }\n    return map;\n}\nexports.settingsMap = createSettingsMap();\n/**\n * Map of required settings for each section and their \"aliases\".\n * For instance, `series` requires `entity`, but `entities` is also allowed.\n * Additionally, `series` requires `metric`, but `table` with `attribute` is also ok\n */\nexports.requiredSectionSettingsMap = new Map([\n    [\"configuration\", {\n            sections: [\n                [\"group\"],\n            ],\n        }],\n    [\"series\", {\n            settings: [\n                [\n                    exports.settingsMap.get(\"entity\"), exports.settingsMap.get(\"value\"),\n                    exports.settingsMap.get(\"entities\"), exports.settingsMap.get(\"entitygroup\"),\n                    exports.settingsMap.get(\"entityexpression\"),\n                ],\n                [\n                    exports.settingsMap.get(\"metric\"), exports.settingsMap.get(\"value\"),\n                    exports.settingsMap.get(\"table\"), exports.settingsMap.get(\"attribute\"),\n                ],\n            ],\n        }],\n    [\"group\", {\n            sections: [\n                [\"widget\"],\n            ],\n        }],\n    [\"widget\", {\n            sections: [\n                [\"series\"],\n            ],\n            settings: [\n                [exports.settingsMap.get(\"type\")],\n            ],\n        }],\n    [\"dropdown\", {\n            settings: [\n                [exports.settingsMap.get(\"onchange\"), exports.settingsMap.get(\"changefield\")],\n            ],\n        }],\n    [\"node\", {\n            settings: [\n                [exports.settingsMap.get(\"id\")],\n            ],\n        }],\n]);\nexports.widgetRequirementsByType = new Map([\n    [\"console\", {\n            sections: [],\n        }],\n    [\"page\", {\n            sections: [],\n        }],\n    [\"property\", {\n            sections: [\n                [\"property\"],\n            ],\n        }],\n    [\"graph\", {\n            sections: [\n                [\"series\", \"node\", \"link\"]\n            ],\n        }],\n]);\n/**\n * Key is section name, value is array of parent sections for the key section\n */\nexports.parentSections = new Map([\n    [\"widget\", [\"group\", \"configuration\"]],\n    [\"series\", [\"widget\", \"link\"]],\n    [\"tag\", [\"series\"]],\n    [\"tags\", [\"series\"]],\n    [\"column\", [\"widget\"]],\n    [\"node\", [\"widget\"]],\n    [\"link\", [\"widget\"]],\n    [\"option\", [\"dropdown\"]]\n]);\n/**\n * @returns true if the current section is nested in the previous section\n */\nfunction isNestedToPrevious(currentName, previousName) {\n    if (currentName === undefined || previousName === undefined) {\n        return false;\n    }\n    return getParents(currentName).includes(previousName);\n}\nexports.isNestedToPrevious = isNestedToPrevious;\n/**\n * @returns array of parent sections for the section\n */\nfunction getParents(section) {\n    let parents = [];\n    const found = exports.parentSections.get(section);\n    if (found !== undefined) {\n        for (const father of found) {\n            // JS recursion is not tail-optimized, replace if possible\n            parents = parents.concat(father, getParents(father));\n        }\n    }\n    return parents;\n}\nexports.getParents = getParents;\nexports.sectionDepthMap = {\n    \"configuration\": 0,\n    \"group\": 1,\n    \"widget\": 2,\n    \"column\": 3,\n    \"dropdown\": 3,\n    \"keys\": 3,\n    \"link\": 3,\n    \"node\": 3,\n    \"other\": 3,\n    \"placeholders\": 3,\n    \"property\": 3,\n    \"series\": 3,\n    \"threshold\": 3,\n    \"option\": 4,\n    \"properties\": 4,\n    \"tag\": 4,\n    \"tags\": 4,\n};\n/**\n * Contains names of sections which can appear at depth `1..max_depth`, where\n * `max_depth` is a value from `sectionDepthMap`\n */\nexports.inheritableSections = new Set([\n    \"keys\", \"tags\"\n]);\n\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))\n\n//# sourceURL=webpack:///../server/src/resources.ts?");

/***/ }),

/***/ "../server/src/sectionStack.ts":
/*!*************************************!*\
  !*** ../server/src/sectionStack.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst resources_1 = __webpack_require__(/*! ./resources */ \"../server/src/resources.ts\");\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\nconst textRange_1 = __webpack_require__(/*! ./textRange */ \"../server/src/textRange.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\nclass SectionStackNode {\n    constructor(range) {\n        this.range = range;\n        this.dependencies = [];\n        this.settings = [];\n        const deps = resources_1.requiredSectionSettingsMap.get(this.name);\n        if (deps && deps.sections) {\n            this.setRequiredSections(deps.sections);\n        }\n    }\n    setRequiredSections(sections) {\n        this.dependencies.splice(0, this.dependencies.length);\n        for (const option of sections) {\n            this.dependencies.push({\n                resolvedCount: 0,\n                unresolved: option.slice(),\n            });\n        }\n    }\n    insertSetting(setting) {\n        this.settings.push(setting);\n    }\n    getSetting(name) {\n        const cleared = setting_1.Setting.clearSetting(name);\n        return this.settings.find(s => s.name === cleared);\n    }\n    /**\n     * Remove section from dependency list for every dependency option\n     * @param name name of incoming section\n     */\n    resolveDependency(name) {\n        for (const option of this.dependencies) {\n            const index = option.unresolved.indexOf(name);\n            if (index >= 0) {\n                option.resolvedCount++;\n                option.unresolved.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * True if dependencies for any dependency option are resolved\n     */\n    get dependenciesResolved() {\n        if (this.dependencies.length === 0) {\n            return true;\n        }\n        return this.dependencies.some((deps) => deps.unresolved.length === 0);\n    }\n    /**\n     * A name of underlying section\n     */\n    get name() {\n        return this.range.text;\n    }\n    /**\n     * A list of unresolved dependencies for section. If several options for\n     * dependency list provisioned, return best of them. The best option is\n     * an option with max number of resolved dependencies and min length of\n     * unresolved.\n     */\n    get unresolved() {\n        if (this.dependencies.length === 0) {\n            return [];\n        }\n        const bestDependencyOption = this.dependencies\n            .reduce((best, dep) => {\n            if (dep.resolvedCount > best.resolvedCount) {\n                return dep;\n            }\n            if (dep.unresolved.length < best.unresolved.length) {\n                return dep;\n            }\n            return best;\n        });\n        return bestDependencyOption.unresolved;\n    }\n}\n/**\n * A null object to prevent multiple errors on missing root section\n */\nconst DummySectionStackNode = {\n    dependencies: [],\n    dependenciesResolved: true,\n    name: \"\",\n    range: new textRange_1.TextRange(\"\", vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), vscode_languageserver_types_1.Position.create(0, 0))),\n    settings: [],\n    unresolved: [],\n    resolveDependency() { },\n    setRequiredSections() { },\n    getSetting() { return undefined; },\n    insertSetting() { },\n    [Symbol.toStringTag]: \"DummySectionStackNode\",\n};\n// tslint:disable-next-line:max-classes-per-file\nclass SectionStack {\n    constructor() {\n        this.stack = [];\n    }\n    insertSection(section) {\n        const sectionName = section.text;\n        let [depth, error] = this.checkAndGetDepth(section);\n        if (depth < this.stack.length) {\n            if (depth === 0) {\n                // We are attempting to declare [configuration] twice\n                return this.createErrorDiagnostic(section, `Unexpected section [${sectionName}].`);\n            }\n            // Pop stack, check dependencies of popped resolved\n            error = this.checkDependenciesResolved(depth);\n            this.stack.splice(depth, this.stack.length - depth);\n        }\n        for (let i = this.stack.length; i < depth; i++) {\n            this.stack.push(DummySectionStackNode);\n        }\n        for (const entry of this.stack) {\n            entry.resolveDependency(sectionName);\n        }\n        this.stack.push(new SectionStackNode(section));\n        return error;\n    }\n    getLastSection() {\n        return this.stack[this.stack.length - 1];\n    }\n    finalize() {\n        let err = this.checkDependenciesResolved(0);\n        this.stack = [];\n        return err;\n    }\n    requireSections(targetSection, ...sections) {\n        let target = this.stack.find(s => s.name === targetSection);\n        if (target) {\n            for (let dep of target.dependencies) {\n                for (let section of sections) {\n                    if (!dep.unresolved.includes(section)) {\n                        dep.unresolved.push(section);\n                    }\n                }\n            }\n            if (target.dependencies.length === 0) {\n                target.dependencies.push({\n                    resolvedCount: 0,\n                    unresolved: sections,\n                });\n            }\n        }\n    }\n    setSectionRequirements(targetSection, sections) {\n        let target = this.stack.find(s => s.name === targetSection);\n        if (target) {\n            target.setRequiredSections(sections);\n        }\n    }\n    insertCurrentSetting(setting) {\n        if (this.stack.length > 0) {\n            let target = this.stack[this.stack.length - 1];\n            target.insertSetting(setting);\n        }\n    }\n    /**\n     * Returns the setting by name.\n     * @param name setting name\n     * @param recursive if true searches setting in the whole stack and returns the closest one,\n     * otherwise searches setting in the current section\n     */\n    getCurrentSetting(name, recursive = true) {\n        let visitSectionCount = recursive ? this.stack.length : 1;\n        for (let i = visitSectionCount; i > 0;) {\n            let section = this.stack[--i];\n            let value = section.getSetting(name);\n            if (value !== void 0) {\n                return value;\n            }\n        }\n        return undefined;\n    }\n    getSectionSettings(section, recursive = true) {\n        let targetIdx = section ? this.stack.findIndex(s => s.name === section) : this.stack.length - 1;\n        let result = [];\n        if (targetIdx >= 0) {\n            let start = recursive ? 0 : targetIdx;\n            for (let i = start; i <= targetIdx; i++) {\n                let target = this.stack[i];\n                for (const setting of target.settings) {\n                    result.push(setting);\n                }\n            }\n        }\n        return result;\n    }\n    getSectionRange(section) {\n        let node = this.stack.find(s => s.name === section);\n        return node ? node.range : null;\n    }\n    createErrorDiagnostic(section, message) {\n        return util_1.createDiagnostic(section.range, message, vscode_languageserver_types_1.DiagnosticSeverity.Error);\n    }\n    checkDependenciesResolved(startIndex) {\n        const stack = this.stack;\n        for (let i = stack.length; i > startIndex;) {\n            const section = stack[--i];\n            if (!section.dependenciesResolved) {\n                let unresolved = section.unresolved.map(s => `[${s}]`);\n                let message;\n                if (unresolved.length > 1) {\n                    message = `Required sections ${unresolved.join(\", \")} are not declared.`;\n                }\n                else {\n                    message = `Required section ${unresolved.join(\", \")} is not declared.`;\n                }\n                return this.createErrorDiagnostic(section.range, message);\n            }\n        }\n        return null;\n    }\n    checkAndGetDepth(sectionRange) {\n        const section = sectionRange.text;\n        const expectedDepth = this.stack.length;\n        let actualDepth = resources_1.sectionDepthMap[section];\n        let error = null;\n        if (actualDepth == null) {\n            error = this.createErrorDiagnostic(sectionRange, `Unknown section [${section}].`);\n        }\n        else if (actualDepth > expectedDepth) {\n            let canBeInherited = resources_1.inheritableSections.has(section);\n            if (canBeInherited && expectedDepth > 0) {\n                actualDepth = expectedDepth;\n            }\n            else {\n                let errorMessage = `Unexpected section [${section}]. `;\n                let expectedSections = Object.entries(resources_1.sectionDepthMap)\n                    .filter(([, depth]) => depth === expectedDepth)\n                    .map(([key,]) => `[${key}]`);\n                if (expectedSections.length > 1) {\n                    errorMessage += `Expected one of ${expectedSections.join(\", \")}.`;\n                }\n                else {\n                    errorMessage += `Expected ${expectedSections[0]}.`;\n                }\n                error = this.createErrorDiagnostic(sectionRange, errorMessage);\n            }\n        }\n        return [actualDepth, error];\n    }\n}\nexports.SectionStack = SectionStack;\n\n\n//# sourceURL=webpack:///../server/src/sectionStack.ts?");

/***/ }),

/***/ "../server/src/setting.ts":
/*!********************************!*\
  !*** ../server/src/setting.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst defaultSetting_1 = __webpack_require__(/*! ./defaultSetting */ \"../server/src/defaultSetting.ts\");\nconst messageUtil_1 = __webpack_require__(/*! ./messageUtil */ \"../server/src/messageUtil.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\nexports.intervalUnits = [\n    \"nanosecond\", \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\",\n];\nexports.calendarKeywords = [\n    \"current_day\", \"current_hour\", \"current_minute\", \"current_month\", \"current_quarter\", \"current_week\",\n    \"current_year\", \"first_day\", \"first_vacation_day\", \"first_working_day\", \"friday\", \"last_vacation_day\",\n    \"last_working_day\", \"monday\", \"next_day\", \"next_hour\", \"next_minute\", \"next_month\", \"next_quarter\",\n    \"next_vacation_day\", \"next_week\", \"next_working_day\", \"next_year\", \"now\", \"previous_day\", \"previous_hour\",\n    \"previous_minute\", \"previous_month\", \"previous_quarter\", \"previous_vacation_day\", \"previous_week\",\n    \"previous_working_day\", \"previous_year\", \"saturday\", \"sunday\", \"thursday\", \"tuesday\", \"wednesday\",\n];\nconst booleanKeywords = [\n    \"false\", \"no\", \"null\", \"none\", \"0\", \"off\", \"true\", \"yes\", \"on\", \"1\",\n];\nconst booleanRegExp = new RegExp(`^(?:${booleanKeywords.join(\"|\")})$`);\nconst calendarRegExp = new RegExp(\n// current_day\n`^(?:${exports.calendarKeywords.join(\"|\")})` +\n    // + 5 * minute\n    `(?:[ \\\\t]*[-+][ \\\\t]*(?:\\\\d+|(?:\\\\d+)?\\\\.\\\\d+)[ \\\\t]*\\\\*[ \\\\t]*(?:${exports.intervalUnits.join(\"|\")}))?$`);\nconst integerRegExp = /^[-+]?\\d+$/;\nconst intervalRegExp = new RegExp(\n// -5 month, +3 day, .3 year, 2.3 week, all\n`^(?:(?:[-+]?(?:(?:\\\\d+|(?:\\\\d+)?\\\\.\\\\d+)|@\\\\{.+\\\\})[ \\\\t]*(?:${exports.intervalUnits.join(\"|\")}))|all)$`);\nconst localDateRegExp = new RegExp(\n// 2018-12-31\n\"^(?:19[7-9]|[2-9]\\\\d\\\\d)\\\\d(?:-(?:0[1-9]|1[0-2])(?:-(?:0[1-9]|[12][0-9]|3[01])\" +\n    // 01:13:46.123, 11:26:52\n    \"(?: (?:[01]\\\\d|2[0-4]):(?:[0-5][0-9])(?::(?:[0-5][0-9]))?(?:\\\\.\\\\d{1,9})?)?)?)?$\");\n// 1, 5.2, 0.3, .9, -8, -0.5, +1.4\nconst numberRegExp = /^(?:\\-|\\+)?(?:\\.\\d+|\\d+(?:\\.\\d+)?)$/;\nconst zonedDateRegExp = new RegExp(\n// 2018-12-31\n\"^(?:19[7-9]|[2-9]\\\\d\\\\d)\\\\d-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])\" +\n    // T12:34:46.123, T23:56:18\n    \"[tT](?:[01]\\\\d|2[0-4]):(?:[0-5][0-9]):(?:[0-5][0-9])(?:\\\\.\\\\d{1,9})?\" +\n    // Z, +0400, -05:00\n    \"(?:[zZ]|[+-](?:[01]\\\\d|2[0-4]):?(?:[0-5][0-9]))$\");\nconst calculatedRegExp = /[@$]\\{.+\\}/;\n/**\n * Tests the provided string with regular expressions\n * @param text the target string\n * @returns true if the string is date expression, false otherwise\n */\nfunction isDate(text) {\n    return calendarRegExp.test(text) || localDateRegExp.test(text) || zonedDateRegExp.test(text);\n}\nconst specificValueChecksMap = new Map([\n    [\"forecastssagroupmanualgroups\", {\n            errMsg: \"Incorrect group syntax\",\n            isIncorrect: (value) => {\n                const regex = /^[\\d\\s,;-]+$/;\n                return !regex.test(value);\n            }\n        }],\n    [\"forecastssagroupautounion\", {\n            errMsg: \"Incorrect group union syntax\",\n            isIncorrect: (value) => {\n                const regex = /^[a-z\\s,;-]+$/;\n                return !regex.test(value);\n            }\n        }]\n]);\n/**\n * In addition to DefaultSetting contains specific fields.\n */\nclass Setting extends defaultSetting_1.DefaultSetting {\n    constructor(setting) {\n        super(setting);\n        /**\n         * Setting value.\n         */\n        this.value = \"\";\n        /**\n         * Setting values for multiline settings (mostly for colors and thresholds).\n         */\n        this.values = [];\n    }\n    get textRange() {\n        return this._textRange;\n    }\n    set textRange(value) {\n        this._textRange = value;\n    }\n    /**\n     * Checks the type of the setting and creates a corresponding diagnostic\n     * @param range where the error should be displayed\n     */\n    checkType(range) {\n        let result;\n        // allows ${} and @{} expressions\n        if (calculatedRegExp.test(this.value)) {\n            return result;\n        }\n        switch (this.type) {\n            case \"string\": {\n                if (!/\\S/.test(this.value)) {\n                    result = util_1.createDiagnostic(range, `${this.displayName} can not be empty`);\n                    break;\n                }\n                if (this.enum.length > 0) {\n                    if (this.value.split(/\\s*,\\s*/).some(s => this.enum.indexOf(s) < 0)) {\n                        const enumList = this.enum.sort().join(\"\\n * \");\n                        result = util_1.createDiagnostic(range, `${this.displayName} must contain only the following:\\n * ${enumList}`);\n                    }\n                    break;\n                }\n                const specCheck = specificValueChecksMap.get(this.name);\n                if (specCheck && specCheck.isIncorrect(this.value)) {\n                    result = util_1.createDiagnostic(range, specCheck.errMsg);\n                }\n                break;\n            }\n            case \"number\": {\n                const persent = /(\\d*)%/.exec(this.value);\n                if (this.name === \"arrowlength\" && persent) {\n                    this.maxValue = typeof this.maxValue === \"object\" ? this.maxValue.value * 100 : this.maxValue * 100;\n                    this.minValue = typeof this.minValue === \"object\" ? this.minValue.value * 100 : this.minValue * 100;\n                    this.value = persent[1];\n                }\n                result = this.checkNumber(numberRegExp, `${this.displayName} should be a real (floating-point) number.`, range);\n                break;\n            }\n            case \"integer\": {\n                result = this.checkNumber(integerRegExp, `${this.displayName} should be an integer number.`, range);\n                break;\n            }\n            case \"boolean\": {\n                if (!booleanRegExp.test(this.value)) {\n                    result = util_1.createDiagnostic(range, `${this.displayName} should be a boolean value. For example, ${this.example}`);\n                }\n                break;\n            }\n            case \"enum\": {\n                const index = this.findIndexInEnum(this.value);\n                // Empty enum means that the setting is not allowed\n                if (this.enum.length === 0) {\n                    result = util_1.createDiagnostic(range, messageUtil_1.illegalSetting(this.displayName));\n                }\n                else if (index < 0) {\n                    if (/percentile/.test(this.value) && /statistic/.test(this.name)) {\n                        result = this.checkPercentile(range);\n                        break;\n                    }\n                    const enumList = this.enum.sort().join(\"\\n * \")\n                        .replace(/percentile\\\\.+/, \"percentile(n)\");\n                    result = util_1.createDiagnostic(range, `${this.displayName} must be one of:\\n * ${enumList}`);\n                }\n                break;\n            }\n            case \"interval\": {\n                if (!intervalRegExp.test(this.value)) {\n                    const message = `.\\nFor example, ${this.example}. Supported units:\\n * ${exports.intervalUnits.join(\"\\n * \")}`;\n                    if (this.name === \"updateinterval\" && /^\\d+$/.test(this.value)) {\n                        result = util_1.createDiagnostic(range, `Specifying the interval in seconds is deprecated.\\nUse \\`count unit\\` format${message}`, vscode_languageserver_types_1.DiagnosticSeverity.Warning);\n                    }\n                    else {\n                        /**\n                         * Check other allowed non-interval values\n                         * (for example, period, summarize-period, group-period supports \"auto\")\n                         */\n                        if (this.enum.length > 0) {\n                            if (this.findIndexInEnum(this.value) < 0) {\n                                result = util_1.createDiagnostic(range, `Use ${this.enum.sort().join(\", \")} or \\`count unit\\` format${message}`);\n                            }\n                        }\n                        else {\n                            result = util_1.createDiagnostic(range, `${this.displayName} should be set as \\`count unit\\`${message}`);\n                        }\n                    }\n                }\n                break;\n            }\n            case \"date\": {\n                if (!isDate(this.value)) {\n                    result = util_1.createDiagnostic(range, `${this.displayName} should be a date. For example, ${this.example}`);\n                }\n                break;\n            }\n            case \"object\": {\n                try {\n                    JSON.parse(this.value);\n                }\n                catch (err) {\n                    result = util_1.createDiagnostic(range, `Invalid object specified: ${err.message}`);\n                }\n                break;\n            }\n            default: {\n                throw new Error(`${this.type} is not handled`);\n            }\n        }\n        return result;\n    }\n    checkNumber(reg, message, range) {\n        const example = ` For example, ${this.example}`;\n        if (!reg.test(this.value)) {\n            return util_1.createDiagnostic(range, `${message}${example}`);\n        }\n        const minValue = typeof this.minValue === \"object\" ? this.minValue.value : this.minValue;\n        const minValueExcluded = typeof this.minValue === \"object\" ? this.minValue.excluded : false;\n        const maxValue = typeof this.maxValue === \"object\" ? this.maxValue.value : this.maxValue;\n        const maxValueExcluded = typeof this.maxValue === \"object\" ? this.maxValue.excluded : false;\n        const left = minValueExcluded ? `(` : `[`;\n        const right = maxValueExcluded ? `)` : `]`;\n        if (minValueExcluded && +this.value <= minValue || +this.value < minValue ||\n            maxValueExcluded && +this.value >= maxValue || +this.value > maxValue) {\n            return util_1.createDiagnostic(range, `${this.displayName} should be in range ${left}${minValue}, ${maxValue}${right}.${example}`);\n        }\n        return undefined;\n    }\n    checkPercentile(range) {\n        let result;\n        const n = this.value.match(/[^percntil_()]+/);\n        if (n && +n[0] >= 0 && +n[0] <= 100) {\n            if (/_/.test(this.value)) {\n                result = util_1.createDiagnostic(range, `Underscore is deprecated, use percentile(${n[0]}) instead`, vscode_languageserver_types_1.DiagnosticSeverity.Warning);\n            }\n            else if (!new RegExp(`\\\\(${n[0]}\\\\)`).test(this.value)) {\n                result = util_1.createDiagnostic(range, `Wrong usage. Expected: percentile(${n[0]}).\nCurrent: ${this.value}`);\n            }\n        }\n        else {\n            result = util_1.createDiagnostic(range, `n must be a decimal number between [0, 100]. Current: ${n ? n[0] : n}`);\n        }\n        return result;\n    }\n    findIndexInEnum(value) {\n        const index = this.enum.findIndex((option) => new RegExp(`^${option}$`, \"i\").test(value));\n        return index;\n    }\n}\nexports.Setting = Setting;\n\n\n//# sourceURL=webpack:///../server/src/setting.ts?");

/***/ }),

/***/ "../server/src/textRange.ts":
/*!**********************************!*\
  !*** ../server/src/textRange.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\n/**\n * Contains the text and the position of the text\n */\nclass TextRange {\n    constructor(text, range, canBeUnclosed = false) {\n        /**\n         * Priority of the text, used in jsDomCaller: settings with higher priority are placed earlier in test js \"file\"\n         */\n        this.priority = 1 /* Low */;\n        this.range = range;\n        this.text = text;\n        this.canBeUnclosed = canBeUnclosed;\n    }\n    /**\n     * Checks is current keyword closeable or not (can be closed like var-endvar)\n     * @param line the line containing the keyword\n     * @returns true if the keyword closeable\n     */\n    static isCloseAble(line) {\n        return /^[\\s\\t]*(?:for|if|list|sql|var|script[\\s\\t]*$|csv|else|elseif)\\b/.test(line);\n    }\n    /**\n     * Checks does the keyword close a section or not\n     * @param line the line containing the keyword\n     * @returns true if the keyword closes a section\n     */\n    static isClosing(line) {\n        return /^[\\s\\t]*(?:end(?:for|if|list|var|script|sql|csv)|elseif|else)\\b/.test(line);\n    }\n    /**\n     * Parses a keyword from the line and creates a TextRange.\n     * @param line the line containing the keyword\n     * @param i the index of the line\n     * @param canBeUnclosed whether keyword can exist in both closed and unclosed variant or not\n     */\n    static parse(line, i, canBeUnclosed) {\n        const match = TextRange.KEYWORD_REGEXP.exec(line);\n        if (match === null) {\n            return undefined;\n        }\n        const [, indent, keyword] = match;\n        return new TextRange(keyword, util_1.createRange(indent.length, keyword.length, i), canBeUnclosed);\n    }\n    /**\n     * priority property setter\n     */\n    set textPriority(value) {\n        this.priority = value;\n    }\n}\n/**\n * Matches a keyword\n */\nTextRange.KEYWORD_REGEXP = \n// tslint:disable-next-line: max-line-length\n/^([ \\t]*)(import|endvar|endcsv|endfor|elseif|endif|endscript|endlist|endsql|script|else|if|list|sql|for|csv|var)\\b/i;\nexports.TextRange = TextRange;\n\n\n//# sourceURL=webpack:///../server/src/textRange.ts?");

/***/ }),

/***/ "../server/src/util.ts":
/*!*****************************!*\
  !*** ../server/src/util.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst resources_1 = __webpack_require__(/*! ./resources */ \"../server/src/resources.ts\");\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\nconst DIAGNOSTIC_SOURCE = \"Axibase Charts\";\n/**\n * @param value the value to find\n * @param map the map to search\n * @returns true if at least one value in map is/contains the wanted value\n */\nfunction isInMap(value, map) {\n    if (value == null) {\n        return false;\n    }\n    for (const array of map.values()) {\n        for (const item of array) {\n            if ((Array.isArray(item) && item.includes(value)) || (item === value)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.isInMap = isInMap;\n/**\n * @param target array of aliases\n * @param array array to perform the search\n * @returns true, if array contains a value from target\n */\nfunction isAnyInArray(target, array) {\n    for (const item of target) {\n        if (array.includes(item)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isAnyInArray = isAnyInArray;\n/**\n * Clears the passed argument and looks for a setting with the same name\n * @param name name of the wanted setting\n * @param range TextRange of the setting in text.\n * @returns the wanted setting or undefined if not found\n */\nfunction getSetting(name, range) {\n    const clearedName = setting_1.Setting.clearSetting(name);\n    const defaultSetting = resources_1.settingsMap.get(clearedName);\n    if (defaultSetting === undefined) {\n        return undefined;\n    }\n    const setting = new setting_1.Setting(defaultSetting);\n    if (range) {\n        setting.textRange = range;\n    }\n    return setting;\n}\nexports.getSetting = getSetting;\n/**\n * Counts CSV columns using RegExp.\n * @param line a CSV-formatted line\n * @returns number of CSV columns in the line\n */\nfunction countCsvColumns(line) {\n    if (line.length === 0) {\n        return 0;\n    }\n    const lineWithoutEscapes = line.replace(/(['\"]).+\\1/g, \"\"); // remove strings in quotes \"6,3\" or \"6 3\"\n    return lineWithoutEscapes.split(\",\").length;\n}\nexports.countCsvColumns = countCsvColumns;\n/**\n * Short-hand to create a diagnostic with undefined code and a standardized source\n * @param range Where is the mistake?\n * @param severity How severe is that problem?\n * @param message What message should be passed to the user?\n */\nfunction createDiagnostic(range, message, severity = vscode_languageserver_types_1.DiagnosticSeverity.Error) {\n    return vscode_languageserver_types_1.Diagnostic.create(range, message, severity, undefined, DIAGNOSTIC_SOURCE);\n}\nexports.createDiagnostic = createDiagnostic;\n/**\n * Replaces all comments with spaces.\n * We need to remember places of statements in the original configuration,\n * that's why it is not possible to delete all comments, whereas they must be ignored.\n * @param text the text to replace comments\n * @returns the modified text\n */\nfunction deleteComments(text) {\n    let content = text;\n    const multiLine = /\\/\\*[\\s\\S]*?\\*\\//g;\n    const oneLine = /^[ \\t]*#.*/mg;\n    let match = multiLine.exec(content);\n    if (match === null) {\n        match = oneLine.exec(content);\n    }\n    while (match !== null) {\n        const newLines = match[0].split(\"\\n\").length - 1;\n        const spaces = Array(match[0].length)\n            .fill(\" \")\n            .concat(Array(newLines).fill(\"\\n\"))\n            .join(\"\");\n        content = `${content.substr(0, match.index)}${spaces}${content.substr(match.index + match[0].length)}`;\n        match = multiLine.exec(content);\n        if (match === null) {\n            match = oneLine.exec(content);\n        }\n    }\n    return content;\n}\nexports.deleteComments = deleteComments;\n/**\n * Replaces scripts body with newline character\n * @param text the text to perform modifications\n * @returns the modified text\n */\nfunction deleteScripts(text) {\n    return text.replace(/\\bscript\\b([\\s\\S]+?)\\bendscript\\b/g, \"script\\nendscript\");\n}\nexports.deleteScripts = deleteScripts;\n/**\n * @returns true if the current line contains white spaces or nothing, false otherwise\n */\nfunction isEmpty(str) {\n    return /^\\s*$/.test(str);\n}\nexports.isEmpty = isEmpty;\n/**\n * Creates a diagnostic for a repeated setting. Warning if this setting was\n * multi-line previously, but now it is deprecated, error otherwise.\n * @param range The range where the diagnostic will be displayed\n * @param declaredAbove The setting, which has been declared earlier\n * @param current The current setting\n */\nfunction repetitionDiagnostic(range, declaredAbove, current) {\n    const diagnosticSeverity = ([\"script\", \"thresholds\", \"colors\"].includes(current.name)) ?\n        vscode_languageserver_types_1.DiagnosticSeverity.Warning : vscode_languageserver_types_1.DiagnosticSeverity.Error;\n    let message;\n    switch (current.name) {\n        case \"script\": {\n            message =\n                \"Multi-line scripts are deprecated.\\nGroup multiple scripts into blocks:\\nscript\\nendscript\";\n            break;\n        }\n        case \"thresholds\": {\n            message = `Replace multiple \\`thresholds\\` settings with one, for example:\nthresholds = 0\nthresholds = 60\nthresholds = 80\n\nthresholds = 0, 60, 80`;\n            declaredAbove.values.push(current.value);\n            break;\n        }\n        case \"colors\": {\n            message = `Replace multiple \\`colors\\` settings with one, for example:\ncolors = red\ncolors = yellow\ncolors = green\n\ncolors = red, yellow, green`;\n            declaredAbove.values.push(current.value);\n            break;\n        }\n        default:\n            message = `${declaredAbove.displayName} is already defined`;\n    }\n    return createDiagnostic(range, message, diagnosticSeverity);\n}\nexports.repetitionDiagnostic = repetitionDiagnostic;\n/**\n * Creates Range object.\n *\n * @param start - The starting position in the string\n * @param length - Length of the word to be highlighted\n * @param lineNumber - Number of line, where is the word to be highlighted\n * @returns Range object with start equal to `start` and end equal to `start+length` and line equal to `lineNumber`\n */\nfunction createRange(start, length, lineNumber) {\n    return vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(lineNumber, start), vscode_languageserver_types_1.Position.create(lineNumber, start + length));\n}\nexports.createRange = createRange;\n\n\n//# sourceURL=webpack:///../server/src/util.ts?");

/***/ }),

/***/ "../server/src/validator.ts":
/*!**********************************!*\
  !*** ../server/src/validator.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"../server/node_modules/vscode-languageserver-types/lib/esm/main.js\");\nconst config_1 = __webpack_require__(/*! ./config */ \"../server/src/config.ts\");\nconst configTree_1 = __webpack_require__(/*! ./configTree/configTree */ \"../server/src/configTree/configTree.ts\");\nconst configTreeValidator_1 = __webpack_require__(/*! ./configTree/configTreeValidator */ \"../server/src/configTree/configTreeValidator.ts\");\nconst defaultSetting_1 = __webpack_require__(/*! ./defaultSetting */ \"../server/src/defaultSetting.ts\");\nconst keywordHandler_1 = __webpack_require__(/*! ./keywordHandler */ \"../server/src/keywordHandler.ts\");\nconst messageUtil_1 = __webpack_require__(/*! ./messageUtil */ \"../server/src/messageUtil.ts\");\nconst resources_1 = __webpack_require__(/*! ./resources */ \"../server/src/resources.ts\");\nconst sectionStack_1 = __webpack_require__(/*! ./sectionStack */ \"../server/src/sectionStack.ts\");\nconst setting_1 = __webpack_require__(/*! ./setting */ \"../server/src/setting.ts\");\nconst textRange_1 = __webpack_require__(/*! ./textRange */ \"../server/src/textRange.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"../server/src/util.ts\");\nconst placeholderContainingSettings = [\n    \"url\", \"urlparameters\"\n];\n/** Regular expressions for CSV syntax checking */\n/**\n * RegExp for: `csv <name> =\n *              <header1>, <header2>`\n */\nconst CSV_NEXT_LINE_HEADER_PATTERN = /(^[ \\t]*csv[ \\t]+)(\\w+)[ \\t]*(=)/m;\n/**\n * RegExp for: 'csv <name> = <header1>, <header2>'\n */\nconst CSV_INLINE_HEADER_PATTERN = /=[ \\t]*$/m;\n/**\n * RegExp for: 'csv <name> from <url>'\n */\nconst CSV_FROM_URL_PATTERN = /(^[ \\t]*csv[ \\t]+)(\\w+)[ \\t]*(from)/m;\n/**\n * RegExp for blank line\n */\nconst BLANK_LINE_PATTERN = /^[ \\t]*$/m;\n/**\n * RegExp for 'csv' keyword\n */\nconst CSV_KEYWORD_PATTERN = /\\b(csv)\\b/i;\n/**\n * Performs validation of a whole document line by line.\n */\nclass Validator {\n    constructor(text) {\n        /**\n         * Array of declared aliases in the current widget\n         */\n        this.aliases = [];\n        /**\n         * Contains sections hierarchy from configuration\n         */\n        this.sectionStack = new sectionStack_1.SectionStack();\n        /**\n         * Array of settings declared in current section\n         */\n        this.currentSettings = [];\n        /**\n         * Array of de-aliases (value('alias')) in the current widget\n         */\n        this.deAliases = [];\n        /**\n         * Map of settings declared in if statement.\n         * Key is line number and keyword. For example, \"70if server == 'vps'\", \"29else\".\n         * Index is used to distinguish statements from each other\n         */\n        this.ifSettings = new Map();\n        /**\n         * Stack of nested keywords. For example, if can be included to a for.\n         */\n        this.keywordsStack = [];\n        /**\n         * Map of settings declared in parent sections. Keys are section names.\n         */\n        this.parentSettings = new Map();\n        /**\n         * Settings declared in the previous section\n         */\n        this.previousSettings = [];\n        /**\n         * Settings required to declare in the current section\n         */\n        this.requiredSettings = [];\n        /**\n         * Validation result\n         */\n        this.result = [];\n        /**\n         * Map of settings in the current widget and their values\n         */\n        this.settingValues = new Map();\n        /**\n         * Map of defined variables, where key is type (for, var, csv...)\n         */\n        this.variables = new Map([\n            [\"freemarker\", [\"entity\", \"entities\", \"type\"]],\n        ]);\n        /**\n         * Line number of last \"endif\" keyword\n         */\n        this.lastEndIf = undefined;\n        this.configTree = new configTree_1.ConfigTree();\n        this.config = new config_1.Config(text);\n        this.keywordHandler = new keywordHandler_1.KeywordHandler(this.keywordsStack);\n    }\n    /**\n     * Iterates over the document content line by line\n     * @returns diagnostics for all found mistakes\n     */\n    lineByLine() {\n        for (const line of this.config) {\n            /**\n             * At the moment 'csv <name> from <url>' supports unclosed syntax\n             */\n            let canBeSingle = false;\n            if (CSV_KEYWORD_PATTERN.test(line)) {\n                canBeSingle = !CSV_INLINE_HEADER_PATTERN.test(line) && !CSV_NEXT_LINE_HEADER_PATTERN.test(line);\n            }\n            this.foundKeyword = textRange_1.TextRange.parse(line, this.config.currentLineNumber, canBeSingle);\n            if (this.isNotKeywordEnd(\"script\") || this.isNotKeywordEnd(\"var\") || this.isNotKeywordEnd(\"sql\")) {\n                /**\n                 * Lines in multiline script and var sections\n                 * will be cheked in JavaScriptValidator.processScript() and processVar().\n                 * SQL-block must be skipped without any processing.\n                 */\n                continue;\n            }\n            if (this.isNotKeywordEnd(\"csv\")) {\n                this.validateCsv();\n            }\n            this.eachLine();\n            if (this.foundKeyword !== undefined) {\n                if (/\\b(if|for|csv)\\b/i.test(this.foundKeyword.text)) {\n                    this.keywordsStack.push(this.foundKeyword);\n                }\n                this.switchKeyword();\n            }\n        }\n        this.checkAliases();\n        this.diagnosticForLeftKeywords();\n        this.checkRequredSettingsForSection();\n        this.checkUrlPlaceholders();\n        this.setSectionToStackAndTree(null);\n        /**\n         * Apply checks, which require walking through the ConfigTree.\n         */\n        let rulesDiagnostics = configTreeValidator_1.ConfigTreeValidator.validate(this.configTree);\n        /**\n         * Ugly hack. Removes duplicates from rulesDiagnostics.\n         */\n        rulesDiagnostics = [\n            ...rulesDiagnostics.reduce(((allItems, item) => allItems.has(item.range) ? allItems : allItems.set(item.range, item)), new Map()).values()\n        ];\n        this.result.push(...rulesDiagnostics);\n        return this.result.concat(this.keywordHandler.diagnostics);\n    }\n    /**\n     * Checks whether has the keyword ended or not\n     * @param keyword keyword which is expected to end\n     */\n    isNotKeywordEnd(keyword) {\n        return this.areWeIn(keyword) && (this.foundKeyword === undefined || this.foundKeyword.text !== `end${keyword}`);\n    }\n    /**\n     * Adds all current section setting to parent\n     * if they're required by a section\n     */\n    addCurrentToParentSettings() {\n        if (this.currentSection !== undefined) {\n            for (const setting of this.currentSettings) {\n                this.addToParentsSettings(this.currentSection.text, setting);\n            }\n        }\n    }\n    /**\n     * Adds new entry to settingValue map and new Setting to SectionStack\n     * based on this.match, also sets value for setting.\n     * @param setting setting to which value will be set\n     */\n    addSettingValue(setting) {\n        if (this.match == null) {\n            throw new Error(\"Trying to add new entry to settingValues map and sectionStack based on undefined\");\n        }\n        const value = setting_1.Setting.clearValue(this.match[3]);\n        setting.value = value;\n        this.settingValues.set(setting.name, value);\n    }\n    /**\n     * Adds a setting based on this.match to array\n     * or creates a new diagnostic if setting is already present\n     * @param array the target array\n     * @returns the array containing the setting from this.match\n     */\n    addToSettingArray(variable, array) {\n        const result = (array === undefined) ? [] : array;\n        if (this.match == null) {\n            return result;\n        }\n        const [, indent, name] = this.match;\n        if (variable === undefined) {\n            return result;\n        }\n        const declaredAbove = result.find(v => v.name === variable.name);\n        if (declaredAbove !== undefined) {\n            const range = this.createRange(indent.length, name.length);\n            this.result.push(util_1.repetitionDiagnostic(range, declaredAbove, variable));\n        }\n        else {\n            result.push(variable);\n        }\n        return result;\n    }\n    /**\n     * Adds a setting based on this.match to the target map\n     * or creates a new diagnostic if setting is already present\n     * @param key the key, which value will contain the setting\n     * @param setting which setting to add\n     * @returns the map regardless was it modified or not\n     */\n    addToParentsSettings(key, setting) {\n        let array = this.parentSettings.get(key);\n        if (array === undefined) {\n            array = [setting];\n        }\n        else {\n            array.push(setting);\n        }\n        this.parentSettings.set(key, array);\n    }\n    /**\n     * Adds a string based on this.match to the array\n     * or creates a diagnostic if the string is already present\n     * @param array  the target array\n     * @returns the array regardless was it modified or not\n     */\n    addToStringArray(array) {\n        const result = array;\n        if (this.match == null) {\n            return result;\n        }\n        const [, indent, variable] = this.match;\n        if (array.includes(variable)) {\n            this.result.push(util_1.createDiagnostic(this.createRange(indent.length, variable.length), `${variable} is already defined`));\n        }\n        else {\n            result.push(variable);\n        }\n        return result;\n    }\n    /**\n     * Adds a string based on this.match to a value of the provided key\n     * @param map the target map\n     * @param key the key which value will contain the setting\n     * @returns the map regardless was it modified or not\n     */\n    addToStringMap(map, key) {\n        if (this.match == null) {\n            return map;\n        }\n        const [, indent, variable] = this.match;\n        if (util_1.isInMap(variable, map)) {\n            const startPosition = this.match.index + indent.length;\n            this.result.push(util_1.createDiagnostic(this.createRange(startPosition, variable.length), `${variable} is already defined`));\n        }\n        else {\n            let array = map.get(key);\n            if (array === undefined) {\n                array = [variable];\n            }\n            else {\n                array.push(variable);\n            }\n            map.set(key, array);\n        }\n        return map;\n    }\n    /**\n     * Tests if keywordsStack contain the provided name or not\n     * @param name the target keyword name\n     * @return true, if stack contains the keyword, false otherwise\n     */\n    areWeIn(name) {\n        return this.keywordsStack\n            .some((textRange) => textRange.text === name);\n    }\n    /**\n     * Checks that each de-alias has corresponding alias\n     */\n    checkAliases() {\n        this.deAliases.forEach((deAlias) => {\n            if (!this.aliases.includes(deAlias.text)) {\n                this.result.push(util_1.createDiagnostic(deAlias.range, messageUtil_1.unknownToken(deAlias.text)));\n            }\n        });\n    }\n    /**\n     * Tests that user has finished a corresponding keyword\n     * For instance, user can write \"endfor\" instead of \"endif\"\n     * @param expectedEnd What the user has finished?\n     */\n    checkEnd(expectedEnd) {\n        if (this.foundKeyword === undefined) {\n            return;\n        }\n        const lastKeyword = this.getLastKeyword();\n        if (lastKeyword === expectedEnd) {\n            this.keywordsStack.pop();\n            return;\n        }\n        if (!this.areWeIn(expectedEnd)) {\n            this.result.push(util_1.createDiagnostic(this.foundKeyword.range, messageUtil_1.noMatching(this.foundKeyword.text, expectedEnd)));\n        }\n        else {\n            const index = this.keywordsStack.findIndex((keyword) => keyword.text === expectedEnd);\n            this.keywordsStack.splice(index, 1);\n            this.result.push(util_1.createDiagnostic(this.foundKeyword.range, `${expectedEnd} has finished before ${lastKeyword}`));\n        }\n    }\n    /**\n     * Check that the section does not contain settings\n     * Which are excluded by the specified one\n     * @param setting the specified setting\n     */\n    checkExcludes(setting) {\n        if (this.match == null) {\n            return;\n        }\n        const [, indent, name] = this.match;\n        for (const item of this.currentSettings) {\n            if (setting.excludes.includes(item.displayName)) {\n                const range = this.createRange(indent.length, name.length);\n                this.result.push(util_1.createDiagnostic(range, `${setting.displayName} can not be specified simultaneously with ${item.displayName}`));\n            }\n        }\n    }\n    checkFreemarker() {\n        const line = this.config.getCurrentLine();\n        this.match = /<\\/?#.*?\\/?>/.exec(line);\n        if (this.match !== null) {\n            this.result.push(util_1.createDiagnostic(this.createRange(this.match.index, this.match[0].length), `Freemarker expressions are deprecated.\\nUse a native collection: list, csv table, var object.` +\n                `\\nMigration examples are available at ` +\n                `https://github.com/axibase/charts/blob/master/syntax/freemarker.md`, vscode_languageserver_types_1.DiagnosticSeverity.Information));\n            this.match = /(as\\s*(\\S+)>)/.exec(line);\n            if (this.match) {\n                this.addToStringArray(this.aliases);\n            }\n        }\n    }\n    /**\n     * Creates diagnostics if the current section does not contain required settings.\n     */\n    checkRequredSettingsForSection() {\n        if (this.currentSection === undefined) {\n            return;\n        }\n        if (this.previousSection && /tag/i.test(this.currentSection.text)) {\n            /**\n             * [tags] has finished, perform checks for parent section.\n             */\n            this.currentSettings = this.previousSettings;\n            this.currentSection = this.previousSection;\n        }\n        const sectionRequirements = resources_1.requiredSectionSettingsMap.get(this.currentSection.text);\n        if (!sectionRequirements) {\n            return;\n        }\n        const required = sectionRequirements.settings;\n        if (required !== undefined) {\n            this.requiredSettings = required.concat(this.requiredSettings);\n        }\n        const notFound = [];\n        required: for (const options of this.requiredSettings) {\n            const displayName = options[0].displayName;\n            if (displayName === \"metric\") {\n                const columnMetric = this.settingValues.get(\"columnmetric\");\n                const columnValue = this.settingValues.get(\"columnvalue\");\n                if (columnMetric === \"null\" && columnValue === \"null\") {\n                    continue;\n                }\n                const changeField = this.settingValues.get(\"changefield\");\n                if (/metric/.test(changeField)) {\n                    continue;\n                }\n            }\n            const optionsNames = options.map(s => s.name);\n            if (util_1.isAnyInArray(optionsNames, this.currentSettings.map(s => s.name))) {\n                continue;\n            }\n            for (const array of this.parentSettings.values()) {\n                // Trying to find in this section parents\n                if (util_1.isAnyInArray(optionsNames, array.map(s => s.name))) {\n                    continue required;\n                }\n            }\n            if (this.ifSettings.size > 0) {\n                for (const array of this.ifSettings.values()) {\n                    // Trying to find in each one of if-elseif-else... statement\n                    if (!util_1.isAnyInArray(optionsNames, array.map(s => s.name))) {\n                        notFound.push(displayName);\n                        continue required;\n                    }\n                }\n                const curSectLine = this.currentSection.range.end.line;\n                const lastCondLine = parseInt(this.lastCondition.match(/^\\d+/)[0], 10);\n                if ( // if-elseif-else statement inside the section\n                this.areWeIn(\"if\") ||\n                    // section inside the if-elseif-else statement\n                    curSectLine < this.lastEndIf && curSectLine > lastCondLine) {\n                    continue;\n                }\n                let ifCounter = 0;\n                let elseCounter = 0;\n                for (const statement of this.ifSettings.keys()) {\n                    if (/\\bif\\b/.test(statement)) {\n                        ifCounter++;\n                    }\n                    else if (/\\belse\\b/.test(statement)) {\n                        elseCounter++;\n                    }\n                }\n                if (ifCounter === elseCounter) {\n                    continue;\n                }\n            }\n            notFound.push(displayName);\n        }\n        for (const option of notFound) {\n            this.result.push(util_1.createDiagnostic(this.currentSection.range, `${option} is required`));\n        }\n        this.requiredSettings.splice(0, this.requiredSettings.length);\n    }\n    /**\n     * Creates a new diagnostic if the provided setting is defined\n     * @param setting the setting to perform check\n     */\n    checkRepetition(setting) {\n        if (this.match == null) {\n            return;\n        }\n        const [, indent, name] = this.match;\n        const range = this.createRange(indent.length, name.length);\n        if (this.areWeIn(\"if\")) {\n            if (this.lastCondition === undefined) {\n                throw new Error(\"We are in if, but last condition is undefined\");\n            }\n            let array = this.ifSettings.get(this.lastCondition);\n            array = this.addToSettingArray(setting, array);\n            this.ifSettings.set(this.lastCondition, array);\n            const declaredAbove = this.currentSettings.find(v => v.name === setting.name);\n            if (declaredAbove !== undefined) {\n                // The setting was defined before if\n                this.result.push(util_1.repetitionDiagnostic(range, declaredAbove, setting));\n                return;\n            }\n        }\n        else {\n            this.addToSettingArray(setting, this.currentSettings);\n        }\n        this.sectionStack.insertCurrentSetting(setting);\n    }\n    /**\n     * Creates diagnostics for all unclosed keywords\n     */\n    diagnosticForLeftKeywords() {\n        for (const nestedConstruction of this.keywordsStack) {\n            if (nestedConstruction.canBeUnclosed) {\n                continue;\n            }\n            this.result.push(util_1.createDiagnostic(nestedConstruction.range, messageUtil_1.noMatching(nestedConstruction.text, `end${nestedConstruction.text}`)));\n        }\n    }\n    /**\n     * Handles every line in the document, calls corresponding functions\n     */\n    eachLine() {\n        this.checkFreemarker();\n        const line = this.config.getCurrentLine();\n        this.match = /(^[\\t ]*\\[)(\\w+)\\][\\t ]*/.exec(line);\n        if ( // Section declaration, for example, [widget]\n        this.match !== null ||\n            /**\n             * We are in [tags] section and current line is empty - [tags] section has finished\n             */\n            (line.trim().length === 0 && this.currentSection !== undefined && this.currentSection.text === \"tags\")) {\n            // We met start of the next section, that means that current section has finished\n            if (this.match !== null) {\n                this.spellingCheck();\n            }\n            this.handleSection();\n        }\n        else {\n            this.match = /(^\\s*)([a-z].*?[a-z])\\s*=\\s*(.*?)\\s*$/.exec(line);\n            if (this.match !== null) {\n                // Setting declaration, for example, width-units = 6.2\n                this.checkSettingsWhitespaces();\n                this.handleSettings();\n                if (this.areWeIn(\"for\")) {\n                    this.validateFor();\n                }\n            }\n            this.match = /(^\\s*\\[)(\\w+)\\s*$/.exec(line);\n            if (this.match !== null) {\n                this.result.push(util_1.createDiagnostic(this.createRange(this.match[1].length, this.match[2].length), \"Section tag is unclosed\"));\n            }\n        }\n    }\n    /**\n     * Adds all de-aliases from the line to the corresponding array\n     */\n    findDeAliases() {\n        const line = this.config.getCurrentLine();\n        const regexp = /value\\((['\"])(\\S+?)\\1\\)/g;\n        const deAliasPosition = 2;\n        let freemarkerExpr;\n        let deAlias;\n        this.match = regexp.exec(line);\n        while (this.match !== null) {\n            deAlias = this.match[deAliasPosition];\n            freemarkerExpr = /(\\$\\{(\\S+)\\})/.exec(deAlias);\n            if (freemarkerExpr) {\n                // extract \"lpar\" from value('${lpar}PX')\n                deAlias = freemarkerExpr[deAliasPosition];\n            }\n            this.deAliases.push(new textRange_1.TextRange(deAlias, this.createRange(line.indexOf(deAlias), deAlias.length)));\n            this.match = regexp.exec(line);\n        }\n    }\n    /**\n     * Returns the keyword from the top of keywords stack without removing it\n     * @returns the keyword which is on the top of keywords stack\n     */\n    getLastKeyword() {\n        if (this.keywordsStack.length === 0) {\n            return undefined;\n        }\n        const stackHead = this.keywordsStack[this.keywordsStack.length - 1];\n        return stackHead.text;\n    }\n    /**\n     * Creates a diagnostic about unknown setting name or returns the setting\n     * @returns undefined if setting is unknown, setting otherwise\n     */\n    getSettingCheck() {\n        if (this.match == null) {\n            return undefined;\n        }\n        const settingName = this.match[2];\n        let setting = this.getSetting(settingName);\n        if (setting === undefined) {\n            if (/column-/.test(settingName)) {\n                return undefined;\n            }\n            if (textRange_1.TextRange.KEYWORD_REGEXP.test(settingName)) {\n                return undefined;\n            }\n            if (this.currentSection !== undefined && (this.currentSection.text === \"placeholders\" ||\n                this.currentSection.text === \"properties\")) {\n                /**\n                 * Return Setting instead of undefined because SectionStack.getSectionSettings(),\n                 * which is used in checkUrlPlaceholders(), returns Setting[] instead of Map<string, any>\n                 */\n                setting = new setting_1.Setting(new defaultSetting_1.DefaultSetting());\n                Object.assign(setting, { name: settingName, section: this.currentSection.text });\n                return setting;\n            }\n            const message = messageUtil_1.unknownToken(settingName);\n            this.result.push(util_1.createDiagnostic(this.createRange(this.match[1].length, settingName.length), message));\n            return undefined;\n        }\n        setting = setting.applyScope({\n            section: this.currentSection ? this.currentSection.text.trim() : \"\",\n            widget: this.currentWidget || \"\",\n        });\n        return setting;\n    }\n    /**\n     * Calculates the number of columns in the found csv header\n     */\n    handleCsv() {\n        const line = this.config.getCurrentLine();\n        let header = null;\n        if (CSV_INLINE_HEADER_PATTERN.exec(line)) {\n            let j = this.config.currentLineNumber + 1;\n            header = this.config.getLine(j);\n            while (header !== null && BLANK_LINE_PATTERN.test(header)) {\n                header = this.config.getLine(++j);\n            }\n        }\n        else {\n            let match = CSV_NEXT_LINE_HEADER_PATTERN.exec(line) || CSV_FROM_URL_PATTERN.exec(line);\n            if (match !== null) {\n                this.match = match;\n                header = line.substring(this.match.index + 1);\n            }\n            else {\n                this.result.push(util_1.createDiagnostic(this.foundKeyword.range, messageUtil_1.getCsvErrorMessage(line)));\n            }\n        }\n        this.addToStringMap(this.variables, \"csvNames\");\n        this.csvColumns = (header === null) ? 0 : util_1.countCsvColumns(header);\n    }\n    /**\n     * Creates a diagnostic if `else` is found, but `if` is not\n     * or `if` is not the last keyword\n     */\n    handleElse() {\n        if (this.foundKeyword === undefined) {\n            throw new Error(`We're trying to handle 'else ', but foundKeyword is ${this.foundKeyword}`);\n        }\n        this.setLastCondition();\n        let message;\n        if (!this.areWeIn(\"if\")) {\n            message = messageUtil_1.noMatching(this.foundKeyword.text, \"if\");\n        }\n        else if (this.getLastKeyword() !== \"if\") {\n            message = `${this.foundKeyword.text} has started before ${this.getLastKeyword()} has finished`;\n        }\n        if (message !== undefined) {\n            this.result.push(util_1.createDiagnostic(this.foundKeyword.range, message));\n        }\n    }\n    /**\n     * Removes the variable from the last `for`\n     */\n    handleEndFor() {\n        let forVariables = this.variables.get(\"forVariables\");\n        if (forVariables === undefined) {\n            forVariables = [];\n        }\n        else {\n            forVariables.pop();\n        }\n        this.variables.set(\"forVariables\", forVariables);\n    }\n    /**\n     * Creates diagnostics related to `for ... in _here_` statements\n     * Like \"for srv in servers\", but \"servers\" is not defined\n     * Also adds the new `for` variable to the corresponding map\n     */\n    handleFor() {\n        const line = this.config.getCurrentLine();\n        // groups are used in addToStringMap\n        this.match = /(^\\s*for\\s+)(\\w+)\\s+in\\s*/m.exec(line);\n        if (this.match != null) {\n            const collection = line.substring(this.match[0].length).trim();\n            if (collection !== \"\") {\n                const regs = [\n                    /^Object\\.keys\\((\\w+)(?:\\.\\w+)*\\)$/i,\n                    /^(\\w+)\\.values\\(([\"'])\\w+\\2\\)$/i,\n                    /^(\\w+)(\\[\\d+\\])*$/i // apps, apps[1]\n                ];\n                let varName;\n                for (const regex of regs) {\n                    const matched = regex.exec(collection);\n                    varName = matched ? matched[1] : null;\n                    if (varName) {\n                        break;\n                    }\n                }\n                if (!varName) {\n                    try {\n                        /**\n                         * Check for inline declaration, for example:\n                         * for widgetType in ['chart', 'calendar']\n                         */\n                        Function(`return ${collection}`);\n                    }\n                    catch (err) {\n                        const start = line.indexOf(collection);\n                        this.result.push(util_1.createDiagnostic(this.createRange(start, collection.length), \"Incorrect collection declaration.\"));\n                    }\n                }\n                else if (!util_1.isInMap(varName, this.variables)) {\n                    const message = messageUtil_1.unknownToken(varName);\n                    const start = line.lastIndexOf(varName);\n                    this.result.push(util_1.createDiagnostic(this.createRange(start, varName.length), message));\n                }\n            }\n            else {\n                const start = this.match[0].indexOf(\"in\");\n                this.result.push(util_1.createDiagnostic(this.createRange(start, \"in\".length), \"Empty 'in' statement\"));\n            }\n            this.addToStringMap(this.variables, \"forVariables\");\n        }\n    }\n    /**\n     * Adds new variable to corresponding map,\n     * Pushes a new keyword to the keyword stack\n     * If necessary (`list hello = value1, value2` should not be closed)\n     */\n    handleList() {\n        if (this.foundKeyword === undefined) {\n            throw new Error(`We're trying to handle 'list', but foundKeyword is undefined`);\n        }\n        const line = this.config.getCurrentLine();\n        this.match = /(^\\s*list\\s+)(\\w+)\\s*=/.exec(line);\n        this.addToStringMap(this.variables, \"listNames\");\n        if (/(=|,)[ \\t]*$/m.test(line)) {\n            this.keywordsStack.push(this.foundKeyword);\n        }\n        else {\n            let j = this.config.currentLineNumber + 1;\n            let nextLine = this.config.getLine(j);\n            while (nextLine !== null && /^[ \\t]*$/m.test(nextLine)) {\n                nextLine = this.config.getLine(++j);\n            }\n            if (nextLine !== null && (/^[ \\t]*,/.test(nextLine) || /\\bendlist\\b/.test(nextLine))) {\n                this.keywordsStack.push(this.foundKeyword);\n            }\n        }\n    }\n    /**\n     * Performs required operations after a section has finished.\n     * Mostly empties arrays.\n     */\n    handleSection() {\n        if (this.match == null) {\n            if (this.previousSection !== undefined) {\n                this.currentSection = this.previousSection;\n                this.currentSettings = this.previousSettings;\n            }\n            return;\n        }\n        const [, indent, name] = this.match;\n        const nextIsTags = this.currentSection && /tag/i.test(name);\n        if (!nextIsTags) {\n            /**\n             * If the next is [tags], no need to perform checks for current section now,\n             * they will be done after [tags] section finished.\n             */\n            this.checkRequredSettingsForSection();\n            this.addCurrentToParentSettings();\n            if (/widget/i.test(name)) {\n                this.checkAliases();\n                this.deAliases.splice(0, this.deAliases.length);\n                this.aliases.splice(0, this.aliases.length);\n                this.settingValues.clear();\n            }\n            this.checkUrlPlaceholders();\n            this.ifSettings.clear();\n        }\n        this.previousSettings = this.currentSettings.splice(0, this.currentSettings.length);\n        this.previousSection = this.currentSection;\n        this.currentSection = new textRange_1.TextRange(name, this.createRange(indent.length, name.length));\n        this.parentSettings.delete(this.currentSection.text);\n        this.setSectionToStackAndTree(this.currentSection);\n    }\n    /**\n     * Attempts to add section to section stack, displays error if section\n     * is out ouf hierarchy, unknown or has unresolved section dependencies\n     * If section is null, finalizes section stack and return summary error\n     * Adds last section of stack to ConfigTree.\n     * @param section section to add or null\n     */\n    setSectionToStackAndTree(section) {\n        let sectionStackError;\n        const lastSection = this.sectionStack.getLastSection();\n        if (lastSection) {\n            this.configTree.addSection(lastSection.range, lastSection.settings);\n        }\n        if (section == null) {\n            sectionStackError = this.sectionStack.finalize();\n        }\n        else {\n            sectionStackError = this.sectionStack.insertSection(this.currentSection);\n        }\n        if (sectionStackError) {\n            this.result.push(sectionStackError);\n        }\n    }\n    /**\n     * Calls functions in proper order to handle a found setting\n     */\n    handleSettings() {\n        if (this.match == null) {\n            return;\n        }\n        const line = this.config.getCurrentLine();\n        if (this.currentSection === undefined || !/(?:tag|key)s?/.test(this.currentSection.text)) {\n            this.handleRegularSetting();\n        }\n        else if (/(?:tag|key)s?/.test(this.currentSection.text) &&\n            // We are in tags/keys section\n            /(^[ \\t]*)([a-z].*?[a-z])[ \\t]*=/.test(line)) {\n            this.match = /(^[ \\t]*)([a-z].*?[a-z])[ \\t]*=/.exec(line);\n            if (this.match === null) {\n                return;\n            }\n            const [, indent, name] = this.match;\n            const setting = this.getSetting(name);\n            if (this.isAllowedWidget(setting)) {\n                this.result.push(util_1.createDiagnostic(this.createRange(indent.length, name.length), messageUtil_1.settingNameInTags(name), vscode_languageserver_types_1.DiagnosticSeverity.Information));\n            }\n        }\n    }\n    /**\n     * Checks whether the setting is defined and is allowed to be defined in the current widget\n     * @param setting the setting to be checked\n     */\n    isAllowedWidget(setting) {\n        return setting !== undefined\n            && this.currentSection.text !== \"tag\"\n            && (setting.widget == null\n                || this.currentWidget === undefined\n                || setting.widget === this.currentWidget);\n    }\n    /**\n     * Return true if the setting is allowed to be defined in the current section.\n     * @param setting The setting to be checked.\n     */\n    isAllowedInSection(setting) {\n        if (setting.section == null || this.currentSection == null) {\n            return true;\n        }\n        const currDepth = resources_1.sectionDepthMap[this.currentSection.text];\n        if (setting.name === \"mode\") {\n            if (this.currentWidget == null) {\n                return true;\n            }\n            if (this.currentWidget === \"chart\") {\n                if (setting.value === \"column-stack\") {\n                    return currDepth <= resources_1.sectionDepthMap.widget;\n                }\n                return currDepth <= resources_1.sectionDepthMap.series;\n            }\n        }\n        if (Array.isArray(setting.section)) {\n            return setting.section.some(s => currDepth <= resources_1.sectionDepthMap[s]);\n        }\n        else {\n            const reqDepth = resources_1.sectionDepthMap[setting.section];\n            return currDepth <= reqDepth;\n        }\n    }\n    /**\n     * Processes a regular setting which is defined not in tags/keys section\n     */\n    handleRegularSetting() {\n        const line = this.config.getCurrentLine();\n        const setting = this.getSettingCheck();\n        if (setting === undefined) {\n            return;\n        }\n        this.addSettingValue(setting);\n        /**\n         * Show hint if setting is deprecated\n         */\n        if (setting.deprecated) {\n            this.result.push(util_1.createDiagnostic(setting.textRange, setting.deprecated, vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n        }\n        if (!this.isAllowedInSection(setting)) {\n            this.result.push(util_1.createDiagnostic(setting.textRange, messageUtil_1.illegalSetting(setting.displayName), vscode_languageserver_types_1.DiagnosticSeverity.Error));\n        }\n        if (setting.name === \"type\") {\n            this.currentWidget = this.match[3];\n            let reqs = resources_1.widgetRequirementsByType.get(this.currentWidget);\n            if (reqs && reqs.sections) {\n                this.sectionStack.setSectionRequirements(\"widget\", reqs.sections);\n            }\n        }\n        if (!setting.multiLine) {\n            this.checkRepetition(setting);\n        }\n        else {\n            this.currentSettings.push(setting);\n            this.sectionStack.insertCurrentSetting(setting);\n        }\n        if (!(this.currentSection && [\"placeholders\", \"properties\", \"property\"].includes(this.currentSection.text))) {\n            this.typeCheck(setting);\n            this.checkExcludes(setting);\n            // Aliases\n            if (setting.name === \"alias\") {\n                this.match = /(^\\s*alias\\s*=\\s*)(\\S+)\\s*$/m.exec(line);\n                this.addToStringArray(this.aliases);\n            }\n            this.findDeAliases();\n        }\n    }\n    /**\n     * Check if settings or tag key contains whitespace and warn about it.\n     * Ignore any settings in [properties] section.\n     */\n    checkSettingsWhitespaces() {\n        const line = this.config.getCurrentLine();\n        const match = /(^\\s*)((\\w+\\s+)+\\w+)\\s*=\\s*(.+?)\\s*$/.exec(line);\n        if (match != null && match[2]) {\n            const settingName = match[2];\n            if (settingName && !this.foundKeyword && /^\\w+(\\s.*\\w)+$/.test(settingName)) {\n                const start = line.indexOf(settingName);\n                const range = this.createRange(start, settingName.length);\n                if (this.currentSection.text === \"tags\") {\n                    if (!/^[\"].+[\"]$/.test(settingName)) {\n                        this.result.push(util_1.createDiagnostic(range, messageUtil_1.tagNameWithWhitespaces(settingName), vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n                    }\n                }\n                else if (this.currentSection.text !== \"properties\") {\n                    this.result.push(util_1.createDiagnostic(range, messageUtil_1.settingsWithWhitespaces(settingName), vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n                }\n            }\n        }\n    }\n    /**\n     * Updates the lastCondition field\n     */\n    setLastCondition() {\n        this.lastCondition = `${this.config.currentLineNumber}${this.config.getCurrentLine()}`;\n    }\n    /**\n     * Checks spelling mistakes in a section name\n     */\n    spellingCheck() {\n        if (this.match == null) {\n            return;\n        }\n        const indent = this.match[1].length;\n        const word = this.match[2];\n        const range = this.createRange(indent, word.length);\n        if (word === \"tag\") {\n            this.result.push(util_1.createDiagnostic(range, messageUtil_1.deprecatedTagSection, vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n        }\n    }\n    /**\n     * Calls corresponding functions for the found keyword\n     */\n    switchKeyword() {\n        if (this.foundKeyword === undefined) {\n            throw new Error(`We're trying to handle a keyword, but foundKeyword is undefined`);\n        }\n        const line = this.config.getCurrentLine();\n        switch (this.foundKeyword.text) {\n            case \"endfor\":\n                this.handleEndFor();\n            case \"endif\":\n                this.lastEndIf = this.config.currentLineNumber;\n            case \"endvar\":\n            case \"endcsv\":\n            case \"endlist\":\n            case \"endsql\":\n            case \"endscript\": {\n                const expectedEnd = this.foundKeyword.text.substring(\"end\".length);\n                this.checkEnd(expectedEnd);\n                break;\n            }\n            case \"else\":\n            case \"elseif\": {\n                this.handleElse();\n                break;\n            }\n            case \"csv\": {\n                this.handleCsv();\n                break;\n            }\n            case \"var\": {\n                const openBrackets = line.match(/((\\s*[\\[\\{\\(]\\s*)+)/g);\n                const closeBrackets = line.match(/((\\s*[\\]\\}\\)]\\s*)+)/g);\n                if (openBrackets) {\n                    if (closeBrackets && openBrackets.map((s) => s.trim()).join(\"\").length !==\n                        closeBrackets.map((s) => s.trim()).join(\"\").length\n                        || closeBrackets === null) {\n                        // multiline var\n                        this.keywordsStack.push(this.foundKeyword);\n                    }\n                }\n                this.match = /(var\\s*)(\\w+)\\s*=/.exec(line);\n                this.addToStringMap(this.variables, \"varNames\");\n                break;\n            }\n            case \"list\": {\n                this.handleList();\n                break;\n            }\n            case \"for\": {\n                this.handleFor();\n                break;\n            }\n            case \"if\": {\n                const regex = /!=|==/;\n                if (!regex.test(line)) {\n                    this.result.push(util_1.createDiagnostic(this.foundKeyword.range, `Specify == or !=`));\n                }\n                this.setLastCondition();\n                break;\n            }\n            case \"script\": {\n                this.keywordHandler.handleScript(line, this.foundKeyword);\n                break;\n            }\n            case \"sql\": {\n                this.keywordHandler.handleSql(line, this.foundKeyword);\n                break;\n            }\n            case \"import\":\n                break;\n            default:\n                throw new Error(`${this.foundKeyword.text} is not handled`);\n        }\n    }\n    /**\n     * Performs type checks for the found setting value\n     * @param setting the setting to be checked\n     */\n    typeCheck(setting) {\n        if (this.match == null) {\n            return;\n        }\n        const range = this.createRange(this.match[1].length, this.match[2].length);\n        const diagnostic = setting.checkType(range);\n        if (diagnostic != null) {\n            this.result.push(diagnostic);\n        }\n    }\n    /**\n     * Creates diagnostics for a CSV line containing wrong columns number\n     */\n    validateCsv() {\n        const line = this.config.getCurrentLine();\n        const columns = util_1.countCsvColumns(line);\n        if (columns !== this.csvColumns && !/^[ \\t]*$/m.test(line)) {\n            this.result.push(util_1.createDiagnostic(this.createRange(0, line.length), `Expected ${this.csvColumns} columns, but found ${columns}`));\n        }\n    }\n    /**\n     * Creates diagnostics for unknown variables in `for` keyword\n     * like `for srv in servers setting = @{server} endfor`\n     * but `server` is undefined\n     */\n    validateFor() {\n        const line = this.config.getCurrentLine();\n        const atRegexp = /@{.+?}/g;\n        this.match = atRegexp.exec(line);\n        while (this.match !== null) {\n            const substr = this.match[0];\n            const startPosition = this.match.index;\n            const varRegexp = /[a-zA-Z_]\\w*(?!\\w*[\"\\('])/g;\n            this.match = varRegexp.exec(substr);\n            while (this.match !== null) {\n                if (substr.charAt(this.match.index - 1) === \".\") {\n                    this.match = varRegexp.exec(substr);\n                    continue;\n                }\n                const variable = this.match[0];\n                if (!util_1.isInMap(variable, this.variables)) {\n                    const position = startPosition + this.match.index;\n                    const message = messageUtil_1.unknownToken(variable);\n                    this.result.push(util_1.createDiagnostic(this.createRange(position, variable.length), message));\n                }\n                this.match = varRegexp.exec(substr);\n            }\n            this.match = atRegexp.exec(line);\n        }\n    }\n    getSetting(name) {\n        const line = this.config.getCurrentLine();\n        const start = line.indexOf(name);\n        const range = (start > -1) ? this.createRange(start, name.length) : undefined;\n        return util_1.getSetting(name, range);\n    }\n    checkUrlPlaceholders() {\n        let phs = this.getUrlPlaceholders();\n        if (phs.length > 0) {\n            if (this.currentSection && this.currentSection.text.match(/widget/i)) {\n                this.sectionStack.requireSections(\"widget\", \"placeholders\");\n            }\n        }\n        let placeholderRange = this.sectionStack.getSectionRange(\"placeholders\");\n        if (placeholderRange) {\n            let phSectionSettings = this.sectionStack.getSectionSettings(\"placeholders\", false);\n            let missingPhs = phs.filter(key => {\n                const cleared = setting_1.Setting.clearValue(key);\n                return phSectionSettings.find(s => s.name === cleared) == null;\n            });\n            if (missingPhs.length > 0) {\n                this.result.push(util_1.createDiagnostic(placeholderRange.range, `Missing placeholders: ${missingPhs.join(\", \")}.`, vscode_languageserver_types_1.DiagnosticSeverity.Error));\n            }\n            let unnecessaryPhs = phSectionSettings.filter(s => !phs.includes(s.name)).map(s => s.name);\n            if (unnecessaryPhs.length > 0) {\n                this.result.push(util_1.createDiagnostic(placeholderRange.range, `Unnecessary placeholders: ${unnecessaryPhs.join(\", \")}.`, vscode_languageserver_types_1.DiagnosticSeverity.Warning));\n            }\n        }\n    }\n    /**\n     * Returns all placeholders declared before the current line.\n     */\n    getUrlPlaceholders() {\n        let result = new Set();\n        for (let setting of placeholderContainingSettings) {\n            let currentSetting = this.sectionStack.getCurrentSetting(setting);\n            if (currentSetting) {\n                const regexp = /{(.+?)}/g;\n                let match = regexp.exec(currentSetting.value);\n                while (match !== null) {\n                    const cleared = setting_1.Setting.clearSetting(match[1]);\n                    result.add(cleared);\n                    match = regexp.exec(currentSetting.value);\n                }\n            }\n        }\n        // @ts-ignore\n        return [...result];\n    }\n    /**\n     * Creates Range object for the current line.\n     *\n     * @param start - The starting position in the string\n     * @param length - Length of the word to be highlighted\n     * @returns Range object with start equal to `start` and end equal to `start+length`\n     */\n    createRange(start, length) {\n        return util_1.createRange(start, length, this.config.currentLineNumber);\n    }\n}\nexports.Validator = Validator;\n\n\n//# sourceURL=webpack:///../server/src/validator.ts?");

/***/ }),

/***/ "../snippets/snippets.json":
/*!*********************************!*\
  !*** ../snippets/snippets.json ***!
  \*********************************/
/*! exports provided: configuration, csv, chart-basic, bar, bar-horizontal, box, calendar, calendar-thresholds, chart, chart-alert, chart-column, chart-combo, chart-computed, chart-dual-axis, chart-range, chart-stack, alert-console, message-console, gauge, graph, pie, property, chart-table, table-grid, text, treemap, histogram, portal: 3x2, series with tags, detail series, averaged series, default */
/***/ (function(module) {

eval("module.exports = {\"configuration\":{\"prefix\":\"configuration\",\"body\":[\"[configuration]\",\"  offset-right = ${1:50}\",\"  height-units = ${2:2}\",\"  width-units = ${3:2}\",\"\",\"  [group]\",\"\",\"    ${0}\"],\"description\":\"Initial configuration\"},\"csv\":{\"prefix\":\"csv\",\"body\":[\"csv ${1:cities} = ${2:name, region}\",\"  ${3:Sunnyvale, CA}\",\"  ${4:Cupertino, CA}\",\"endcsv\",\"\",\"for ${5:city} in ${1:cities}\",\"  entity = ${6:@{city.name}}\",\"endfor\",\"${0}\"],\"description\":\"Csv and corresponding for\"},\"chart-basic\":{\"prefix\":\"chart-basic\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:basic chart}\",\"  timespan = ${2:1 day}\",\"  max-range = ${3:100}\",\"\",\"  [series]\",\"    ${0}\"],\"description\":\"Basic chart\"},\"bar\":{\"prefix\":\"bar\",\"body\":[\"[widget]\",\"  type = bar\",\"  title = ${1:bar}\",\"  timespan = ${2:1 day}\",\"\",\"  [column]\",\"\",\"    [series]\",\"      entity = ${3:entity-1}\",\"      metric = ${4:metric-1}\",\"      ${0}\"],\"description\":\"Bar\"},\"bar-horizontal\":{\"prefix\":\"bar-horizontal\",\"body\":[\"[widget]\",\"  type = bar\",\"  title = ${1:Horizontal bar}\",\"  horizontal = true\",\"  timespan = ${2:1 day}\",\"\",\"  [column]\",\"\",\"    [series]\",\"      entity = ${3:entity-1}\",\"      metric = ${4:metric-1}\",\"      ${0}\"],\"description\":\"Horizontal bar\"},\"box\":{\"prefix\":\"box\",\"body\":[\"[widget]\",\"  type = box\",\"  title = ${1:Box}\",\"  timespan = ${2:1 day}\",\"  autoscale = ${3:false}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    format = ${6:kilobytes}\",\"    axis = ${7:right}\",\"    ${0}\"],\"description\":\"Box\"},\"calendar\":{\"prefix\":\"calendar\",\"body\":[\"[widget]\",\"  type = calendar\",\"  title = ${1:Calendar}\",\"  timespan = ${2:1 day}\",\"  summarize-period = ${3:10 minute}\",\"  color-range = ${4:blue}\",\"\",\"  [series]\",\"    entity = ${5:entity-1}\",\"    metric = ${6:metric-1}\",\"    ${0}\"],\"description\":\"Calendar\"},\"calendar-thresholds\":{\"prefix\":\"calendar-thresholds\",\"body\":[\"[widget]\",\"  type = calendar\",\"  title = ${1:Calendar}\",\"  timespan = ${2:1 day}\",\"  summarize-period = ${3:10 minute}\",\"\",\"  color-range = ${4:red}\",\"  thresholds = ${5:10, 20, 30, 40, 50, 60, 70, 80, 90, 100}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    statistic = ${8:percentile_95}\",\"    period = ${9:10 minute}\",\"    ${0}\"],\"description\":\"Calendar with thresholds\"},\"chart\":{\"prefix\":\"chart\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Chart}\",\"  timespan = ${2:1 day}\",\"  step-line = ${3:false}\",\"  min-range = ${4:0}\",\"  max-range = ${5:100}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    statistic = ${8:avg}\",\"    period = ${9:10 minute}\",\"    ${0}\"],\"description\":\"Chart\"},\"chart-alert\":{\"prefix\":\"chart-alert\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Alert chart}\",\"  timespan = ${2:1 day}\",\"  max-range = ${3:100}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    alert-expression = ${6:value > 5}\",\"    alert-style = ${7:stroke: red}\",\"    ${0}\"],\"description\":\"Alert chart \"},\"chart-column\":{\"prefix\":\"chart-column\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Column chart}\",\"  timespan = ${2:1 day}\",\"  max-range = ${3:100}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    statistic = ${6:percentile_75}\",\"    period = ${7:10 minute}\",\"    mode = column\",\"    ${0}\"],\"description\":\"Column chart\"},\"chart-combo\":{\"prefix\":\"chart-combo\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Combo chart}\",\"  timespan = ${2:1 day}\",\"  max-range = ${3:100}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    mode = ${6:column}\",\"    statistic = ${7:percentile_75}\",\"    period = ${8:10 minute}\",\"    color = ${9:green}\",\"    ${0}\"],\"description\":\"Combo chart\"},\"chart-computed\":{\"prefix\":\"chart-computed\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Computed chart}\",\"  timespan = ${2:1 day}\",\"  max-range = ${3:100}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    display = false\",\"    alias = ${6:free}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${7:metric-2}\",\"    display = false\",\"    alias = ${8:total}\",\"\",\"  [series]\",\"    label = ${9:Memory Used, %}\",\"    value = ${10:(1 - value('${6:free}') / value('${8:total}')) * 100}\",\"    markers = ${11:false}\",\"    ${0}\"],\"description\":\"Computed chart\"},\"chart-dual-axis\":{\"prefix\":\"chart-dual-axis\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Dual axis chart}\",\"  timespan = ${2:1 day}\",\"  step-line = ${3:false}\",\"  min-range = ${4:0}\",\"  max-range = ${5:100}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    statistic = ${8:avg}\",\"    period = ${9:10 minute}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${10:metric-2}\",\"    axis = right\",\"    format = ${11:kilobytes}\",\"    markers = false\",\"    ${0}\"],\"description\":\"Dual axis chart\"},\"chart-range\":{\"prefix\":\"chart-range\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Range chart}\",\"  mode = range\",\"  timespan = ${2:1 day}\",\"  step-line = ${3:false}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    statistic = ${6:percentile_75}\",\"    period = ${7:10 minute}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    statistic = ${8:percentile_25}\",\"    period = ${7:10 minute}\",\"    ${0}\"],\"description\":\"Range chart\"},\"chart-stack\":{\"prefix\":\"chart-stack\",\"body\":[\"[widget]\",\"  type = chart\",\"  title = ${1:Stack chart}\",\"  mode = stack\",\"  stepline = ${2:true}\",\"  timespan = ${3:1 day}\",\"  max-range = ${4:100}\",\"\",\"  [series]\",\"    entity = ${5:entity-1}\",\"    metric = ${6:metric-1}\",\"    statistic = ${7:avg}\",\"    ${0}\"],\"description\":\"Stack chart\"},\"alert-console\":{\"prefix\":\"alert-console\",\"body\":[\"[widget]\",\"  type = console\",\"  title = ${1:Alert console}\",\"\",\"  severity-style = ${2:row}\",\"\",\"  [column]\",\"    key = ${3:time}\",\"    ${0}\"],\"description\":\"Alert console\"},\"message-console\":{\"prefix\":\"message-console\",\"body\":[\"[widget]\",\"  type = console\",\"  title = ${1:Message console}\",\"  source = message\",\"  entity = ${2:entity-1}\",\"    ${0}\"],\"description\":\"Message console\"},\"gauge\":{\"prefix\":\"gauge\",\"body\":[\"[widget]\",\"  type = gauge\",\"  title = ${1:Gauge}\",\"  thresholds = ${2:0, 60, 80, 100}\",\"  width-units = ${3:0.3}\",\"  height-units = ${4:0.3}\",\"\",\"  [series]\",\"    entity = ${5:entity-1}\",\"    metric = ${6:metric-1}\",\"    ${0}\"],\"description\":\"Gauge\"},\"graph\":{\"prefix\":\"graph\",\"body\":[\"[widget]\",\"  type = graph\",\"  title = ${1:Graph}\",\"  node-connect = ${2:false}\",\"  node-labels = ${3:true}\",\"  link-data = ${4:true}\",\"  timespan = ${5:1 day}\",\"  endtime = ${6:2015-03-14}\",\"\",\"  node-radius = ${7:20}\",\"\",\"  node-thresholds = ${8:-10, -5, 0, 5, 10}\",\"  node-colors = ${9:red, orange, whitesmoke, limegreen, green}\",\"\",\"  link-thresholds = ${10:20000, 40000, 70000, 80000}\",\"  link-widths = ${11:1, 2, 3, 8, 10}\",\"\",\"  [node]\",\"    id = ${12:entity-1}\",\"  [node]\",\"    id = ${13:entity-2}\",\"  [node]\",\"    id = ${14:entity-3}\",\"\",\"    [link]\",\"      nodes = ${12:entity-1} - ${13:entity-2}\",\"    [link]\",\"      nodes = ${12:entity-1} - ${14:entity-3}\",\"    [link]\",\"      nodes = ${13:entity-2} - ${14:entity-3}\",\"\",\"      [series]\",\"        entity = ${12:entity-1}\",\"        metric = ${15:metric-1}\",\"        links = ${12:entity-1} - ${13:entity-2}\",\"        [tags]\",\"          ${16:airport_2_name} = ${13:entity-2}\",\"\",\"      [series]\",\"        entity = ${12:entity-1}\",\"        metric = ${15:metric-1}\",\"        links = ${12:entity-1} - ${14:entity-3}\",\"        [tags]\",\"          ${16:airport_2_name} = ${14:entity-3}\",\"\",\"      [series]\",\"        entity = ${13:entity-2}\",\"        metric = ${15:metric-1}\",\"        links = ${13:entity-2} - ${14:entity-3}\",\"        [tags]\",\"          ${16:airport_2_name} = ${14:entity-3}\",\"\",\"      [series]\",\"        entity = ${12:entity-1}\",\"        metric = ${17:metric-2}\",\"        nodes = ${12:entity-1}\",\"\",\"      [series]\",\"        entity = ${14:entity-2}\",\"        metric = ${17:metric-2}\",\"        nodes = ${14:entity-3}\",\"\",\"      [series]\",\"        entity = ${13:entity-2}\",\"        metric = ${17:metric-2}\",\"        nodes = ${13:entity-2}\",\"        ${0}\"],\"description\":\"Graph\"},\"pie\":{\"prefix\":\"pie\",\"body\":[\"[widget]\",\"  type = pie\",\"  title = ${1:Pie}\",\"\",\"  [series]\",\"    entity = ${2:entity-1}\",\"    metric = ${3:metric-1}\",\"    ${0}\"],\"description\":\"Pie\"},\"property\":{\"prefix\":\"property\",\"body\":[\"[widget]\",\"  type = property\",\"  title = ${1:Property}\",\"  width-units = ${2:0.6}\",\"  class = ${3:terminal}\",\"  timespan = ${4:1 day}\",\"  sort = ${5:command}\",\"  update-interval = ${6:10 second}\",\"\",\"  [column]\",\"    key = ${7:pid}\",\"    label = ${8:PID}\",\"    format = ${9:####}\",\"\",\"  [property]\",\"    type = ${10:process}\",\"    entity = ${11:entity-1}\",\"    ${0}\"],\"description\":\"Property\"},\"chart-table\":{\"prefix\":\"table\",\"body\":[\"[widget]\",\"  type = table\",\"  title = ${1:CPU Usage}\",\"  width-units = ${2:0.3}\",\"\",\"  alert-expression = ${3:value > 5}\",\"  alert-style = ${4:background-color: orange}\",\"\",\"  sort = ${5:value desc}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    ${0}\"],\"description\":\"Table\"},\"table-grid\":{\"prefix\":\"table-grid\",\"body\":[\"[widget]\",\"  type = table\",\"  title = ${2:Table grid}\",\"  last = ${3:true}\",\"\",\"  width-units = ${3:0.5}\",\"\",\"  merge-columns = ${4:entity}\",\"  sort = ${5:metric-1 order(asc/desc)}\",\"\",\"  [column]\",\"    key = ${6:metric-1}\",\"    label = ${7:Metric, measure units}\",\"\",\"  [series]\",\"    entity = ${8:entity-1}\",\"    metric = ${6:metric-1}\",\"    ${0}\"],\"description\":\"Grid table\"},\"text\":{\"prefix\":\"text\",\"body\":[\"[widget]\",\"  type = text\",\"  title = ${1:Text}\",\"  width-units = ${2:0.2}\",\"  height-units = ${3:0.2}\",\"  alert-expression = ${4:value > 1}\",\"  alert-style = ${5:color: red}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    ${0}\"],\"description\":\"Text\"},\"treemap\":{\"prefix\":\"treemap\",\"body\":[\"[widget]\",\"  type = treemap\",\"  title = ${1:Treemap}\",\"  thresholds = ${2:0, 10, 60, 80, 100}\",\"  timespan = ${3:1 day}\",\"\",\"  [series]\",\"    entity = ${4:entity-1}\",\"    metric = ${5:metric-1}\",\"    size = ${6:1}\",\"    ${0}\"],\"description\":\"Treemap\"},\"histogram\":{\"prefix\":\"histogram\",\"body\":[\"[widget]\",\"  type = histogram\",\"  title = ${1:Treemap}\",\"  right-axis = ${2:density}\",\"  top-axis = ${3:percentiles}\",\"  mode = ${4:stack}\",\"  percentiles = ${5:1, 25, 50, 75, 90, 99.9}\",\"\",\"  horizontal-grid = ${2:density}\",\"\",\"  [series]\",\"    entity = ${6:entity-1}\",\"    metric = ${7:metric-1}\",\"    ${0}\"],\"description\":\"Histogram\"},\"portal: 3x2\":{\"prefix\":\"portal: 3x2\",\"body\":[\"[configuration]\",\"  offset-right = ${1:50}\",\"  width-units = ${2:3}\",\"  height-units = ${3:2}\",\"\",\"  timespan = ${4:1 day}\",\"\",\"  [group]\",\"\",\"    [widget]\",\"      type = ${5:chart}\",\"      [series]\",\"        entity = ${6:entity-1}\",\"        metric = ${7:metric-1}\",\"\",\"    [widget]\",\"      type = ${8:chart}\",\"      [series]\",\"        entity = ${9:entity-2}\",\"        metric = ${10:metric-2}\",\"\",\"    [widget]\",\"      type = ${11:chart}\",\"      [series]\",\"        entity = ${12:entity-3}\",\"        metric = ${13:metric-3}\",\"\",\"  [group]\",\"    [widget]\",\"      type = ${14:chart}\",\"      [series]\",\"        entity = ${15:entity-4}\",\"        metric = ${16:metric-4}\",\"\",\"    [widget]\",\"      type = ${17:chart}\",\"      [series]\",\"        entity = ${18:entity-5}\",\"        metric = ${19:metric-5}\",\"\",\"    [widget]\",\"      type = ${20:chart}\",\"      [series]\",\"        entity = ${21:entity-6}\",\"        metric = ${22:metric-6}\",\"        ${0}\"],\"description\":\"Portal 3x2\"},\"series with tags\":{\"prefix\":\"series with tags\",\"body\":[\"[series]\",\"  entity = ${1:entity-1}\",\"  metric = ${2:metric-1}\",\"  [tags]\",\"    ${3:tag} = ${4:value}\",\"    ${0}\"],\"description\":\"Series section with child tags section\"},\"detail series\":{\"prefix\":\"series detail\",\"body\":[\"[series]\",\"  entity = ${1:entity-1}\",\"  metric = ${2:metric-1}\",\"  ${0}\"],\"description\":\"Series section with entity and metric settings\"},\"averaged series\":{\"prefix\":\"series averaged\",\"body\":[\"[series]\",\"  entity = ${1:entity-1}\",\"  metric = ${2:metric-1}\",\"  statistics = ${3:avg}\",\"  period = ${4:10 minute}\",\"  ${0}\"],\"description\":\"Detail series section with average aggregation\"}};\n\n//# sourceURL=webpack:///../snippets/snippets.json?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: _CompletionProvider, _Validator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_CompletionProvider\", function() { return _CompletionProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_Validator\", function() { return _Validator; });\n/* harmony import */ var _server_src_completionProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/src/completionProvider */ \"../server/src/completionProvider.ts\");\n/* harmony import */ var _server_src_completionProvider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_server_src_completionProvider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _server_src_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/src/validator */ \"../server/src/validator.ts\");\n/* harmony import */ var _server_src_validator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_server_src_validator__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst _CompletionProvider = _server_src_completionProvider__WEBPACK_IMPORTED_MODULE_0__[\"CompletionProvider\"];\nconst _Validator = _server_src_validator__WEBPACK_IMPORTED_MODULE_1__[\"Validator\"];\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");\n\n//# sourceURL=webpack:///external_%22fs%22?");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");\n\n//# sourceURL=webpack:///external_%22path%22?");

/***/ })

/******/ });
});